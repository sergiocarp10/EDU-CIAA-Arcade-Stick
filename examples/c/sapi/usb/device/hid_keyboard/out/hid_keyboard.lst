
examples/c/sapi/usb/device/hid_keyboard/out/hid_keyboard.elf:     file format elf32-littlearm
examples/c/sapi/usb/device/hid_keyboard/out/hid_keyboard.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a000369

Program Header:
0x70000001 off    0x00012de8 vaddr 0x1a002de8 paddr 0x1a002de8 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x000000b4 memsz 0x0000016c flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x00002df0 memsz 0x00002df0 flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a002df0 align 2**16
         filesz 0x000000f4 memsz 0x000000f4 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002de4  1a000000  1a000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000f4  10000000  1a002df0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  000200f4  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  000200f4  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  000200f4  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  000200f4  2**2
                  CONTENTS
  6 .bss          00000074  100000f8  100000f8  000000f8  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  000200f4  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  000200f4  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  000200f4  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  000200f4  2**2
                  CONTENTS
 11 .init_array   00000004  1a002de4  1a002de4  00012de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a002de8  1a002de8  00012de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  000200f4  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  000200f4  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  000200f4  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  000200f4  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  000200f4  2**2
                  CONTENTS
 18 .noinit       00000000  1000016c  1000016c  000200f4  2**2
                  CONTENTS
 19 .debug_info   0002104b  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 00004658  00000000  00000000  0004113f  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_aranges 00000980  00000000  00000000  00045797  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_macro  0000c669  00000000  00000000  00046117  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_line   0000fec3  00000000  00000000  00052780  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_str    00027ae0  00000000  00000000  00062643  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .comment      00000068  00000000  00000000  0008a123  2**0
                  CONTENTS, READONLY
 26 .ARM.attributes 00000037  00000000  00000000  0008a18b  2**0
                  CONTENTS, READONLY
 27 .debug_loc    00007aee  00000000  00000000  0008a1c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 28 .debug_ranges 00000998  00000000  00000000  00091cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 29 .debug_frame  00001b90  00000000  00000000  00092648  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
100000f8 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a002de4 l    d  .init_array	00000000 .init_array
1a002de8 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
1000016c l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 app_hid_keyboard.c
00000000 l    df *ABS*	00000000 system.c
100000f8 l     O .bss	00000004 heap_end.5864
00000000 l    df *ABS*	00000000 board_sysinit.c
1a002a84 l     O .text	00000004 InitClkStates
1a002a88 l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 board.c
1a00056c l     F .text	00000044 Board_LED_Init
1a0005b0 l     F .text	00000040 Board_TEC_Init
1a0005f0 l     F .text	00000040 Board_GPIO_Init
1a000630 l     F .text	00000030 Board_ADC_Init
1a000660 l     F .text	00000038 Board_SPI_Init
1a000698 l     F .text	00000024 Board_I2C_Init
1a002b00 l     O .text	00000008 GpioButtons
1a002b08 l     O .text	0000000c GpioLeds
1a002b14 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a00075c l     F .text	00000014 Chip_SSP_GetClockIndex
1a000770 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000048 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a000890 l     F .text	00000014 Chip_ADC_GetClockIndex
1a0008a4 l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a002b2c l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
1a000ab0 l     F .text	00000034 Chip_USB_PllSetup
1a002b74 l     O .text	00000014 usbPLLSetup
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a000b2c l     F .text	000000a0 pll_calc_divs
1a000bcc l     F .text	0000010c pll_get_frac
1a000cd8 l     F .text	0000004c Chip_Clock_FindBaseClock
1a000f4c l     F .text	00000022 Chip_Clock_GetDivRate
100000fc l     O .bss	00000008 audio_usb_pll_freq
1a002b94 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a001134 l     F .text	0000002c Chip_UART_GetIndex
1a002c00 l     O .text	00000008 UART_BClock
1a002c08 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_sleep.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000080 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a001350 l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_tick.c
10000104 l     O .bss	00000004 callBackFuncParams
10000108 l     O .bss	00000008 tickCounter
10000110 l     O .bss	00000004 tickHookFunction
00000000 l    df *ABS*	00000000 cdc_uart.c
1a0016c4 l     F .text	00000084 CDC_ep0_override_hdlr
1a001748 l     F .text	000000c0 UCOM_bulk_hdlr
1a001808 l     F .text	00000090 UCOM_SetLineCode
10000114 l     O .bss	00000004 g_defaultCdcHdlr
10000118 l     O .bss	00000018 g_uCOM
00000000 l    df *ABS*	00000000 usbd_keyboard.c
1a001974 l     F .text	00000014 Keyboard_EpIN_Hdlr
1a001988 l     F .text	00000020 Keyboard_UpdateReport
1a0019a8 l     F .text	00000048 Keyboard_SetReport
1a0019f0 l     F .text	00000040 Keyboard_GetReport
10000130 l     O .bss	00000010 g_keyBoard
00000000 l    df *ABS*	00000000 sapi_usb_device.c
1a001b68 l     F .text	00000010 usbDeviceLpcInterruptPrioritySet
1a001b78 l     F .text	00000028 usbDeviceLpcInterruptInit
1a001ba0 l     F .text	00000098 usbDeviceLpcInit
10000144 l     O .bss	00000004 g_Ep0BaseHdlr
10000148 l     O .bss	00000004 g_ep0RxBusy
1000014c l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1a002230 l     F .text	00000048 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 usbd_keyboard_hid_desc.c
00000000 l    df *ABS*	00000000 impure.c
10000094 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 
1a002de8 l       .init_array	00000000 __init_array_end
1a002de4 l       .bss_RAM5	00000000 __preinit_array_end
1a002de4 l       .init_array	00000000 __init_array_start
1a002de4 l       .bss_RAM5	00000000 __preinit_array_start
1a000d70 g     F .text	0000001c Chip_Clock_GetDividerSource
1a000408 g     F .text	00000012 _isatty_r
1a0025c8 g     F .text	000000dc _puts_r
1a0001ba  w    F .text	00000002 TIMER2_IRQHandler
1a00041a g     F .text	0000000a _lseek_r
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a000752 g     F .text	00000008 __stdio_init
10000160 g     O .bss	00000001 __lock___atexit_recursive_mutex
1a000ae4 g     F .text	00000034 Chip_USB0_Init
1a00270e g     F .text	00000024 __sseek
1a0022e0 g     F .text	00000070 __sinit
1a00273c g     F .text	000000a4 __swbuf_r
1a00017a  w    F .text	00000002 HardFault_Handler
1a002284 g     F .text	0000002c __sfmoreglue
1a000000 g       *ABS*	00000000 __vectors_start__
1a00094a g     F .text	0000000c Chip_ADC_SetResolution
1a002990 g     F .text	0000000c __malloc_unlock
1a001698 g     F .text	0000002c SysTick_Handler
1a0011dc g     F .text	00000040 Chip_UART_SetBaud
10000161 g     O .bss	00000001 __lock___arc4random_mutex
1a000364  w    F .text	00000002 initialise_monitor_handles
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a0006f4 g     F .text	0000001c Board_UARTGetChar
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a000186  w    F .text	00000002 PendSV_Handler
1a000178  w    F .text	00000002 NMI_Handler
1a002df0 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a001898 g     F .text	000000dc cdcUartLpcInit
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
1a001110 g     F .text	00000014 Chip_Clock_EnablePLL
1a0003fe g     F .text	0000000a _fstat_r
53ff7526 g       *ABS*	00000000 __valid_user_code_checksum
1a002df0 g       .ARM.exidx	00000000 _etext
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a001b10 g     F .text	0000000c usbDeviceKeyboardPress
1a002a00 g     O .text	00000082 USB_StringDescriptor
1a0001ba  w    F .text	00000002 TIMER3_IRQHandler
1a001008 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001ba  w    F .text	00000002 UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a002278 g     F .text	0000000c _cleanup_r
1a0010d0 g     F .text	00000040 Chip_Clock_SetupPLL
1a001da8 g     F .text	00000000 .hidden __aeabi_uldivmod
1000016c g       .noinit	00000000 _noinit
1a0026a4 g     F .text	00000010 puts
10000158 g     O .bss	00000004 SystemCoreClock
1a001160 g     F .text	00000054 Chip_UART_Init
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a001c70 g     F .text	000000c4 usbDeviceInit
1a000180  w    F .text	00000002 UsageFault_Handler
1a001084 g     F .text	0000004c Chip_Clock_GetRate
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
1a0029e0 g     O .text	00000012 USB_DeviceDescriptor
1a0004f4 g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a001dd8 g     F .text	000002d0 .hidden __udivmoddi4
1a00049c g     F .text	00000020 _sbrk_r
1a002afc g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a000424 g     F .text	0000004e _read_r
1a0001ba  w    F .text	00000002 GPIO1_IRQHandler
1a001c54 g     F .text	0000001a find_IntfDesc
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a002de8 g       .ARM.exidx	00000000 __exidx_start
10000162 g     O .bss	00000001 __lock___env_recursive_mutex
1a0002fc g     O .text	00000004 CRP_WORD
10000163 g     O .bss	00000001 __lock___sinit_recursive_mutex
1a002de0 g     O .text	00000004 _global_impure_ptr
1a002418 g     F .text	00000048 __libc_init_array
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a000710 g     F .text	00000030 Board_Init
1a0003f2  w    F .text	00000002 _init
1a000114 g       .text	00000000 __data_section_table
1a0001ba  w    F .text	00000002 RTC_IRQHandler
1000016c g       .bss	00000000 _ebss
1a0001ba  w    F .text	00000002 TIMER0_IRQHandler
1a000368 g     F .text	00000088 Reset_Handler
1a00161c g     F .text	0000007c tickInit
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a000854 g     F .text	00000038 Chip_I2C_SetClockRate
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a000d24 g     F .text	0000004c Chip_Clock_EnableCrystal
10000164 g     O .bss	00000001 __lock___malloc_recursive_mutex
10008000 g       *ABS*	00000000 __top_RamLoc32
1a00018a g     F .text	0000001e data_init
1a001b30 g     F .text	00000038 EP0_patch
1a0001ba  w    F .text	00000002 TIMER1_IRQHandler
1a002d80 g     O .text	00000020 __sf_fake_stderr
1a000830 g     F .text	00000024 Chip_I2C_Init
1a002464 g     F .text	00000002 __retarget_lock_release_recursive
1a0001ba  w    F .text	00000002 UART2_IRQHandler
1a000ee0 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a002c10 g     O .text	000000e6 gpioPinsInit
1a000788 g     F .text	00000012 Chip_SSP_SetClockRate
1a00299c g     O .text	00000002 Keyboard_ReportDescSize
1a0001ba  w    F .text	00000002 GPIO2_IRQHandler
1a0022b0 g     F .text	0000000c __sfp_lock_acquire
1a002478 g     F .text	0000009c _free_r
1a000fe2 g     F .text	00000026 Chip_Clock_GetBaseClock
1a001124 g     F .text	0000000e Chip_Clock_GetPLLStatus
100000f8 g       .bss	00000000 _bss
1a000918 g     F .text	00000032 Chip_ADC_SetSampleRate
1a000300 g     F .text	00000044 checkForPressedKeys
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a00079a g     F .text	0000003e Chip_SSP_SetBitRate
1a00088c g     F .text	00000002 Chip_GPIO_Init
1a002b28 g     O .text	00000004 OscRateIn
1000016c g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a000178 g       .text	00000000 __bss_section_table_end
1a0003f4 g     F .text	0000000a _close_r
1a001384 g     F .text	000001ac gpioInit
1a001330 g     F .text	00000004 sleepUntilNextInterrupt
1a001b1c g     F .text	00000014 usbDeviceKeyboardCheckKeysCallbackSet
1a0027e0 g     F .text	000000dc __swsetup_r
1a0020a8  w    F .text	00000002 .hidden __aeabi_ldiv0
1a002350 g     F .text	0000008c __sfp
1a001a30 g     F .text	0000009c usbDeviceKeyboardInit
1a0022d4 g     F .text	0000000c __sinit_lock_release
1a0026b4 g     F .text	00000022 __sread
1a001c38 g     F .text	0000001c USB0_IRQHandler
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a002984 g     F .text	0000000c __malloc_lock
1a0006e0 g     F .text	00000014 Board_UARTPutChar
1a0011b4 g     F .text	00000028 Chip_UART_Send
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a0021b8 g     F .text	00000078 _fflush_r
1a002da0 g     O .text	00000020 __sf_fake_stdin
1a000d8c g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a001acc g     F .text	00000044 usbDeviceKeyboardTasks
1a002462 g     F .text	00000002 __retarget_lock_acquire_recursive
1a002466 g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a000344 g     F .text	00000020 main
1a002460 g     F .text	00000002 __retarget_lock_init_recursive
1a0001ba  w    F .text	00000002 WDT_IRQHandler
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a000182  w    F .text	00000002 SVC_Handler
1a002732 g     F .text	00000008 __sclose
1a002514 g     F .text	000000b4 _malloc_r
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a001014 g     F .text	0000003c Chip_Clock_EnableOpts
1a00074a g     F .text	00000008 __stdio_getchar
1a0029a0 g     O .text	0000003f Keyboard_ReportDescriptor
1a000da8 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a000e60 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a0029f4 g     O .text	0000000a USB_DeviceQualifier
1a0012f8 g     F .text	00000038 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a001530 g     F .text	0000006a gpioWrite
1a0003f0  w    F .text	00000002 _fini
1a0008d8 g     F .text	00000040 Chip_ADC_Init
1000015c g     O .bss	00000004 g_pUsbApi
1a0004bc g     F .text	00000038 Board_SetupMuxing
1a00121c g     F .text	000000dc Chip_UART_SetBaudFDR
1a000472 g     F .text	00000028 _write_r
10000088 g     O .data	00000008 tickRateMS
1a0001ba  w    F .text	00000002 ETH_IRQHandler
10000090 g     O .data	00000004 _impure_ptr
1a0020ac g     F .text	0000010c __sflush_r
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
10000024 g     O .data	00000023 USB_HsConfigDescriptor
1000016c g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a0007d8 g     F .text	00000038 Chip_SSP_Init
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a0028bc g     F .text	00000048 __swhatbuf_r
1a0001ba  w    F .text	00000002 DAC_IRQHandler
1a0006bc g     F .text	00000024 Board_Debug_Init
1a000740 g     F .text	0000000a __stdio_putchar
100000f4 g       .data	00000000 _edata
1a000810 g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
10000165 g     O .bss	00000001 __lock___at_quick_exit_mutex
1a000958 g     F .text	00000158 Chip_SetupCoreClock
10000000 g     O .data	00000023 USB_FsConfigDescriptor
1a0026d6 g     F .text	00000038 __swrite
1a0001ba  w    F .text	00000002 GPIO0_IRQHandler
1a000000 g     O .text	00000040 g_pfnVectors
1a0023dc g     F .text	0000003c _fwalk_reent
1a000b18 g     F .text	00000014 SystemCoreClockUpdate
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a0022bc g     F .text	0000000c __sfp_lock_release
1a002dc0 g     O .text	00000020 __sf_fake_stdout
1a0020a8  w    F .text	00000002 .hidden __aeabi_idiv0
1a00017e  w    F .text	00000002 BusFault_Handler
10000166 g     O .bss	00000001 __lock___dd_hash_mutex
1a002904 g     F .text	00000080 __smakebuf_r
10000167 g     O .bss	00000001 __lock___tz_mutex
1a001050 g     F .text	00000034 Chip_Clock_Enable
1a0001ba  w    F .text	00000002 UART3_IRQHandler
10000154 g     O .bss	00000004 __malloc_sbrk_start
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a00159a g     F .text	00000068 gpioRead
1a001d34 g     F .text	00000074 boardInit
10000150 g     O .bss	00000004 __malloc_free_list
10000140 g     O .bss	00000004 keyboardCheckKeysFunction
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a001604 g     F .text	00000018 tickPowerSet
1a000fc8 g     F .text	0000001a Chip_Clock_EnableBaseClock
1a000f70 g     F .text	00000058 Chip_Clock_SetBaseClock
1a001334 g     F .text	0000001c cyclesCounterInit
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
10000168 g     O .bss	00000001 __lock___sfp_recursive_mutex
1a0022c8 g     F .text	0000000c __sinit_lock_acquire
1a000560 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 69 03 00 1a 79 01 00 1a 7b 01 00 1a     ....i...y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a 26 75 ff 53     }...........&u.S
	...
1a00002c:	83 01 00 1a 85 01 00 1a 00 00 00 00 87 01 00 1a     ................
1a00003c:	99 16 00 1a                                         ....

1a000040 <g_pfnVendorVectors>:
1a000040:	bb 01 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     ................
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	39 1c 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     9...............
1a000070:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a002df0 	.word	0x1a002df0
1a000118:	10000000 	.word	0x10000000
1a00011c:	000000f4 	.word	0x000000f4
1a000120:	1a002df0 	.word	0x1a002df0
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a002df0 	.word	0x1a002df0
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a002df0 	.word	0x1a002df0
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a002df0 	.word	0x1a002df0
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	100000f8 	.word	0x100000f8
1a000154:	00000074 	.word	0x00000074
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
    }
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
    }
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
    }
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
    }
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
    }
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>

1a000182 <SVC_Handler>:
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
    }
1a000182:	e7fe      	b.n	1a000182 <SVC_Handler>

1a000184 <DebugMon_Handler>:
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
    }
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>

1a000186 <PendSV_Handler>:
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
    }
1a000186:	e7fe      	b.n	1a000186 <PendSV_Handler>
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
    }
1a000188:	e7fe      	b.n	1a000188 <PendSV_Handler+0x2>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	f850 4b04 	ldr.w	r4, [r0], #4
1a000196:	f841 4b04 	str.w	r4, [r1], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019a:	3304      	adds	r3, #4
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	428b      	cmp	r3, r1
1a0001ac:	d204      	bcs.n	1a0001b8 <bss_init+0x10>
        *pulDest++ = 0;
1a0001ae:	2200      	movs	r2, #0
1a0001b0:	f840 2b04 	str.w	r2, [r0], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	3304      	adds	r3, #4
1a0001b6:	e7f8      	b.n	1a0001aa <bss_init+0x2>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
};

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
    while (1) {
    }
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <checkForPressedKeys>:
 */

#include "sapi.h"         /* <= sAPI header */

void checkForPressedKeys( void* unused )
{
1a000300:	b508      	push	{r3, lr}
   /* Read keys */
   if( !gpioRead( TEC1 ) ){
1a000302:	2024      	movs	r0, #36	; 0x24
1a000304:	f001 f949 	bl	1a00159a <gpioRead>
1a000308:	b918      	cbnz	r0, 1a000312 <checkForPressedKeys+0x12>
      usbDeviceKeyboardPress( USB_KEY_C ); // 'c' or 'C'
1a00030a:	2006      	movs	r0, #6
1a00030c:	f001 fc00 	bl	1a001b10 <usbDeviceKeyboardPress>
      usbDeviceKeyboardPress( USB_KEY_A ); // 'a' or 'A'
   }
   else if( !gpioRead( TEC4 ) ){         
      usbDeviceKeyboardPress( USB_KEY_ENTER ); // Enter
   }
}
1a000310:	bd08      	pop	{r3, pc}
   else if( !gpioRead( TEC2 ) ){
1a000312:	2025      	movs	r0, #37	; 0x25
1a000314:	f001 f941 	bl	1a00159a <gpioRead>
1a000318:	b918      	cbnz	r0, 1a000322 <checkForPressedKeys+0x22>
      usbDeviceKeyboardPress( USB_KEY_I ); // 'i' or 'I'
1a00031a:	200c      	movs	r0, #12
1a00031c:	f001 fbf8 	bl	1a001b10 <usbDeviceKeyboardPress>
1a000320:	e7f6      	b.n	1a000310 <checkForPressedKeys+0x10>
   else if( !gpioRead( TEC3 ) ){         
1a000322:	2026      	movs	r0, #38	; 0x26
1a000324:	f001 f939 	bl	1a00159a <gpioRead>
1a000328:	b918      	cbnz	r0, 1a000332 <checkForPressedKeys+0x32>
      usbDeviceKeyboardPress( USB_KEY_A ); // 'a' or 'A'
1a00032a:	2004      	movs	r0, #4
1a00032c:	f001 fbf0 	bl	1a001b10 <usbDeviceKeyboardPress>
1a000330:	e7ee      	b.n	1a000310 <checkForPressedKeys+0x10>
   else if( !gpioRead( TEC4 ) ){         
1a000332:	2027      	movs	r0, #39	; 0x27
1a000334:	f001 f931 	bl	1a00159a <gpioRead>
1a000338:	2800      	cmp	r0, #0
1a00033a:	d1e9      	bne.n	1a000310 <checkForPressedKeys+0x10>
      usbDeviceKeyboardPress( USB_KEY_ENTER ); // Enter
1a00033c:	2028      	movs	r0, #40	; 0x28
1a00033e:	f001 fbe7 	bl	1a001b10 <usbDeviceKeyboardPress>
}
1a000342:	e7e5      	b.n	1a000310 <checkForPressedKeys+0x10>

1a000344 <main>:

/* FUNCION PRINCIPAL, PUNTO DE ENTRADA AL PROGRAMA LUEGO DE RESET. */
int main(void){
1a000344:	b508      	push	{r3, lr}

   /* ------------- INICIALIZACIONES ------------- */

   /* Inicializar la placa */
   boardConfig();
1a000346:	f001 fcf5 	bl	1a001d34 <boardInit>

   // Configuration routine for HID Keyboard example   
   usbDeviceConfig(USB_HID_KEYBOARD);   
1a00034a:	2001      	movs	r0, #1
1a00034c:	f001 fc90 	bl	1a001c70 <usbDeviceInit>
   usbDeviceKeyboardCheckKeysCallbackSet( checkForPressedKeys );
1a000350:	4803      	ldr	r0, [pc, #12]	; (1a000360 <main+0x1c>)
1a000352:	f001 fbe3 	bl	1a001b1c <usbDeviceKeyboardCheckKeysCallbackSet>
   
   /* ------------- REPETIR POR SIEMPRE ------------- */

   while(1) {
      /* Do Keyboard tasks */      
      usbDeviceKeyboardTasks();
1a000356:	f001 fbb9 	bl	1a001acc <usbDeviceKeyboardTasks>
      
      /* Sleep until next Interrupt happens */
      sleepUntilNextInterrupt();
1a00035a:	f000 ffe9 	bl	1a001330 <sleepUntilNextInterrupt>
1a00035e:	e7fa      	b.n	1a000356 <main+0x12>
1a000360:	1a000301 	.word	0x1a000301

1a000364 <initialise_monitor_handles>:
}
1a000364:	4770      	bx	lr
1a000366:	Address 0x1a000366 is out of bounds.


1a000368 <Reset_Handler>:
void Reset_Handler(void) {
1a000368:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a00036a:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a00036c:	4b19      	ldr	r3, [pc, #100]	; (1a0003d4 <Reset_Handler+0x6c>)
1a00036e:	4a1a      	ldr	r2, [pc, #104]	; (1a0003d8 <Reset_Handler+0x70>)
1a000370:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a000372:	3304      	adds	r3, #4
1a000374:	4a19      	ldr	r2, [pc, #100]	; (1a0003dc <Reset_Handler+0x74>)
1a000376:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000378:	2300      	movs	r3, #0
1a00037a:	e005      	b.n	1a000388 <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a00037c:	4a18      	ldr	r2, [pc, #96]	; (1a0003e0 <Reset_Handler+0x78>)
1a00037e:	f04f 31ff 	mov.w	r1, #4294967295
1a000382:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000386:	3301      	adds	r3, #1
1a000388:	2b07      	cmp	r3, #7
1a00038a:	d9f7      	bls.n	1a00037c <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a00038c:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a00038e:	4b15      	ldr	r3, [pc, #84]	; (1a0003e4 <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a000390:	e007      	b.n	1a0003a2 <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a000392:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a000396:	689a      	ldr	r2, [r3, #8]
1a000398:	6859      	ldr	r1, [r3, #4]
1a00039a:	6818      	ldr	r0, [r3, #0]
1a00039c:	f7ff fef5 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a0003a0:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a0003a2:	4a11      	ldr	r2, [pc, #68]	; (1a0003e8 <Reset_Handler+0x80>)
1a0003a4:	4293      	cmp	r3, r2
1a0003a6:	d3f4      	bcc.n	1a000392 <Reset_Handler+0x2a>
1a0003a8:	e006      	b.n	1a0003b8 <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a0003aa:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a0003ac:	6859      	ldr	r1, [r3, #4]
1a0003ae:	f854 0b08 	ldr.w	r0, [r4], #8
1a0003b2:	f7ff fef9 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a0003b6:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a0003b8:	4a0c      	ldr	r2, [pc, #48]	; (1a0003ec <Reset_Handler+0x84>)
1a0003ba:	4293      	cmp	r3, r2
1a0003bc:	d3f5      	bcc.n	1a0003aa <Reset_Handler+0x42>
    SystemInit();
1a0003be:	f000 ff9b 	bl	1a0012f8 <SystemInit>
    __libc_init_array();
1a0003c2:	f002 f829 	bl	1a002418 <__libc_init_array>
    initialise_monitor_handles();
1a0003c6:	f7ff ffcd 	bl	1a000364 <initialise_monitor_handles>
    main();
1a0003ca:	f7ff ffbb 	bl	1a000344 <main>
        __asm__ volatile("wfi");
1a0003ce:	bf30      	wfi
1a0003d0:	e7fd      	b.n	1a0003ce <Reset_Handler+0x66>
1a0003d2:	bf00      	nop
1a0003d4:	40053100 	.word	0x40053100
1a0003d8:	10df1000 	.word	0x10df1000
1a0003dc:	01dff7ff 	.word	0x01dff7ff
1a0003e0:	e000e280 	.word	0xe000e280
1a0003e4:	1a000114 	.word	0x1a000114
1a0003e8:	1a000150 	.word	0x1a000150
1a0003ec:	1a000178 	.word	0x1a000178

1a0003f0 <_fini>:
void _fini(void) {}
1a0003f0:	4770      	bx	lr

1a0003f2 <_init>:
void _init(void) {}
1a0003f2:	4770      	bx	lr

1a0003f4 <_close_r>:
   (void) __params__;
}

USED int _close_r(struct _reent *r, int fd) {
   UNUSED(fd);
   SET_ERR(EBADF);
1a0003f4:	2309      	movs	r3, #9
1a0003f6:	6003      	str	r3, [r0, #0]
   return -1;
}
1a0003f8:	f04f 30ff 	mov.w	r0, #4294967295
1a0003fc:	4770      	bx	lr

1a0003fe <_fstat_r>:
}

USED int _fstat_r(struct _reent *r, int fd, struct stat *st) {
   UNUSED(fd);
   UNUSED(st);
   SET_ERR(ENOSYS);
1a0003fe:	2358      	movs	r3, #88	; 0x58
1a000400:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000402:	f04f 30ff 	mov.w	r0, #4294967295
1a000406:	4770      	bx	lr

1a000408 <_isatty_r>:
   UNUSED(r);
   return 1;
}

USED int _isatty_r(struct _reent *r, int fd) {
   switch (fd) {
1a000408:	2902      	cmp	r1, #2
1a00040a:	d904      	bls.n	1a000416 <_isatty_r+0xe>
   case 0:
   case 1:
   case 2:
       return 1;
   default:
       SET_ERR(EBADF);
1a00040c:	2309      	movs	r3, #9
1a00040e:	6003      	str	r3, [r0, #0]
       return -1;
1a000410:	f04f 30ff 	mov.w	r0, #4294967295
1a000414:	4770      	bx	lr
       return 1;
1a000416:	2001      	movs	r0, #1
   }
}
1a000418:	4770      	bx	lr

1a00041a <_lseek_r>:

USED _off_t _lseek_r(struct _reent *r, int fd, _off_t off, int w) {
   UNUSED(fd);
   UNUSED(off);
   UNUSED(w);
   SET_ERR(ENOSYS);
1a00041a:	2358      	movs	r3, #88	; 0x58
1a00041c:	6003      	str	r3, [r0, #0]
   return -1;
}
1a00041e:	f04f 30ff 	mov.w	r0, #4294967295
1a000422:	4770      	bx	lr

1a000424 <_read_r>:
   }
}
*/
USED _ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
  size_t i = 0;
  switch (fd) {
1a000424:	2902      	cmp	r1, #2
1a000426:	d81f      	bhi.n	1a000468 <_read_r+0x44>
USED _ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
1a000428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00042c:	461d      	mov	r5, r3
1a00042e:	4617      	mov	r7, r2
1a000430:	4606      	mov	r6, r0
  size_t i = 0;
1a000432:	2400      	movs	r4, #0
  case 0:
  case 1:
  case 2:
      while( i < n ){
1a000434:	42ac      	cmp	r4, r5
1a000436:	d211      	bcs.n	1a00045c <_read_r+0x38>
         int c = __stdio_getchar();
1a000438:	f000 f987 	bl	1a00074a <__stdio_getchar>
         if( c != -1 ){
1a00043c:	f1b0 3fff 	cmp.w	r0, #4294967295
1a000440:	d0f8      	beq.n	1a000434 <_read_r+0x10>
            ((char*) b)[i++] = (char) c;
1a000442:	f104 0801 	add.w	r8, r4, #1
1a000446:	5538      	strb	r0, [r7, r4]
            if( c == '\r' || c == '\n' ){
1a000448:	280d      	cmp	r0, #13
1a00044a:	d003      	beq.n	1a000454 <_read_r+0x30>
1a00044c:	280a      	cmp	r0, #10
1a00044e:	d001      	beq.n	1a000454 <_read_r+0x30>
            ((char*) b)[i++] = (char) c;
1a000450:	4644      	mov	r4, r8
1a000452:	e7ef      	b.n	1a000434 <_read_r+0x10>
               // read anotherone to prevent \r\n
               (void) __stdio_getchar();
1a000454:	f000 f979 	bl	1a00074a <__stdio_getchar>
               return i;
1a000458:	4640      	mov	r0, r8
1a00045a:	e003      	b.n	1a000464 <_read_r+0x40>
            }
         }
      }
      SET_ERR(ENODEV);
1a00045c:	2313      	movs	r3, #19
1a00045e:	6033      	str	r3, [r6, #0]
      return -1;
1a000460:	f04f 30ff 	mov.w	r0, #4294967295
  default:
      SET_ERR(ENODEV);
      return -1;
  }
}
1a000464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_ERR(ENODEV);
1a000468:	2313      	movs	r3, #19
1a00046a:	6003      	str	r3, [r0, #0]
      return -1;
1a00046c:	f04f 30ff 	mov.w	r0, #4294967295
}
1a000470:	4770      	bx	lr

1a000472 <_write_r>:
   return -1;
}

USED _ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
   size_t i;
   switch (fd) {
1a000472:	2902      	cmp	r1, #2
1a000474:	d80c      	bhi.n	1a000490 <_write_r+0x1e>
USED _ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
1a000476:	b570      	push	{r4, r5, r6, lr}
1a000478:	461d      	mov	r5, r3
1a00047a:	4616      	mov	r6, r2
   case 0:
   case 1:
   case 2:
       for (i = 0; i < n; i++)
1a00047c:	2400      	movs	r4, #0
1a00047e:	42ac      	cmp	r4, r5
1a000480:	d204      	bcs.n	1a00048c <_write_r+0x1a>
           __stdio_putchar(((char*) b)[i]);
1a000482:	5d30      	ldrb	r0, [r6, r4]
1a000484:	f000 f95c 	bl	1a000740 <__stdio_putchar>
       for (i = 0; i < n; i++)
1a000488:	3401      	adds	r4, #1
1a00048a:	e7f8      	b.n	1a00047e <_write_r+0xc>
       return n;
1a00048c:	4628      	mov	r0, r5
   default:
       SET_ERR(ENODEV);
       return -1;
   }
}
1a00048e:	bd70      	pop	{r4, r5, r6, pc}
       SET_ERR(ENODEV);
1a000490:	2313      	movs	r3, #19
1a000492:	6003      	str	r3, [r0, #0]
       return -1;
1a000494:	f04f 30ff 	mov.w	r0, #4294967295
}
1a000498:	4770      	bx	lr
1a00049a:	Address 0x1a00049a is out of bounds.


1a00049c <_sbrk_r>:

USED void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a00049c:	4b05      	ldr	r3, [pc, #20]	; (1a0004b4 <_sbrk_r+0x18>)
1a00049e:	681b      	ldr	r3, [r3, #0]
1a0004a0:	b123      	cbz	r3, 1a0004ac <_sbrk_r+0x10>
       heap_end = &_pvHeapStart;
   }
   prev_heap_end = heap_end;
1a0004a2:	4b04      	ldr	r3, [pc, #16]	; (1a0004b4 <_sbrk_r+0x18>)
1a0004a4:	6818      	ldr	r0, [r3, #0]
   heap_end += incr;
1a0004a6:	4401      	add	r1, r0
1a0004a8:	6019      	str	r1, [r3, #0]
   return prev_heap_end;
}
1a0004aa:	4770      	bx	lr
       heap_end = &_pvHeapStart;
1a0004ac:	4b01      	ldr	r3, [pc, #4]	; (1a0004b4 <_sbrk_r+0x18>)
1a0004ae:	4a02      	ldr	r2, [pc, #8]	; (1a0004b8 <_sbrk_r+0x1c>)
1a0004b0:	601a      	str	r2, [r3, #0]
1a0004b2:	e7f6      	b.n	1a0004a2 <_sbrk_r+0x6>
1a0004b4:	100000f8 	.word	0x100000f8
1a0004b8:	1000016c 	.word	0x1000016c

1a0004bc <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a0004bc:	2300      	movs	r3, #0
1a0004be:	2b1c      	cmp	r3, #28
1a0004c0:	d812      	bhi.n	1a0004e8 <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a0004c2:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a0004c4:	4a09      	ldr	r2, [pc, #36]	; (1a0004ec <Board_SetupMuxing+0x30>)
1a0004c6:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a0004ca:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a0004ce:	784a      	ldrb	r2, [r1, #1]
1a0004d0:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0004d2:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a0004d6:	4906      	ldr	r1, [pc, #24]	; (1a0004f0 <Board_SetupMuxing+0x34>)
1a0004d8:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a0004dc:	3301      	adds	r3, #1
1a0004de:	2b1c      	cmp	r3, #28
1a0004e0:	d9f0      	bls.n	1a0004c4 <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a0004e2:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0004e6:	4770      	bx	lr
1a0004e8:	4770      	bx	lr
1a0004ea:	bf00      	nop
1a0004ec:	1a002a88 	.word	0x1a002a88
1a0004f0:	40086000 	.word	0x40086000

1a0004f4 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a0004f4:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a0004f6:	4a17      	ldr	r2, [pc, #92]	; (1a000554 <Board_SetupClocking+0x60>)
1a0004f8:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a0004fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a000500:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000504:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a000508:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a00050c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a000510:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000514:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a000518:	2201      	movs	r2, #1
1a00051a:	490f      	ldr	r1, [pc, #60]	; (1a000558 <Board_SetupClocking+0x64>)
1a00051c:	2006      	movs	r0, #6
1a00051e:	f000 fa1b 	bl	1a000958 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a000522:	2400      	movs	r4, #0
1a000524:	b14c      	cbz	r4, 1a00053a <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a000526:	4b0b      	ldr	r3, [pc, #44]	; (1a000554 <Board_SetupClocking+0x60>)
1a000528:	685a      	ldr	r2, [r3, #4]
1a00052a:	f022 020c 	bic.w	r2, r2, #12
1a00052e:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a000530:	685a      	ldr	r2, [r3, #4]
1a000532:	f042 0203 	orr.w	r2, r2, #3
1a000536:	605a      	str	r2, [r3, #4]
}
1a000538:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a00053a:	4808      	ldr	r0, [pc, #32]	; (1a00055c <Board_SetupClocking+0x68>)
1a00053c:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a000540:	2301      	movs	r3, #1
1a000542:	788a      	ldrb	r2, [r1, #2]
1a000544:	7849      	ldrb	r1, [r1, #1]
1a000546:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a00054a:	f000 fd11 	bl	1a000f70 <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a00054e:	3401      	adds	r4, #1
1a000550:	e7e8      	b.n	1a000524 <Board_SetupClocking+0x30>
1a000552:	bf00      	nop
1a000554:	40043000 	.word	0x40043000
1a000558:	0c28cb00 	.word	0x0c28cb00
1a00055c:	1a002a84 	.word	0x1a002a84

1a000560 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a000560:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a000562:	f7ff ffab 	bl	1a0004bc <Board_SetupMuxing>
    Board_SetupClocking();
1a000566:	f7ff ffc5 	bl	1a0004f4 <Board_SetupClocking>
}
1a00056a:	bd08      	pop	{r3, pc}

1a00056c <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a00056c:	2200      	movs	r2, #0
1a00056e:	2a05      	cmp	r2, #5
1a000570:	d819      	bhi.n	1a0005a6 <Board_LED_Init+0x3a>
{
1a000572:	b470      	push	{r4, r5, r6}
      const struct gpio_t *io = &GpioLeds[i];
      Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a000574:	490c      	ldr	r1, [pc, #48]	; (1a0005a8 <Board_LED_Init+0x3c>)
1a000576:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a00057a:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a00057e:	784c      	ldrb	r4, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a000580:	4b0a      	ldr	r3, [pc, #40]	; (1a0005ac <Board_LED_Init+0x40>)
1a000582:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a000586:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a00058a:	2001      	movs	r0, #1
1a00058c:	40a0      	lsls	r0, r4
1a00058e:	4301      	orrs	r1, r0
1a000590:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a000594:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a000598:	2100      	movs	r1, #0
1a00059a:	5519      	strb	r1, [r3, r4]
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a00059c:	3201      	adds	r2, #1
1a00059e:	2a05      	cmp	r2, #5
1a0005a0:	d9e8      	bls.n	1a000574 <Board_LED_Init+0x8>
      Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
   }
}
1a0005a2:	bc70      	pop	{r4, r5, r6}
1a0005a4:	4770      	bx	lr
1a0005a6:	4770      	bx	lr
1a0005a8:	1a002b08 	.word	0x1a002b08
1a0005ac:	400f4000 	.word	0x400f4000

1a0005b0 <Board_TEC_Init>:


static void Board_TEC_Init()
{
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a0005b0:	2300      	movs	r3, #0
1a0005b2:	2b03      	cmp	r3, #3
1a0005b4:	d816      	bhi.n	1a0005e4 <Board_TEC_Init+0x34>
{
1a0005b6:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioButtons[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a0005b8:	490b      	ldr	r1, [pc, #44]	; (1a0005e8 <Board_TEC_Init+0x38>)
1a0005ba:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a0005be:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a0005c2:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a0005c4:	4c09      	ldr	r4, [pc, #36]	; (1a0005ec <Board_TEC_Init+0x3c>)
1a0005c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a0005ca:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a0005ce:	2001      	movs	r0, #1
1a0005d0:	40a8      	lsls	r0, r5
1a0005d2:	ea21 0100 	bic.w	r1, r1, r0
1a0005d6:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a0005da:	3301      	adds	r3, #1
1a0005dc:	2b03      	cmp	r3, #3
1a0005de:	d9eb      	bls.n	1a0005b8 <Board_TEC_Init+0x8>
   }
}
1a0005e0:	bc30      	pop	{r4, r5}
1a0005e2:	4770      	bx	lr
1a0005e4:	4770      	bx	lr
1a0005e6:	bf00      	nop
1a0005e8:	1a002b00 	.word	0x1a002b00
1a0005ec:	400f4000 	.word	0x400f4000

1a0005f0 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a0005f0:	2300      	movs	r3, #0
1a0005f2:	2b08      	cmp	r3, #8
1a0005f4:	d816      	bhi.n	1a000624 <Board_GPIO_Init+0x34>
{
1a0005f6:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioPorts[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a0005f8:	490b      	ldr	r1, [pc, #44]	; (1a000628 <Board_GPIO_Init+0x38>)
1a0005fa:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a0005fe:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a000602:	784d      	ldrb	r5, [r1, #1]
1a000604:	4c09      	ldr	r4, [pc, #36]	; (1a00062c <Board_GPIO_Init+0x3c>)
1a000606:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a00060a:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a00060e:	2001      	movs	r0, #1
1a000610:	40a8      	lsls	r0, r5
1a000612:	ea21 0100 	bic.w	r1, r1, r0
1a000616:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a00061a:	3301      	adds	r3, #1
1a00061c:	2b08      	cmp	r3, #8
1a00061e:	d9eb      	bls.n	1a0005f8 <Board_GPIO_Init+0x8>
   }
}
1a000620:	bc30      	pop	{r4, r5}
1a000622:	4770      	bx	lr
1a000624:	4770      	bx	lr
1a000626:	bf00      	nop
1a000628:	1a002b14 	.word	0x1a002b14
1a00062c:	400f4000 	.word	0x400f4000

1a000630 <Board_ADC_Init>:
   Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a000630:	b510      	push	{r4, lr}
1a000632:	b082      	sub	sp, #8
   ADC_CLOCK_SETUP_T cs;

   Chip_ADC_Init(LPC_ADC0, &cs);
1a000634:	4c08      	ldr	r4, [pc, #32]	; (1a000658 <Board_ADC_Init+0x28>)
1a000636:	4669      	mov	r1, sp
1a000638:	4620      	mov	r0, r4
1a00063a:	f000 f94d 	bl	1a0008d8 <Chip_ADC_Init>
   Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a00063e:	4a07      	ldr	r2, [pc, #28]	; (1a00065c <Board_ADC_Init+0x2c>)
1a000640:	4669      	mov	r1, sp
1a000642:	4620      	mov	r0, r4
1a000644:	f000 f968 	bl	1a000918 <Chip_ADC_SetSampleRate>
   Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a000648:	2200      	movs	r2, #0
1a00064a:	4669      	mov	r1, sp
1a00064c:	4620      	mov	r0, r4
1a00064e:	f000 f97c 	bl	1a00094a <Chip_ADC_SetResolution>
}
1a000652:	b002      	add	sp, #8
1a000654:	bd10      	pop	{r4, pc}
1a000656:	bf00      	nop
1a000658:	400e3000 	.word	0x400e3000
1a00065c:	00061a80 	.word	0x00061a80

1a000660 <Board_SPI_Init>:
{
1a000660:	b510      	push	{r4, lr}
   Chip_SSP_Init(LPC_SSP1);
1a000662:	4c0b      	ldr	r4, [pc, #44]	; (1a000690 <Board_SPI_Init+0x30>)
1a000664:	4620      	mov	r0, r4
1a000666:	f000 f8b7 	bl	1a0007d8 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a00066a:	6863      	ldr	r3, [r4, #4]
1a00066c:	f023 0304 	bic.w	r3, r3, #4
1a000670:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a000672:	6823      	ldr	r3, [r4, #0]
1a000674:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a000678:	f043 0307 	orr.w	r3, r3, #7
1a00067c:	6023      	str	r3, [r4, #0]
   Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a00067e:	4905      	ldr	r1, [pc, #20]	; (1a000694 <Board_SPI_Init+0x34>)
1a000680:	4620      	mov	r0, r4
1a000682:	f000 f88a 	bl	1a00079a <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a000686:	6863      	ldr	r3, [r4, #4]
1a000688:	f043 0302 	orr.w	r3, r3, #2
1a00068c:	6063      	str	r3, [r4, #4]
}
1a00068e:	bd10      	pop	{r4, pc}
1a000690:	400c5000 	.word	0x400c5000
1a000694:	000186a0 	.word	0x000186a0

1a000698 <Board_I2C_Init>:
{
1a000698:	b508      	push	{r3, lr}
   Chip_I2C_Init(I2C0);
1a00069a:	2000      	movs	r0, #0
1a00069c:	f000 f8c8 	bl	1a000830 <Chip_I2C_Init>
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a0006a0:	4b04      	ldr	r3, [pc, #16]	; (1a0006b4 <Board_I2C_Init+0x1c>)
1a0006a2:	f640 0208 	movw	r2, #2056	; 0x808
1a0006a6:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
   Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a0006aa:	4903      	ldr	r1, [pc, #12]	; (1a0006b8 <Board_I2C_Init+0x20>)
1a0006ac:	2000      	movs	r0, #0
1a0006ae:	f000 f8d1 	bl	1a000854 <Chip_I2C_SetClockRate>
}
1a0006b2:	bd08      	pop	{r3, pc}
1a0006b4:	40086000 	.word	0x40086000
1a0006b8:	000f4240 	.word	0x000f4240

1a0006bc <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a0006bc:	b510      	push	{r4, lr}
   Chip_UART_Init(DEBUG_UART);
1a0006be:	4c07      	ldr	r4, [pc, #28]	; (1a0006dc <Board_Debug_Init+0x20>)
1a0006c0:	4620      	mov	r0, r4
1a0006c2:	f000 fd4d 	bl	1a001160 <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a0006c6:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a0006ca:	4620      	mov	r0, r4
1a0006cc:	f000 fda6 	bl	1a00121c <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a0006d0:	2303      	movs	r3, #3
1a0006d2:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a0006d4:	2301      	movs	r3, #1
1a0006d6:	65e3      	str	r3, [r4, #92]	; 0x5c
   Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
   Chip_UART_TXEnable(DEBUG_UART);
}
1a0006d8:	bd10      	pop	{r4, pc}
1a0006da:	bf00      	nop
1a0006dc:	400c1000 	.word	0x400c1000

1a0006e0 <Board_UARTPutChar>:
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a0006e0:	4b03      	ldr	r3, [pc, #12]	; (1a0006f0 <Board_UARTPutChar+0x10>)
1a0006e2:	695b      	ldr	r3, [r3, #20]


void Board_UARTPutChar(char ch)
{
   while ( !(Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_THRE));
1a0006e4:	f013 0f20 	tst.w	r3, #32
1a0006e8:	d0fa      	beq.n	1a0006e0 <Board_UARTPutChar>
	pUART->THR = (uint32_t) data;
1a0006ea:	4b01      	ldr	r3, [pc, #4]	; (1a0006f0 <Board_UARTPutChar+0x10>)
1a0006ec:	6018      	str	r0, [r3, #0]
   Chip_UART_SendByte(DEBUG_UART, (uint8_t) ch);
}
1a0006ee:	4770      	bx	lr
1a0006f0:	400c1000 	.word	0x400c1000

1a0006f4 <Board_UARTGetChar>:
	return pUART->LSR;
1a0006f4:	4b05      	ldr	r3, [pc, #20]	; (1a00070c <Board_UARTGetChar+0x18>)
1a0006f6:	695b      	ldr	r3, [r3, #20]


int Board_UARTGetChar(void)
{
   if (Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_RDR) {
1a0006f8:	f013 0f01 	tst.w	r3, #1
1a0006fc:	d003      	beq.n	1a000706 <Board_UARTGetChar+0x12>
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a0006fe:	4b03      	ldr	r3, [pc, #12]	; (1a00070c <Board_UARTGetChar+0x18>)
1a000700:	6818      	ldr	r0, [r3, #0]
      return (int) Chip_UART_ReadByte(DEBUG_UART);
1a000702:	b2c0      	uxtb	r0, r0
1a000704:	4770      	bx	lr
   }
   return EOF;
1a000706:	f04f 30ff 	mov.w	r0, #4294967295
}
1a00070a:	4770      	bx	lr
1a00070c:	400c1000 	.word	0x400c1000

1a000710 <Board_Init>:
   Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a000710:	b508      	push	{r3, lr}
   DEBUGINIT();
1a000712:	f7ff ffd3 	bl	1a0006bc <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a000716:	4809      	ldr	r0, [pc, #36]	; (1a00073c <Board_Init+0x2c>)
1a000718:	f000 f8b8 	bl	1a00088c <Chip_GPIO_Init>

   Board_GPIO_Init();
1a00071c:	f7ff ff68 	bl	1a0005f0 <Board_GPIO_Init>
   Board_ADC_Init();
1a000720:	f7ff ff86 	bl	1a000630 <Board_ADC_Init>
   Board_SPI_Init();
1a000724:	f7ff ff9c 	bl	1a000660 <Board_SPI_Init>
   Board_I2C_Init();
1a000728:	f7ff ffb6 	bl	1a000698 <Board_I2C_Init>

   Board_LED_Init();
1a00072c:	f7ff ff1e 	bl	1a00056c <Board_LED_Init>
   Board_TEC_Init();
1a000730:	f7ff ff3e 	bl	1a0005b0 <Board_TEC_Init>
#ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
#endif

   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate(); // @Eric
1a000734:	f000 f9f0 	bl	1a000b18 <SystemCoreClockUpdate>
}
1a000738:	bd08      	pop	{r3, pc}
1a00073a:	bf00      	nop
1a00073c:	400f4000 	.word	0x400f4000

1a000740 <__stdio_putchar>:
   curADCChannel = 0xFF;
   return data;
}

void __stdio_putchar(int c)
{
1a000740:	b508      	push	{r3, lr}
   Board_UARTPutChar(c);
1a000742:	b2c0      	uxtb	r0, r0
1a000744:	f7ff ffcc 	bl	1a0006e0 <Board_UARTPutChar>
}
1a000748:	bd08      	pop	{r3, pc}

1a00074a <__stdio_getchar>:

int __stdio_getchar()
{
1a00074a:	b508      	push	{r3, lr}
   return Board_UARTGetChar();;
1a00074c:	f7ff ffd2 	bl	1a0006f4 <Board_UARTGetChar>
}
1a000750:	bd08      	pop	{r3, pc}

1a000752 <__stdio_init>:

void __stdio_init()
{
1a000752:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a000754:	f7ff ffb2 	bl	1a0006bc <Board_Debug_Init>
1a000758:	bd08      	pop	{r3, pc}
1a00075a:	Address 0x1a00075a is out of bounds.


1a00075c <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a00075c:	4b03      	ldr	r3, [pc, #12]	; (1a00076c <Chip_SSP_GetClockIndex+0x10>)
1a00075e:	4298      	cmp	r0, r3
1a000760:	d001      	beq.n	1a000766 <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a000762:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a000764:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a000766:	20a5      	movs	r0, #165	; 0xa5
1a000768:	4770      	bx	lr
1a00076a:	bf00      	nop
1a00076c:	400c5000 	.word	0x400c5000

1a000770 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a000770:	4b04      	ldr	r3, [pc, #16]	; (1a000784 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a000772:	4298      	cmp	r0, r3
1a000774:	d002      	beq.n	1a00077c <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a000776:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a00077a:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a00077c:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a000780:	4770      	bx	lr
1a000782:	bf00      	nop
1a000784:	400c5000 	.word	0x400c5000

1a000788 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a000788:	6803      	ldr	r3, [r0, #0]
1a00078a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a00078e:	0209      	lsls	r1, r1, #8
1a000790:	b289      	uxth	r1, r1
1a000792:	4319      	orrs	r1, r3
1a000794:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a000796:	6102      	str	r2, [r0, #16]
}
1a000798:	4770      	bx	lr

1a00079a <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a00079a:	b570      	push	{r4, r5, r6, lr}
1a00079c:	4606      	mov	r6, r0
1a00079e:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a0007a0:	f7ff ffe6 	bl	1a000770 <Chip_SSP_GetPeriphClockIndex>
1a0007a4:	f000 fc6e 	bl	1a001084 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a0007a8:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a0007aa:	f04f 33ff 	mov.w	r3, #4294967295
	cr0_div = 0;
1a0007ae:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a0007b0:	e000      	b.n	1a0007b4 <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a0007b2:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a0007b4:	42ab      	cmp	r3, r5
1a0007b6:	d90b      	bls.n	1a0007d0 <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a0007b8:	1c4c      	adds	r4, r1, #1
1a0007ba:	fb02 f304 	mul.w	r3, r2, r4
1a0007be:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a0007c2:	429d      	cmp	r5, r3
1a0007c4:	d2f6      	bcs.n	1a0007b4 <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a0007c6:	2cff      	cmp	r4, #255	; 0xff
1a0007c8:	d9f3      	bls.n	1a0007b2 <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a0007ca:	3202      	adds	r2, #2
				cr0_div = 0;
1a0007cc:	2100      	movs	r1, #0
1a0007ce:	e7f1      	b.n	1a0007b4 <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a0007d0:	4630      	mov	r0, r6
1a0007d2:	f7ff ffd9 	bl	1a000788 <Chip_SSP_SetClockRate>
}
1a0007d6:	bd70      	pop	{r4, r5, r6, pc}

1a0007d8 <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a0007d8:	b510      	push	{r4, lr}
1a0007da:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a0007dc:	f7ff ffbe 	bl	1a00075c <Chip_SSP_GetClockIndex>
1a0007e0:	f000 fc36 	bl	1a001050 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a0007e4:	4620      	mov	r0, r4
1a0007e6:	f7ff ffc3 	bl	1a000770 <Chip_SSP_GetPeriphClockIndex>
1a0007ea:	f000 fc31 	bl	1a001050 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a0007ee:	6863      	ldr	r3, [r4, #4]
1a0007f0:	f023 0304 	bic.w	r3, r3, #4
1a0007f4:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a0007f6:	6823      	ldr	r3, [r4, #0]
1a0007f8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a0007fc:	f043 0307 	orr.w	r3, r3, #7
1a000800:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a000802:	4902      	ldr	r1, [pc, #8]	; (1a00080c <Chip_SSP_Init+0x34>)
1a000804:	4620      	mov	r0, r4
1a000806:	f7ff ffc8 	bl	1a00079a <Chip_SSP_SetBitRate>
}
1a00080a:	bd10      	pop	{r4, pc}
1a00080c:	000186a0 	.word	0x000186a0

1a000810 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a000810:	2901      	cmp	r1, #1
1a000812:	d109      	bne.n	1a000828 <Chip_I2C_EventHandler+0x18>
		return;
	}

	stat = &iic->mXfer->status;
1a000814:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a000818:	0082      	lsls	r2, r0, #2
1a00081a:	4b04      	ldr	r3, [pc, #16]	; (1a00082c <Chip_I2C_EventHandler+0x1c>)
1a00081c:	4413      	add	r3, r2
1a00081e:	691a      	ldr	r2, [r3, #16]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a000820:	7d13      	ldrb	r3, [r2, #20]
1a000822:	b2db      	uxtb	r3, r3
1a000824:	2b04      	cmp	r3, #4
1a000826:	d0fb      	beq.n	1a000820 <Chip_I2C_EventHandler+0x10>
}
1a000828:	4770      	bx	lr
1a00082a:	bf00      	nop
1a00082c:	10000048 	.word	0x10000048

1a000830 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a000830:	b570      	push	{r4, r5, r6, lr}
1a000832:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a000834:	4e06      	ldr	r6, [pc, #24]	; (1a000850 <Chip_I2C_Init+0x20>)
1a000836:	00c4      	lsls	r4, r0, #3
1a000838:	1a22      	subs	r2, r4, r0
1a00083a:	0093      	lsls	r3, r2, #2
1a00083c:	4433      	add	r3, r6
1a00083e:	8898      	ldrh	r0, [r3, #4]
1a000840:	f000 fc06 	bl	1a001050 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a000844:	1b64      	subs	r4, r4, r5
1a000846:	00a3      	lsls	r3, r4, #2
1a000848:	58f3      	ldr	r3, [r6, r3]
1a00084a:	226c      	movs	r2, #108	; 0x6c
1a00084c:	619a      	str	r2, [r3, #24]
}
1a00084e:	bd70      	pop	{r4, r5, r6, pc}
1a000850:	10000048 	.word	0x10000048

1a000854 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a000854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000858:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a00085a:	4e0b      	ldr	r6, [pc, #44]	; (1a000888 <Chip_I2C_SetClockRate+0x34>)
1a00085c:	00c5      	lsls	r5, r0, #3
1a00085e:	1a2b      	subs	r3, r5, r0
1a000860:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a000864:	eb06 0308 	add.w	r3, r6, r8
1a000868:	8898      	ldrh	r0, [r3, #4]
1a00086a:	f000 fc0b 	bl	1a001084 <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a00086e:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a000872:	f856 3008 	ldr.w	r3, [r6, r8]
1a000876:	0842      	lsrs	r2, r0, #1
1a000878:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a00087a:	f856 3008 	ldr.w	r3, [r6, r8]
1a00087e:	691a      	ldr	r2, [r3, #16]
1a000880:	1a80      	subs	r0, r0, r2
1a000882:	6158      	str	r0, [r3, #20]
}
1a000884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a000888:	10000048 	.word	0x10000048

1a00088c <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a00088c:	4770      	bx	lr
1a00088e:	Address 0x1a00088e is out of bounds.


1a000890 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a000890:	4b03      	ldr	r3, [pc, #12]	; (1a0008a0 <Chip_ADC_GetClockIndex+0x10>)
1a000892:	4298      	cmp	r0, r3
1a000894:	d001      	beq.n	1a00089a <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a000896:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a000898:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a00089a:	2004      	movs	r0, #4
1a00089c:	4770      	bx	lr
1a00089e:	bf00      	nop
1a0008a0:	400e4000 	.word	0x400e4000

1a0008a4 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a0008a4:	b570      	push	{r4, r5, r6, lr}
1a0008a6:	460d      	mov	r5, r1
1a0008a8:	4614      	mov	r4, r2
1a0008aa:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a0008ac:	f7ff fff0 	bl	1a000890 <Chip_ADC_GetClockIndex>
1a0008b0:	f000 fbe8 	bl	1a001084 <Chip_Clock_GetRate>
	if (burstMode) {
1a0008b4:	b155      	cbz	r5, 1a0008cc <getClkDiv+0x28>
		fullAdcRate = adcRate * clks;
1a0008b6:	fb04 f406 	mul.w	r4, r4, r6
	else {
		fullAdcRate = adcRate * getFullConvClk();
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a0008ba:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a0008be:	0064      	lsls	r4, r4, #1
1a0008c0:	fbb0 f0f4 	udiv	r0, r0, r4
1a0008c4:	b2c0      	uxtb	r0, r0
1a0008c6:	3801      	subs	r0, #1
	return div;
}
1a0008c8:	b2c0      	uxtb	r0, r0
1a0008ca:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * getFullConvClk();
1a0008cc:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a0008d0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
1a0008d4:	e7f1      	b.n	1a0008ba <getClkDiv+0x16>
1a0008d6:	Address 0x1a0008d6 is out of bounds.


1a0008d8 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a0008d8:	b538      	push	{r3, r4, r5, lr}
1a0008da:	4605      	mov	r5, r0
1a0008dc:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a0008de:	f7ff ffd7 	bl	1a000890 <Chip_ADC_GetClockIndex>
1a0008e2:	2301      	movs	r3, #1
1a0008e4:	461a      	mov	r2, r3
1a0008e6:	4619      	mov	r1, r3
1a0008e8:	f000 fb94 	bl	1a001014 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a0008ec:	2100      	movs	r1, #0
1a0008ee:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a0008f0:	4a08      	ldr	r2, [pc, #32]	; (1a000914 <Chip_ADC_Init+0x3c>)
1a0008f2:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a0008f4:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a0008f6:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a0008f8:	230b      	movs	r3, #11
1a0008fa:	4628      	mov	r0, r5
1a0008fc:	f7ff ffd2 	bl	1a0008a4 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a000900:	0200      	lsls	r0, r0, #8
1a000902:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a000906:	7920      	ldrb	r0, [r4, #4]
1a000908:	0440      	lsls	r0, r0, #17
1a00090a:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a00090e:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a000910:	6028      	str	r0, [r5, #0]
}
1a000912:	bd38      	pop	{r3, r4, r5, pc}
1a000914:	00061a80 	.word	0x00061a80

1a000918 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a000918:	b570      	push	{r4, r5, r6, lr}
1a00091a:	4605      	mov	r5, r0
1a00091c:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a00091e:	6804      	ldr	r4, [r0, #0]
1a000920:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a000924:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a000928:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a00092a:	790b      	ldrb	r3, [r1, #4]
1a00092c:	f1c3 030b 	rsb	r3, r3, #11
1a000930:	b2db      	uxtb	r3, r3
1a000932:	7949      	ldrb	r1, [r1, #5]
1a000934:	f7ff ffb6 	bl	1a0008a4 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a000938:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a00093c:	7933      	ldrb	r3, [r6, #4]
1a00093e:	045b      	lsls	r3, r3, #17
1a000940:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
1a000944:	4303      	orrs	r3, r0
	pADC->CR = cr;
1a000946:	602b      	str	r3, [r5, #0]
}
1a000948:	bd70      	pop	{r4, r5, r6, pc}

1a00094a <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a00094a:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a00094c:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a00094e:	680a      	ldr	r2, [r1, #0]
1a000950:	f7ff ffe2 	bl	1a000918 <Chip_ADC_SetSampleRate>
}
1a000954:	bd08      	pop	{r3, pc}
1a000956:	Address 0x1a000956 is out of bounds.


1a000958 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a000958:	b570      	push	{r4, r5, r6, lr}
1a00095a:	b08a      	sub	sp, #40	; 0x28
1a00095c:	4605      	mov	r5, r0
1a00095e:	460e      	mov	r6, r1
1a000960:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 50000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a000962:	f24c 3350 	movw	r3, #50000	; 0xc350
1a000966:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a000968:	2806      	cmp	r0, #6
1a00096a:	d018      	beq.n	1a00099e <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a00096c:	2300      	movs	r3, #0
1a00096e:	2201      	movs	r2, #1
1a000970:	4629      	mov	r1, r5
1a000972:	2004      	movs	r0, #4
1a000974:	f000 fafc 	bl	1a000f70 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a000978:	4a4a      	ldr	r2, [pc, #296]	; (1a000aa4 <Chip_SetupCoreClock+0x14c>)
1a00097a:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a00097c:	f043 0301 	orr.w	r3, r3, #1
1a000980:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a000982:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a000986:	a901      	add	r1, sp, #4
1a000988:	4630      	mov	r0, r6
1a00098a:	f000 fa69 	bl	1a000e60 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a00098e:	4b46      	ldr	r3, [pc, #280]	; (1a000aa8 <Chip_SetupCoreClock+0x150>)
1a000990:	429e      	cmp	r6, r3
1a000992:	d916      	bls.n	1a0009c2 <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a000994:	9b01      	ldr	r3, [sp, #4]
1a000996:	f013 0f40 	tst.w	r3, #64	; 0x40
1a00099a:	d003      	beq.n	1a0009a4 <Chip_SetupCoreClock+0x4c>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
1a00099c:	e7fe      	b.n	1a00099c <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a00099e:	f000 f9c1 	bl	1a000d24 <Chip_Clock_EnableCrystal>
1a0009a2:	e7e3      	b.n	1a00096c <Chip_SetupCoreClock+0x14>
		} else if (ppll.ctrl & (1 << 7)){
1a0009a4:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0009a8:	d005      	beq.n	1a0009b6 <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a0009aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0009ae:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a0009b0:	2500      	movs	r5, #0
			direct = 1;
1a0009b2:	2601      	movs	r6, #1
1a0009b4:	e007      	b.n	1a0009c6 <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a0009b6:	9b04      	ldr	r3, [sp, #16]
1a0009b8:	3301      	adds	r3, #1
1a0009ba:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a0009bc:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a0009be:	2600      	movs	r6, #0
1a0009c0:	e001      	b.n	1a0009c6 <Chip_SetupCoreClock+0x6e>
1a0009c2:	2500      	movs	r5, #0
1a0009c4:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a0009c6:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a0009ca:	9b01      	ldr	r3, [sp, #4]
1a0009cc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a0009d0:	9a05      	ldr	r2, [sp, #20]
1a0009d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0009d6:	9a03      	ldr	r2, [sp, #12]
1a0009d8:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a0009dc:	9a04      	ldr	r2, [sp, #16]
1a0009de:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0009e2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0009e6:	4a2f      	ldr	r2, [pc, #188]	; (1a000aa4 <Chip_SetupCoreClock+0x14c>)
1a0009e8:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a0009ea:	4b2e      	ldr	r3, [pc, #184]	; (1a000aa4 <Chip_SetupCoreClock+0x14c>)
1a0009ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a0009ee:	f013 0f01 	tst.w	r3, #1
1a0009f2:	d0fa      	beq.n	1a0009ea <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a0009f4:	2300      	movs	r3, #0
1a0009f6:	2201      	movs	r2, #1
1a0009f8:	2109      	movs	r1, #9
1a0009fa:	2004      	movs	r0, #4
1a0009fc:	f000 fab8 	bl	1a000f70 <Chip_Clock_SetBaseClock>

	if (direct) {
1a000a00:	b306      	cbz	r6, 1a000a44 <Chip_SetupCoreClock+0xec>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a000a02:	f24c 3350 	movw	r3, #50000	; 0xc350
1a000a06:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a000a08:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a000a0a:	1e5a      	subs	r2, r3, #1
1a000a0c:	9209      	str	r2, [sp, #36]	; 0x24
1a000a0e:	2b00      	cmp	r3, #0
1a000a10:	d1fa      	bne.n	1a000a08 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a000a12:	9b01      	ldr	r3, [sp, #4]
1a000a14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a000a18:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a000a1a:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a000a1e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a000a22:	9a05      	ldr	r2, [sp, #20]
1a000a24:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a000a28:	9a03      	ldr	r2, [sp, #12]
1a000a2a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a000a2e:	9a04      	ldr	r2, [sp, #16]
1a000a30:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a000a34:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a000a38:	4a1a      	ldr	r2, [pc, #104]	; (1a000aa4 <Chip_SetupCoreClock+0x14c>)
1a000a3a:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a000a3c:	2c00      	cmp	r4, #0
1a000a3e:	d12e      	bne.n	1a000a9e <Chip_SetupCoreClock+0x146>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a000a40:	b00a      	add	sp, #40	; 0x28
1a000a42:	bd70      	pop	{r4, r5, r6, pc}
	} else if (pdivide) {
1a000a44:	2d00      	cmp	r5, #0
1a000a46:	d0f9      	beq.n	1a000a3c <Chip_SetupCoreClock+0xe4>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a000a48:	f24c 3350 	movw	r3, #50000	; 0xc350
1a000a4c:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a000a4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a000a50:	1e5a      	subs	r2, r3, #1
1a000a52:	9209      	str	r2, [sp, #36]	; 0x24
1a000a54:	2b00      	cmp	r3, #0
1a000a56:	d1fa      	bne.n	1a000a4e <Chip_SetupCoreClock+0xf6>
		ppll.psel--;
1a000a58:	9b04      	ldr	r3, [sp, #16]
1a000a5a:	1e5a      	subs	r2, r3, #1
1a000a5c:	9204      	str	r2, [sp, #16]
1a000a5e:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a000a62:	9b01      	ldr	r3, [sp, #4]
1a000a64:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a000a68:	9905      	ldr	r1, [sp, #20]
1a000a6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a000a6e:	9903      	ldr	r1, [sp, #12]
1a000a70:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a000a74:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a000a78:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a000a7c:	4a09      	ldr	r2, [pc, #36]	; (1a000aa4 <Chip_SetupCoreClock+0x14c>)
1a000a7e:	6453      	str	r3, [r2, #68]	; 0x44
1a000a80:	e7dc      	b.n	1a000a3c <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a000a82:	480a      	ldr	r0, [pc, #40]	; (1a000aac <Chip_SetupCoreClock+0x154>)
1a000a84:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a000a88:	78cb      	ldrb	r3, [r1, #3]
1a000a8a:	788a      	ldrb	r2, [r1, #2]
1a000a8c:	7849      	ldrb	r1, [r1, #1]
1a000a8e:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a000a92:	f000 fa6d 	bl	1a000f70 <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a000a96:	3401      	adds	r4, #1
1a000a98:	2c11      	cmp	r4, #17
1a000a9a:	d9f2      	bls.n	1a000a82 <Chip_SetupCoreClock+0x12a>
1a000a9c:	e7d0      	b.n	1a000a40 <Chip_SetupCoreClock+0xe8>
1a000a9e:	2400      	movs	r4, #0
1a000aa0:	e7fa      	b.n	1a000a98 <Chip_SetupCoreClock+0x140>
1a000aa2:	bf00      	nop
1a000aa4:	40050000 	.word	0x40050000
1a000aa8:	068e7780 	.word	0x068e7780
1a000aac:	1a002b2c 	.word	0x1a002b2c

1a000ab0 <Chip_USB_PllSetup>:
/*****************************************************************************
 * Private functions
 ****************************************************************************/

static void Chip_USB_PllSetup(void)
{
1a000ab0:	b508      	push	{r3, lr}
	/* No need to setup anything if PLL is already setup for the frequency */
	if (Chip_Clock_GetClockInputHz(CLKIN_USBPLL) == usbPLLSetup.freq)
1a000ab2:	2007      	movs	r0, #7
1a000ab4:	f000 f978 	bl	1a000da8 <Chip_Clock_GetClockInputHz>
1a000ab8:	4b08      	ldr	r3, [pc, #32]	; (1a000adc <Chip_USB_PllSetup+0x2c>)
1a000aba:	4298      	cmp	r0, r3
1a000abc:	d00d      	beq.n	1a000ada <Chip_USB_PllSetup+0x2a>
		return ;

	/* Setup default USB PLL state for a 480MHz output and attach */
	Chip_Clock_SetupPLL(CLKIN_CRYSTAL, CGU_USB_PLL, &usbPLLSetup);
1a000abe:	4a08      	ldr	r2, [pc, #32]	; (1a000ae0 <Chip_USB_PllSetup+0x30>)
1a000ac0:	2100      	movs	r1, #0
1a000ac2:	2006      	movs	r0, #6
1a000ac4:	f000 fb04 	bl	1a0010d0 <Chip_Clock_SetupPLL>

	/* enable USB PLL */
	Chip_Clock_EnablePLL(CGU_USB_PLL);
1a000ac8:	2000      	movs	r0, #0
1a000aca:	f000 fb21 	bl	1a001110 <Chip_Clock_EnablePLL>

	/* Wait for PLL lock */
	while (!(Chip_Clock_GetPLLStatus(CGU_USB_PLL) & CGU_PLL_LOCKED)) {}
1a000ace:	2000      	movs	r0, #0
1a000ad0:	f000 fb28 	bl	1a001124 <Chip_Clock_GetPLLStatus>
1a000ad4:	f010 0f01 	tst.w	r0, #1
1a000ad8:	d0f9      	beq.n	1a000ace <Chip_USB_PllSetup+0x1e>
}
1a000ada:	bd08      	pop	{r3, pc}
1a000adc:	1c9c3800 	.word	0x1c9c3800
1a000ae0:	1a002b74 	.word	0x1a002b74

1a000ae4 <Chip_USB0_Init>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/

void Chip_USB0_Init(void)
{
1a000ae4:	b508      	push	{r3, lr}
	/* Set up USB PLL */
	Chip_USB_PllSetup();
1a000ae6:	f7ff ffe3 	bl	1a000ab0 <Chip_USB_PllSetup>

	/* Setup USB0 base clock as clock out from USB PLL */
	Chip_Clock_SetBaseClock( CLK_BASE_USB0, CLKIN_USBPLL, true, true);
1a000aea:	2301      	movs	r3, #1
1a000aec:	461a      	mov	r2, r3
1a000aee:	2107      	movs	r1, #7
1a000af0:	4618      	mov	r0, r3
1a000af2:	f000 fa3d 	bl	1a000f70 <Chip_Clock_SetBaseClock>

	/* enable USB main clock */
	Chip_Clock_EnableBaseClock(CLK_BASE_USB0);
1a000af6:	2001      	movs	r0, #1
1a000af8:	f000 fa66 	bl	1a000fc8 <Chip_Clock_EnableBaseClock>
	Chip_Clock_EnableOpts(CLK_MX_USB0, true, true, 1);
1a000afc:	2301      	movs	r3, #1
1a000afe:	461a      	mov	r2, r3
1a000b00:	4619      	mov	r1, r3
1a000b02:	2065      	movs	r0, #101	; 0x65
1a000b04:	f000 fa86 	bl	1a001014 <Chip_Clock_EnableOpts>
 * @note	The USB0 PLL & clock should be configured before calling this function. This function
 * should be called before the USB0 registers are accessed.
 */
STATIC INLINE void Chip_CREG_EnableUSB0Phy(void)
{
	LPC_CREG->CREG0 &= ~(1 << 5);
1a000b08:	4a02      	ldr	r2, [pc, #8]	; (1a000b14 <Chip_USB0_Init+0x30>)
1a000b0a:	6853      	ldr	r3, [r2, #4]
1a000b0c:	f023 0320 	bic.w	r3, r3, #32
1a000b10:	6053      	str	r3, [r2, #4]
	/* enable USB0 phy */
	Chip_CREG_EnableUSB0Phy();
}
1a000b12:	bd08      	pop	{r3, pc}
1a000b14:	40043000 	.word	0x40043000

1a000b18 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a000b18:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a000b1a:	2069      	movs	r0, #105	; 0x69
1a000b1c:	f000 fab2 	bl	1a001084 <Chip_Clock_GetRate>
1a000b20:	4b01      	ldr	r3, [pc, #4]	; (1a000b28 <SystemCoreClockUpdate+0x10>)
1a000b22:	6018      	str	r0, [r3, #0]
}
1a000b24:	bd08      	pop	{r3, pc}
1a000b26:	bf00      	nop
1a000b28:	10000158 	.word	0x10000158

1a000b2c <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a000b2c:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a000b2e:	680b      	ldr	r3, [r1, #0]
1a000b30:	f013 0f80 	tst.w	r3, #128	; 0x80
1a000b34:	d002      	beq.n	1a000b3c <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a000b36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a000b3a:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a000b3c:	4607      	mov	r7, r0
1a000b3e:	2501      	movs	r5, #1
1a000b40:	e03a      	b.n	1a000bb8 <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a000b42:	694b      	ldr	r3, [r1, #20]
1a000b44:	fb03 f302 	mul.w	r3, r3, r2
1a000b48:	fbb3 f3f5 	udiv	r3, r3, r5
1a000b4c:	e01c      	b.n	1a000b88 <pll_calc_divs+0x5c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a000b4e:	461c      	mov	r4, r3
	if (val < 0)
1a000b50:	ebb0 0c04 	subs.w	ip, r0, r4
1a000b54:	d427      	bmi.n	1a000ba6 <pll_calc_divs+0x7a>
				} else {
					fout = fcco >> (p + 1);
				}

				if (ABS(freq - fout) < prev) {
1a000b56:	4567      	cmp	r7, ip
1a000b58:	d906      	bls.n	1a000b68 <pll_calc_divs+0x3c>
					ppll->nsel = n;
1a000b5a:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a000b5c:	1c77      	adds	r7, r6, #1
1a000b5e:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a000b60:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a000b62:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a000b64:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a000b66:	4667      	mov	r7, ip
			for (m = 1; m <= 256; m++) {
1a000b68:	3201      	adds	r2, #1
1a000b6a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a000b6e:	dc1d      	bgt.n	1a000bac <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 6)) {
1a000b70:	680c      	ldr	r4, [r1, #0]
1a000b72:	f014 0f40 	tst.w	r4, #64	; 0x40
1a000b76:	d0e4      	beq.n	1a000b42 <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a000b78:	1c73      	adds	r3, r6, #1
1a000b7a:	fa02 fc03 	lsl.w	ip, r2, r3
1a000b7e:	694b      	ldr	r3, [r1, #20]
1a000b80:	fb03 f30c 	mul.w	r3, r3, ip
1a000b84:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a000b88:	f8df c038 	ldr.w	ip, [pc, #56]	; 1a000bc4 <pll_calc_divs+0x98>
1a000b8c:	4563      	cmp	r3, ip
1a000b8e:	d9eb      	bls.n	1a000b68 <pll_calc_divs+0x3c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a000b90:	f8df c034 	ldr.w	ip, [pc, #52]	; 1a000bc8 <pll_calc_divs+0x9c>
1a000b94:	4563      	cmp	r3, ip
1a000b96:	d809      	bhi.n	1a000bac <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 7)) {
1a000b98:	f014 0f80 	tst.w	r4, #128	; 0x80
1a000b9c:	d1d7      	bne.n	1a000b4e <pll_calc_divs+0x22>
					fout = fcco >> (p + 1);
1a000b9e:	1c74      	adds	r4, r6, #1
1a000ba0:	fa23 f404 	lsr.w	r4, r3, r4
1a000ba4:	e7d4      	b.n	1a000b50 <pll_calc_divs+0x24>
		return -val;
1a000ba6:	f1cc 0c00 	rsb	ip, ip, #0
1a000baa:	e7d4      	b.n	1a000b56 <pll_calc_divs+0x2a>
		for (p = 0; p < 4; p ++) {
1a000bac:	3601      	adds	r6, #1
1a000bae:	2e03      	cmp	r6, #3
1a000bb0:	dc01      	bgt.n	1a000bb6 <pll_calc_divs+0x8a>
			for (m = 1; m <= 256; m++) {
1a000bb2:	2201      	movs	r2, #1
1a000bb4:	e7d9      	b.n	1a000b6a <pll_calc_divs+0x3e>
	for (n = 1; n <= 4; n++) {
1a000bb6:	3501      	adds	r5, #1
1a000bb8:	2d04      	cmp	r5, #4
1a000bba:	dc01      	bgt.n	1a000bc0 <pll_calc_divs+0x94>
		for (p = 0; p < 4; p ++) {
1a000bbc:	2600      	movs	r6, #0
1a000bbe:	e7f6      	b.n	1a000bae <pll_calc_divs+0x82>
				}
			}
		}
	}
}
1a000bc0:	bcf0      	pop	{r4, r5, r6, r7}
1a000bc2:	4770      	bx	lr
1a000bc4:	094c5eff 	.word	0x094c5eff
1a000bc8:	1312d000 	.word	0x1312d000

1a000bcc <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a000bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000bce:	b099      	sub	sp, #100	; 0x64
1a000bd0:	4605      	mov	r5, r0
1a000bd2:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a000bd4:	225c      	movs	r2, #92	; 0x5c
1a000bd6:	2100      	movs	r1, #0
1a000bd8:	a801      	add	r0, sp, #4
1a000bda:	f001 fc44 	bl	1a002466 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a000bde:	2380      	movs	r3, #128	; 0x80
1a000be0:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a000be2:	6963      	ldr	r3, [r4, #20]
1a000be4:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a000be6:	7923      	ldrb	r3, [r4, #4]
1a000be8:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a000bec:	4669      	mov	r1, sp
1a000bee:	4628      	mov	r0, r5
1a000bf0:	f7ff ff9c 	bl	1a000b2c <pll_calc_divs>
	if (pll[0].fout == freq) {
1a000bf4:	9b06      	ldr	r3, [sp, #24]
1a000bf6:	42ab      	cmp	r3, r5
1a000bf8:	d027      	beq.n	1a000c4a <pll_get_frac+0x7e>
	if (val < 0)
1a000bfa:	1aeb      	subs	r3, r5, r3
1a000bfc:	d42e      	bmi.n	1a000c5c <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a000bfe:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a000c00:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a000c02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a000c06:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a000c08:	6963      	ldr	r3, [r4, #20]
1a000c0a:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a000c0c:	7923      	ldrb	r3, [r4, #4]
1a000c0e:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a000c12:	a910      	add	r1, sp, #64	; 0x40
1a000c14:	4628      	mov	r0, r5
1a000c16:	f7ff ff89 	bl	1a000b2c <pll_calc_divs>
	if (pll[2].fout == freq) {
1a000c1a:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a000c1c:	42ab      	cmp	r3, r5
1a000c1e:	d01f      	beq.n	1a000c60 <pll_get_frac+0x94>
	if (val < 0)
1a000c20:	1aeb      	subs	r3, r5, r3
1a000c22:	d425      	bmi.n	1a000c70 <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a000c24:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a000c26:	4b2b      	ldr	r3, [pc, #172]	; (1a000cd4 <pll_get_frac+0x108>)
1a000c28:	429d      	cmp	r5, r3
1a000c2a:	d923      	bls.n	1a000c74 <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a000c2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a000c2e:	1aed      	subs	r5, r5, r3
1a000c30:	d433      	bmi.n	1a000c9a <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a000c32:	42ae      	cmp	r6, r5
1a000c34:	dc3b      	bgt.n	1a000cae <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a000c36:	42be      	cmp	r6, r7
1a000c38:	dc31      	bgt.n	1a000c9e <pll_get_frac+0xd2>
			*ppll = pll[0];
1a000c3a:	466d      	mov	r5, sp
1a000c3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000c3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000c40:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000c44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000c48:	e006      	b.n	1a000c58 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a000c4a:	466d      	mov	r5, sp
1a000c4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000c4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000c50:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000c54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a000c58:	b019      	add	sp, #100	; 0x64
1a000c5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a000c5c:	425b      	negs	r3, r3
1a000c5e:	e7ce      	b.n	1a000bfe <pll_get_frac+0x32>
		*ppll = pll[2];
1a000c60:	ad10      	add	r5, sp, #64	; 0x40
1a000c62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000c64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000c66:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000c6a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a000c6e:	e7f3      	b.n	1a000c58 <pll_get_frac+0x8c>
		return -val;
1a000c70:	425b      	negs	r3, r3
1a000c72:	e7d7      	b.n	1a000c24 <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a000c74:	2340      	movs	r3, #64	; 0x40
1a000c76:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a000c78:	6963      	ldr	r3, [r4, #20]
1a000c7a:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a000c7c:	a908      	add	r1, sp, #32
1a000c7e:	4628      	mov	r0, r5
1a000c80:	f7ff ff54 	bl	1a000b2c <pll_calc_divs>
		if (pll[1].fout == freq) {
1a000c84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a000c86:	42ab      	cmp	r3, r5
1a000c88:	d1d0      	bne.n	1a000c2c <pll_get_frac+0x60>
			*ppll = pll[1];
1a000c8a:	ad08      	add	r5, sp, #32
1a000c8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000c8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000c90:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000c94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a000c98:	e7de      	b.n	1a000c58 <pll_get_frac+0x8c>
		return -val;
1a000c9a:	426d      	negs	r5, r5
1a000c9c:	e7c9      	b.n	1a000c32 <pll_get_frac+0x66>
			*ppll = pll[2];
1a000c9e:	ad10      	add	r5, sp, #64	; 0x40
1a000ca0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000ca2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000ca4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000ca8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000cac:	e7d4      	b.n	1a000c58 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a000cae:	42af      	cmp	r7, r5
1a000cb0:	db07      	blt.n	1a000cc2 <pll_get_frac+0xf6>
			*ppll = pll[1];
1a000cb2:	ad08      	add	r5, sp, #32
1a000cb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000cb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000cb8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000cbc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000cc0:	e7ca      	b.n	1a000c58 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a000cc2:	ad10      	add	r5, sp, #64	; 0x40
1a000cc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000cc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000cc8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000ccc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000cd0:	e7c2      	b.n	1a000c58 <pll_get_frac+0x8c>
1a000cd2:	bf00      	nop
1a000cd4:	068e7780 	.word	0x068e7780

1a000cd8 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a000cd8:	b430      	push	{r4, r5}
1a000cda:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a000cdc:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a000cde:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a000ce0:	e000      	b.n	1a000ce4 <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a000ce2:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a000ce4:	281c      	cmp	r0, #28
1a000ce6:	d118      	bne.n	1a000d1a <Chip_Clock_FindBaseClock+0x42>
1a000ce8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a000cec:	0051      	lsls	r1, r2, #1
1a000cee:	4a0c      	ldr	r2, [pc, #48]	; (1a000d20 <Chip_Clock_FindBaseClock+0x48>)
1a000cf0:	440a      	add	r2, r1
1a000cf2:	7914      	ldrb	r4, [r2, #4]
1a000cf4:	4284      	cmp	r4, r0
1a000cf6:	d010      	beq.n	1a000d1a <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a000cf8:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a000cfc:	004a      	lsls	r2, r1, #1
1a000cfe:	4908      	ldr	r1, [pc, #32]	; (1a000d20 <Chip_Clock_FindBaseClock+0x48>)
1a000d00:	5a8a      	ldrh	r2, [r1, r2]
1a000d02:	42aa      	cmp	r2, r5
1a000d04:	d8ed      	bhi.n	1a000ce2 <Chip_Clock_FindBaseClock+0xa>
1a000d06:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a000d0a:	0051      	lsls	r1, r2, #1
1a000d0c:	4a04      	ldr	r2, [pc, #16]	; (1a000d20 <Chip_Clock_FindBaseClock+0x48>)
1a000d0e:	440a      	add	r2, r1
1a000d10:	8852      	ldrh	r2, [r2, #2]
1a000d12:	42aa      	cmp	r2, r5
1a000d14:	d3e5      	bcc.n	1a000ce2 <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a000d16:	4620      	mov	r0, r4
1a000d18:	e7e4      	b.n	1a000ce4 <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a000d1a:	bc30      	pop	{r4, r5}
1a000d1c:	4770      	bx	lr
1a000d1e:	bf00      	nop
1a000d20:	1a002b94 	.word	0x1a002b94

1a000d24 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a000d24:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a000d26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a000d2a:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a000d2c:	4a0d      	ldr	r2, [pc, #52]	; (1a000d64 <Chip_Clock_EnableCrystal+0x40>)
1a000d2e:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a000d30:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a000d34:	6992      	ldr	r2, [r2, #24]
1a000d36:	428a      	cmp	r2, r1
1a000d38:	d001      	beq.n	1a000d3e <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a000d3a:	4a0a      	ldr	r2, [pc, #40]	; (1a000d64 <Chip_Clock_EnableCrystal+0x40>)
1a000d3c:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a000d3e:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a000d42:	4a09      	ldr	r2, [pc, #36]	; (1a000d68 <Chip_Clock_EnableCrystal+0x44>)
1a000d44:	6811      	ldr	r1, [r2, #0]
1a000d46:	4a09      	ldr	r2, [pc, #36]	; (1a000d6c <Chip_Clock_EnableCrystal+0x48>)
1a000d48:	4291      	cmp	r1, r2
1a000d4a:	d901      	bls.n	1a000d50 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a000d4c:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a000d50:	4a04      	ldr	r2, [pc, #16]	; (1a000d64 <Chip_Clock_EnableCrystal+0x40>)
1a000d52:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a000d54:	9b01      	ldr	r3, [sp, #4]
1a000d56:	1e5a      	subs	r2, r3, #1
1a000d58:	9201      	str	r2, [sp, #4]
1a000d5a:	2b00      	cmp	r3, #0
1a000d5c:	d1fa      	bne.n	1a000d54 <Chip_Clock_EnableCrystal+0x30>
}
1a000d5e:	b002      	add	sp, #8
1a000d60:	4770      	bx	lr
1a000d62:	bf00      	nop
1a000d64:	40050000 	.word	0x40050000
1a000d68:	1a002b28 	.word	0x1a002b28
1a000d6c:	01312cff 	.word	0x01312cff

1a000d70 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a000d70:	3012      	adds	r0, #18
1a000d72:	4b05      	ldr	r3, [pc, #20]	; (1a000d88 <Chip_Clock_GetDividerSource+0x18>)
1a000d74:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a000d78:	f010 0f01 	tst.w	r0, #1
1a000d7c:	d102      	bne.n	1a000d84 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a000d7e:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a000d82:	4770      	bx	lr
		return CLKINPUT_PD;
1a000d84:	2011      	movs	r0, #17
}
1a000d86:	4770      	bx	lr
1a000d88:	40050000 	.word	0x40050000

1a000d8c <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a000d8c:	f100 0212 	add.w	r2, r0, #18
1a000d90:	4b03      	ldr	r3, [pc, #12]	; (1a000da0 <Chip_Clock_GetDividerDivisor+0x14>)
1a000d92:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a000d96:	4b03      	ldr	r3, [pc, #12]	; (1a000da4 <Chip_Clock_GetDividerDivisor+0x18>)
1a000d98:	5c18      	ldrb	r0, [r3, r0]
}
1a000d9a:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a000d9e:	4770      	bx	lr
1a000da0:	40050000 	.word	0x40050000
1a000da4:	1a002b8c 	.word	0x1a002b8c

1a000da8 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a000da8:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a000daa:	2810      	cmp	r0, #16
1a000dac:	d80a      	bhi.n	1a000dc4 <Chip_Clock_GetClockInputHz+0x1c>
1a000dae:	e8df f000 	tbb	[pc, r0]
1a000db2:	0b44      	.short	0x0b44
1a000db4:	0921180d 	.word	0x0921180d
1a000db8:	2d2a2724 	.word	0x2d2a2724
1a000dbc:	34300909 	.word	0x34300909
1a000dc0:	3c38      	.short	0x3c38
1a000dc2:	40          	.byte	0x40
1a000dc3:	00          	.byte	0x00
	uint32_t rate = 0;
1a000dc4:	2000      	movs	r0, #0
1a000dc6:	e03a      	b.n	1a000e3e <Chip_Clock_GetClockInputHz+0x96>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a000dc8:	481e      	ldr	r0, [pc, #120]	; (1a000e44 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a000dca:	e038      	b.n	1a000e3e <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a000dcc:	4b1e      	ldr	r3, [pc, #120]	; (1a000e48 <Chip_Clock_GetClockInputHz+0xa0>)
1a000dce:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a000dd2:	f003 0307 	and.w	r3, r3, #7
1a000dd6:	2b04      	cmp	r3, #4
1a000dd8:	d001      	beq.n	1a000dde <Chip_Clock_GetClockInputHz+0x36>
			/* MII mode requires 25MHz clock */
			rate = 25000000;
1a000dda:	481c      	ldr	r0, [pc, #112]	; (1a000e4c <Chip_Clock_GetClockInputHz+0xa4>)
1a000ddc:	e02f      	b.n	1a000e3e <Chip_Clock_GetClockInputHz+0x96>
	uint32_t rate = 0;
1a000dde:	2000      	movs	r0, #0
1a000de0:	e02d      	b.n	1a000e3e <Chip_Clock_GetClockInputHz+0x96>
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a000de2:	4b19      	ldr	r3, [pc, #100]	; (1a000e48 <Chip_Clock_GetClockInputHz+0xa0>)
1a000de4:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a000de8:	f003 0307 	and.w	r3, r3, #7
1a000dec:	2b04      	cmp	r3, #4
1a000dee:	d027      	beq.n	1a000e40 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a000df0:	4816      	ldr	r0, [pc, #88]	; (1a000e4c <Chip_Clock_GetClockInputHz+0xa4>)
1a000df2:	e024      	b.n	1a000e3e <Chip_Clock_GetClockInputHz+0x96>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a000df4:	4b16      	ldr	r3, [pc, #88]	; (1a000e50 <Chip_Clock_GetClockInputHz+0xa8>)
1a000df6:	6818      	ldr	r0, [r3, #0]
		break;
1a000df8:	e021      	b.n	1a000e3e <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a000dfa:	4b16      	ldr	r3, [pc, #88]	; (1a000e54 <Chip_Clock_GetClockInputHz+0xac>)
1a000dfc:	6818      	ldr	r0, [r3, #0]
		break;
1a000dfe:	e01e      	b.n	1a000e3e <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a000e00:	4b15      	ldr	r3, [pc, #84]	; (1a000e58 <Chip_Clock_GetClockInputHz+0xb0>)
1a000e02:	6818      	ldr	r0, [r3, #0]
		break;
1a000e04:	e01b      	b.n	1a000e3e <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a000e06:	4b14      	ldr	r3, [pc, #80]	; (1a000e58 <Chip_Clock_GetClockInputHz+0xb0>)
1a000e08:	6858      	ldr	r0, [r3, #4]
		break;
1a000e0a:	e018      	b.n	1a000e3e <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a000e0c:	f000 f868 	bl	1a000ee0 <Chip_Clock_GetMainPLLHz>
		break;
1a000e10:	e015      	b.n	1a000e3e <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a000e12:	2100      	movs	r1, #0
1a000e14:	f000 f89a 	bl	1a000f4c <Chip_Clock_GetDivRate>
		break;
1a000e18:	e011      	b.n	1a000e3e <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a000e1a:	2101      	movs	r1, #1
1a000e1c:	f000 f896 	bl	1a000f4c <Chip_Clock_GetDivRate>
		break;
1a000e20:	e00d      	b.n	1a000e3e <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a000e22:	2102      	movs	r1, #2
1a000e24:	f000 f892 	bl	1a000f4c <Chip_Clock_GetDivRate>
		break;
1a000e28:	e009      	b.n	1a000e3e <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a000e2a:	2103      	movs	r1, #3
1a000e2c:	f000 f88e 	bl	1a000f4c <Chip_Clock_GetDivRate>
		break;
1a000e30:	e005      	b.n	1a000e3e <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a000e32:	2104      	movs	r1, #4
1a000e34:	f000 f88a 	bl	1a000f4c <Chip_Clock_GetDivRate>
		break;
1a000e38:	e001      	b.n	1a000e3e <Chip_Clock_GetClockInputHz+0x96>
		rate = CRYSTAL_32K_FREQ_IN;
1a000e3a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a000e3e:	bd08      	pop	{r3, pc}
			rate = 50000000; /* RMII uses 50 MHz */
1a000e40:	4806      	ldr	r0, [pc, #24]	; (1a000e5c <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a000e42:	e7fc      	b.n	1a000e3e <Chip_Clock_GetClockInputHz+0x96>
1a000e44:	00b71b00 	.word	0x00b71b00
1a000e48:	40043000 	.word	0x40043000
1a000e4c:	017d7840 	.word	0x017d7840
1a000e50:	1a002afc 	.word	0x1a002afc
1a000e54:	1a002b28 	.word	0x1a002b28
1a000e58:	100000fc 	.word	0x100000fc
1a000e5c:	02faf080 	.word	0x02faf080

1a000e60 <Chip_Clock_CalcMainPLLValue>:
{
1a000e60:	b538      	push	{r3, r4, r5, lr}
1a000e62:	4605      	mov	r5, r0
1a000e64:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a000e66:	7908      	ldrb	r0, [r1, #4]
1a000e68:	f7ff ff9e 	bl	1a000da8 <Chip_Clock_GetClockInputHz>
1a000e6c:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a000e6e:	4b19      	ldr	r3, [pc, #100]	; (1a000ed4 <Chip_Clock_CalcMainPLLValue+0x74>)
1a000e70:	442b      	add	r3, r5
1a000e72:	4a19      	ldr	r2, [pc, #100]	; (1a000ed8 <Chip_Clock_CalcMainPLLValue+0x78>)
1a000e74:	4293      	cmp	r3, r2
1a000e76:	d821      	bhi.n	1a000ebc <Chip_Clock_CalcMainPLLValue+0x5c>
1a000e78:	b318      	cbz	r0, 1a000ec2 <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a000e7a:	2380      	movs	r3, #128	; 0x80
1a000e7c:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a000e7e:	2300      	movs	r3, #0
1a000e80:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a000e82:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a000e84:	fbb5 f3f0 	udiv	r3, r5, r0
1a000e88:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a000e8a:	4a14      	ldr	r2, [pc, #80]	; (1a000edc <Chip_Clock_CalcMainPLLValue+0x7c>)
1a000e8c:	4295      	cmp	r5, r2
1a000e8e:	d903      	bls.n	1a000e98 <Chip_Clock_CalcMainPLLValue+0x38>
1a000e90:	fb03 f000 	mul.w	r0, r3, r0
1a000e94:	42a8      	cmp	r0, r5
1a000e96:	d007      	beq.n	1a000ea8 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a000e98:	4621      	mov	r1, r4
1a000e9a:	4628      	mov	r0, r5
1a000e9c:	f7ff fe96 	bl	1a000bcc <pll_get_frac>
		if (!ppll->nsel) {
1a000ea0:	68a3      	ldr	r3, [r4, #8]
1a000ea2:	b18b      	cbz	r3, 1a000ec8 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a000ea4:	3b01      	subs	r3, #1
1a000ea6:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a000ea8:	6923      	ldr	r3, [r4, #16]
1a000eaa:	b183      	cbz	r3, 1a000ece <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a000eac:	68e2      	ldr	r2, [r4, #12]
1a000eae:	b10a      	cbz	r2, 1a000eb4 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a000eb0:	3a01      	subs	r2, #1
1a000eb2:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a000eb4:	3b01      	subs	r3, #1
1a000eb6:	6123      	str	r3, [r4, #16]
	return 0;
1a000eb8:	2000      	movs	r0, #0
}
1a000eba:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a000ebc:	f04f 30ff 	mov.w	r0, #4294967295
1a000ec0:	e7fb      	b.n	1a000eba <Chip_Clock_CalcMainPLLValue+0x5a>
1a000ec2:	f04f 30ff 	mov.w	r0, #4294967295
1a000ec6:	e7f8      	b.n	1a000eba <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a000ec8:	f04f 30ff 	mov.w	r0, #4294967295
1a000ecc:	e7f5      	b.n	1a000eba <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a000ece:	f04f 30ff 	mov.w	r0, #4294967295
1a000ed2:	e7f2      	b.n	1a000eba <Chip_Clock_CalcMainPLLValue+0x5a>
1a000ed4:	ff6b3a10 	.word	0xff6b3a10
1a000ed8:	0b940510 	.word	0x0b940510
1a000edc:	094c5eff 	.word	0x094c5eff

1a000ee0 <Chip_Clock_GetMainPLLHz>:
{
1a000ee0:	b530      	push	{r4, r5, lr}
1a000ee2:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a000ee4:	4d17      	ldr	r5, [pc, #92]	; (1a000f44 <Chip_Clock_GetMainPLLHz+0x64>)
1a000ee6:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a000ee8:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a000eec:	f7ff ff5c 	bl	1a000da8 <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a000ef0:	4b15      	ldr	r3, [pc, #84]	; (1a000f48 <Chip_Clock_GetMainPLLHz+0x68>)
1a000ef2:	681b      	ldr	r3, [r3, #0]
1a000ef4:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a000ef6:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a000ef8:	f013 0f01 	tst.w	r3, #1
1a000efc:	d020      	beq.n	1a000f40 <Chip_Clock_GetMainPLLHz+0x60>
	msel = (PLLReg >> 16) & 0xFF;
1a000efe:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a000f02:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a000f06:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a000f0a:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a000f0e:	3301      	adds	r3, #1
	n = nsel + 1;
1a000f10:	3201      	adds	r2, #1
	p = ptab[psel];
1a000f12:	f10d 0c08 	add.w	ip, sp, #8
1a000f16:	4461      	add	r1, ip
1a000f18:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a000f1c:	f014 0f80 	tst.w	r4, #128	; 0x80
1a000f20:	d108      	bne.n	1a000f34 <Chip_Clock_GetMainPLLHz+0x54>
1a000f22:	b93d      	cbnz	r5, 1a000f34 <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a000f24:	0049      	lsls	r1, r1, #1
1a000f26:	fbb3 f3f1 	udiv	r3, r3, r1
1a000f2a:	fbb0 f0f2 	udiv	r0, r0, r2
1a000f2e:	fb00 f003 	mul.w	r0, r0, r3
1a000f32:	e003      	b.n	1a000f3c <Chip_Clock_GetMainPLLHz+0x5c>
		return m * (freq / n);
1a000f34:	fbb0 f0f2 	udiv	r0, r0, r2
1a000f38:	fb03 f000 	mul.w	r0, r3, r0
}
1a000f3c:	b003      	add	sp, #12
1a000f3e:	bd30      	pop	{r4, r5, pc}
		return 0;
1a000f40:	2000      	movs	r0, #0
1a000f42:	e7fb      	b.n	1a000f3c <Chip_Clock_GetMainPLLHz+0x5c>
1a000f44:	40050000 	.word	0x40050000
1a000f48:	1a002b88 	.word	0x1a002b88

1a000f4c <Chip_Clock_GetDivRate>:
{
1a000f4c:	b538      	push	{r3, r4, r5, lr}
1a000f4e:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a000f50:	4608      	mov	r0, r1
1a000f52:	f7ff ff0d 	bl	1a000d70 <Chip_Clock_GetDividerSource>
1a000f56:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a000f58:	4620      	mov	r0, r4
1a000f5a:	f7ff ff17 	bl	1a000d8c <Chip_Clock_GetDividerDivisor>
1a000f5e:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a000f60:	4628      	mov	r0, r5
1a000f62:	f7ff ff21 	bl	1a000da8 <Chip_Clock_GetClockInputHz>
1a000f66:	3401      	adds	r4, #1
}
1a000f68:	fbb0 f0f4 	udiv	r0, r0, r4
1a000f6c:	bd38      	pop	{r3, r4, r5, pc}
1a000f6e:	Address 0x1a000f6e is out of bounds.


1a000f70 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a000f70:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a000f72:	f100 0416 	add.w	r4, r0, #22
1a000f76:	00a4      	lsls	r4, r4, #2
1a000f78:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a000f7c:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a000f80:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a000f82:	281b      	cmp	r0, #27
1a000f84:	d813      	bhi.n	1a000fae <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a000f86:	2911      	cmp	r1, #17
1a000f88:	d01a      	beq.n	1a000fc0 <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a000f8a:	4d0e      	ldr	r5, [pc, #56]	; (1a000fc4 <Chip_Clock_SetBaseClock+0x54>)
1a000f8c:	4025      	ands	r5, r4

			if (autoblocken) {
1a000f8e:	b10a      	cbz	r2, 1a000f94 <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a000f90:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a000f94:	b10b      	cbz	r3, 1a000f9a <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a000f96:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a000f9a:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a000f9e:	3016      	adds	r0, #22
1a000fa0:	0080      	lsls	r0, r0, #2
1a000fa2:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a000fa6:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a000faa:	6045      	str	r5, [r0, #4]
1a000fac:	e008      	b.n	1a000fc0 <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a000fae:	f044 0401 	orr.w	r4, r4, #1
1a000fb2:	3016      	adds	r0, #22
1a000fb4:	0080      	lsls	r0, r0, #2
1a000fb6:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a000fba:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a000fbe:	6044      	str	r4, [r0, #4]
	}
}
1a000fc0:	bc30      	pop	{r4, r5}
1a000fc2:	4770      	bx	lr
1a000fc4:	e0fff7fe 	.word	0xe0fff7fe

1a000fc8 <Chip_Clock_EnableBaseClock>:
}

/*Enables a base clock source */
void Chip_Clock_EnableBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	if (BaseClock < CLK_BASE_NONE) {
1a000fc8:	281b      	cmp	r0, #27
1a000fca:	d809      	bhi.n	1a000fe0 <Chip_Clock_EnableBaseClock+0x18>
		LPC_CGU->BASE_CLK[BaseClock] &= ~1;
1a000fcc:	3016      	adds	r0, #22
1a000fce:	0080      	lsls	r0, r0, #2
1a000fd0:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a000fd4:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a000fd8:	6843      	ldr	r3, [r0, #4]
1a000fda:	f023 0301 	bic.w	r3, r3, #1
1a000fde:	6043      	str	r3, [r0, #4]
	}
}
1a000fe0:	4770      	bx	lr

1a000fe2 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a000fe2:	281b      	cmp	r0, #27
1a000fe4:	d80c      	bhi.n	1a001000 <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a000fe6:	3016      	adds	r0, #22
1a000fe8:	0080      	lsls	r0, r0, #2
1a000fea:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a000fee:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a000ff2:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a000ff4:	f010 0f01 	tst.w	r0, #1
1a000ff8:	d104      	bne.n	1a001004 <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a000ffa:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a000ffe:	4770      	bx	lr
		return CLKINPUT_PD;
1a001000:	2011      	movs	r0, #17
1a001002:	4770      	bx	lr
		return CLKINPUT_PD;
1a001004:	2011      	movs	r0, #17
}
1a001006:	4770      	bx	lr

1a001008 <Chip_Clock_GetBaseClocktHz>:
{
1a001008:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a00100a:	f7ff ffea 	bl	1a000fe2 <Chip_Clock_GetBaseClock>
1a00100e:	f7ff fecb 	bl	1a000da8 <Chip_Clock_GetClockInputHz>
}
1a001012:	bd08      	pop	{r3, pc}

1a001014 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a001014:	b971      	cbnz	r1, 1a001034 <Chip_Clock_EnableOpts+0x20>
	uint32_t reg = 1;
1a001016:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a001018:	b10a      	cbz	r2, 1a00101e <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a00101a:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a00101e:	2b02      	cmp	r3, #2
1a001020:	d00a      	beq.n	1a001038 <Chip_Clock_EnableOpts+0x24>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a001022:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001026:	d30a      	bcc.n	1a00103e <Chip_Clock_EnableOpts+0x2a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a001028:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a00102c:	4b06      	ldr	r3, [pc, #24]	; (1a001048 <Chip_Clock_EnableOpts+0x34>)
1a00102e:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a001032:	4770      	bx	lr
		reg |= (1 << 1);
1a001034:	2103      	movs	r1, #3
1a001036:	e7ef      	b.n	1a001018 <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a001038:	f041 0120 	orr.w	r1, r1, #32
1a00103c:	e7f1      	b.n	1a001022 <Chip_Clock_EnableOpts+0xe>
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a00103e:	3020      	adds	r0, #32
1a001040:	4b02      	ldr	r3, [pc, #8]	; (1a00104c <Chip_Clock_EnableOpts+0x38>)
1a001042:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a001046:	4770      	bx	lr
1a001048:	40052000 	.word	0x40052000
1a00104c:	40051000 	.word	0x40051000

1a001050 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a001050:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001054:	d309      	bcc.n	1a00106a <Chip_Clock_Enable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a001056:	4a09      	ldr	r2, [pc, #36]	; (1a00107c <Chip_Clock_Enable+0x2c>)
1a001058:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a00105c:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a001060:	f043 0301 	orr.w	r3, r3, #1
1a001064:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a001068:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a00106a:	4a05      	ldr	r2, [pc, #20]	; (1a001080 <Chip_Clock_Enable+0x30>)
1a00106c:	3020      	adds	r0, #32
1a00106e:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a001072:	f043 0301 	orr.w	r3, r3, #1
1a001076:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a00107a:	4770      	bx	lr
1a00107c:	40052000 	.word	0x40052000
1a001080:	40051000 	.word	0x40051000

1a001084 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a001084:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a001086:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a00108a:	d309      	bcc.n	1a0010a0 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a00108c:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a001090:	4a0d      	ldr	r2, [pc, #52]	; (1a0010c8 <Chip_Clock_GetRate+0x44>)
1a001092:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a001096:	f014 0f01 	tst.w	r4, #1
1a00109a:	d107      	bne.n	1a0010ac <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a00109c:	2000      	movs	r0, #0
	}

	return rate;
}
1a00109e:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a0010a0:	f100 0320 	add.w	r3, r0, #32
1a0010a4:	4a09      	ldr	r2, [pc, #36]	; (1a0010cc <Chip_Clock_GetRate+0x48>)
1a0010a6:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a0010aa:	e7f4      	b.n	1a001096 <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a0010ac:	f7ff fe14 	bl	1a000cd8 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a0010b0:	f7ff ffaa 	bl	1a001008 <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a0010b4:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a0010b8:	d103      	bne.n	1a0010c2 <Chip_Clock_GetRate+0x3e>
			div = 1;
1a0010ba:	2301      	movs	r3, #1
		rate = rate / div;
1a0010bc:	fbb0 f0f3 	udiv	r0, r0, r3
1a0010c0:	e7ed      	b.n	1a00109e <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a0010c2:	2302      	movs	r3, #2
1a0010c4:	e7fa      	b.n	1a0010bc <Chip_Clock_GetRate+0x38>
1a0010c6:	bf00      	nop
1a0010c8:	40052000 	.word	0x40052000
1a0010cc:	40051000 	.word	0x40051000

1a0010d0 <Chip_Clock_SetupPLL>:
}

/* Sets up the audio or USB PLL */
void Chip_Clock_SetupPLL(CHIP_CGU_CLKIN_T Input, CHIP_CGU_USB_AUDIO_PLL_T pllnum,
						 const CGU_USBAUDIO_PLL_SETUP_T *pPLLSetup)
{
1a0010d0:	b410      	push	{r4}
	uint32_t reg = pPLLSetup->ctrl | (Input << 24);
1a0010d2:	6813      	ldr	r3, [r2, #0]
1a0010d4:	ea43 6000 	orr.w	r0, r3, r0, lsl #24

	/* Setup from passed values */
	LPC_CGU->PLL[pllnum].PLL_CTRL = reg;
1a0010d8:	4b0b      	ldr	r3, [pc, #44]	; (1a001108 <Chip_Clock_SetupPLL+0x38>)
1a0010da:	eb03 1401 	add.w	r4, r3, r1, lsl #4
1a0010de:	6220      	str	r0, [r4, #32]
	LPC_CGU->PLL[pllnum].PLL_MDIV = pPLLSetup->mdiv;
1a0010e0:	6850      	ldr	r0, [r2, #4]
1a0010e2:	1c8c      	adds	r4, r1, #2
1a0010e4:	eb03 1304 	add.w	r3, r3, r4, lsl #4
1a0010e8:	6058      	str	r0, [r3, #4]
	LPC_CGU->PLL[pllnum].PLL_NP_DIV = pPLLSetup->ndiv;
1a0010ea:	6890      	ldr	r0, [r2, #8]
1a0010ec:	6098      	str	r0, [r3, #8]

	/* Fractional divider is for audio PLL only */
	if (pllnum == CGU_AUDIO_PLL) {
1a0010ee:	2901      	cmp	r1, #1
1a0010f0:	d006      	beq.n	1a001100 <Chip_Clock_SetupPLL+0x30>
		LPC_CGU->PLL0AUDIO_FRAC = pPLLSetup->fract;
	}
	audio_usb_pll_freq[pllnum] = pPLLSetup->freq;
1a0010f2:	6912      	ldr	r2, [r2, #16]
1a0010f4:	4b05      	ldr	r3, [pc, #20]	; (1a00110c <Chip_Clock_SetupPLL+0x3c>)
1a0010f6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
1a0010fa:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0010fe:	4770      	bx	lr
		LPC_CGU->PLL0AUDIO_FRAC = pPLLSetup->fract;
1a001100:	68d0      	ldr	r0, [r2, #12]
1a001102:	4b01      	ldr	r3, [pc, #4]	; (1a001108 <Chip_Clock_SetupPLL+0x38>)
1a001104:	63d8      	str	r0, [r3, #60]	; 0x3c
1a001106:	e7f4      	b.n	1a0010f2 <Chip_Clock_SetupPLL+0x22>
1a001108:	40050000 	.word	0x40050000
1a00110c:	100000fc 	.word	0x100000fc

1a001110 <Chip_Clock_EnablePLL>:

/* Enables the audio or USB PLL */
void Chip_Clock_EnablePLL(CHIP_CGU_USB_AUDIO_PLL_T pllnum)
{
	LPC_CGU->PLL[pllnum].PLL_CTRL &= ~1;
1a001110:	0100      	lsls	r0, r0, #4
1a001112:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a001116:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a00111a:	6a03      	ldr	r3, [r0, #32]
1a00111c:	f023 0301 	bic.w	r3, r3, #1
1a001120:	6203      	str	r3, [r0, #32]
}
1a001122:	4770      	bx	lr

1a001124 <Chip_Clock_GetPLLStatus>:
}

/* Returns the PLL status */
uint32_t Chip_Clock_GetPLLStatus(CHIP_CGU_USB_AUDIO_PLL_T pllnum)
{
	return LPC_CGU->PLL[pllnum].PLL_STAT;
1a001124:	0100      	lsls	r0, r0, #4
1a001126:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a00112a:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a00112e:	69c0      	ldr	r0, [r0, #28]
}
1a001130:	4770      	bx	lr
1a001132:	Address 0x1a001132 is out of bounds.


1a001134 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a001134:	4b09      	ldr	r3, [pc, #36]	; (1a00115c <Chip_UART_GetIndex+0x28>)
1a001136:	4298      	cmp	r0, r3
1a001138:	d009      	beq.n	1a00114e <Chip_UART_GetIndex+0x1a>
1a00113a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a00113e:	4298      	cmp	r0, r3
1a001140:	d007      	beq.n	1a001152 <Chip_UART_GetIndex+0x1e>
1a001142:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a001146:	4298      	cmp	r0, r3
1a001148:	d005      	beq.n	1a001156 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a00114a:	2000      	movs	r0, #0
1a00114c:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a00114e:	2002      	movs	r0, #2
1a001150:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a001152:	2003      	movs	r0, #3
1a001154:	4770      	bx	lr
			return 1;
1a001156:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a001158:	4770      	bx	lr
1a00115a:	bf00      	nop
1a00115c:	400c1000 	.word	0x400c1000

1a001160 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a001160:	b530      	push	{r4, r5, lr}
1a001162:	b083      	sub	sp, #12
1a001164:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a001166:	f7ff ffe5 	bl	1a001134 <Chip_UART_GetIndex>
1a00116a:	2301      	movs	r3, #1
1a00116c:	461a      	mov	r2, r3
1a00116e:	4619      	mov	r1, r3
1a001170:	4d0e      	ldr	r5, [pc, #56]	; (1a0011ac <Chip_UART_Init+0x4c>)
1a001172:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a001176:	f7ff ff4d 	bl	1a001014 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a00117a:	2307      	movs	r3, #7
1a00117c:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a00117e:	2300      	movs	r3, #0
1a001180:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a001182:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a001184:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a001186:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a001188:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a00118a:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a00118c:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a00118e:	4b08      	ldr	r3, [pc, #32]	; (1a0011b0 <Chip_UART_Init+0x50>)
1a001190:	429c      	cmp	r4, r3
1a001192:	d006      	beq.n	1a0011a2 <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a001194:	2303      	movs	r3, #3
1a001196:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a001198:	2310      	movs	r3, #16
1a00119a:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a00119c:	9b01      	ldr	r3, [sp, #4]
}
1a00119e:	b003      	add	sp, #12
1a0011a0:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a0011a2:	2300      	movs	r3, #0
1a0011a4:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a0011a6:	69a3      	ldr	r3, [r4, #24]
1a0011a8:	9301      	str	r3, [sp, #4]
1a0011aa:	e7f3      	b.n	1a001194 <Chip_UART_Init+0x34>
1a0011ac:	1a002c08 	.word	0x1a002c08
1a0011b0:	40082000 	.word	0x40082000

1a0011b4 <Chip_UART_Send>:
}

/* Transmit a byte array through the UART peripheral (non-blocking) */
int Chip_UART_Send(LPC_USART_T *pUART, const void *data, int numBytes)
{
	int sent = 0;
1a0011b4:	2300      	movs	r3, #0
	uint8_t *p8 = (uint8_t *) data;

	/* Send until the transmit FIFO is full or out of bytes */
	while ((sent < numBytes) &&
1a0011b6:	4293      	cmp	r3, r2
1a0011b8:	da0e      	bge.n	1a0011d8 <Chip_UART_Send+0x24>
{
1a0011ba:	b410      	push	{r4}
	return pUART->LSR;
1a0011bc:	6944      	ldr	r4, [r0, #20]
	while ((sent < numBytes) &&
1a0011be:	f014 0f20 	tst.w	r4, #32
1a0011c2:	d005      	beq.n	1a0011d0 <Chip_UART_Send+0x1c>
		   ((Chip_UART_ReadLineStatus(pUART) & UART_LSR_THRE) != 0)) {
		Chip_UART_SendByte(pUART, *p8);
1a0011c4:	f811 4b01 	ldrb.w	r4, [r1], #1
	pUART->THR = (uint32_t) data;
1a0011c8:	6004      	str	r4, [r0, #0]
		p8++;
		sent++;
1a0011ca:	3301      	adds	r3, #1
	while ((sent < numBytes) &&
1a0011cc:	4293      	cmp	r3, r2
1a0011ce:	dbf5      	blt.n	1a0011bc <Chip_UART_Send+0x8>
	}

	return sent;
}
1a0011d0:	4618      	mov	r0, r3
1a0011d2:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0011d6:	4770      	bx	lr
1a0011d8:	4618      	mov	r0, r3
1a0011da:	4770      	bx	lr

1a0011dc <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a0011dc:	b538      	push	{r3, r4, r5, lr}
1a0011de:	4605      	mov	r5, r0
1a0011e0:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a0011e2:	f7ff ffa7 	bl	1a001134 <Chip_UART_GetIndex>
1a0011e6:	4b0c      	ldr	r3, [pc, #48]	; (1a001218 <Chip_UART_SetBaud+0x3c>)
1a0011e8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a0011ec:	f7ff ff4a 	bl	1a001084 <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a0011f0:	0123      	lsls	r3, r4, #4
1a0011f2:	fbb0 f3f3 	udiv	r3, r0, r3

	/* High and low halves of the divider */
	divh = div / 256;
	divl = div - (divh * 256);
1a0011f6:	b2d9      	uxtb	r1, r3
	pUART->LCR |= UART_LCR_DLAB_EN;
1a0011f8:	68ea      	ldr	r2, [r5, #12]
1a0011fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a0011fe:	60ea      	str	r2, [r5, #12]
	pUART->DLL = (uint32_t) dll;
1a001200:	6029      	str	r1, [r5, #0]
	pUART->DLM = (uint32_t) dlm;
1a001202:	f3c3 2207 	ubfx	r2, r3, #8, #8
1a001206:	606a      	str	r2, [r5, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a001208:	68ea      	ldr	r2, [r5, #12]
1a00120a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a00120e:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a001210:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a001214:	0900      	lsrs	r0, r0, #4
1a001216:	bd38      	pop	{r3, r4, r5, pc}
1a001218:	1a002c00 	.word	0x1a002c00

1a00121c <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a00121c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a001220:	b083      	sub	sp, #12
1a001222:	9001      	str	r0, [sp, #4]
1a001224:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a001226:	f7ff ff85 	bl	1a001134 <Chip_UART_GetIndex>
1a00122a:	4b32      	ldr	r3, [pc, #200]	; (1a0012f4 <Chip_UART_SetBaudFDR+0xd8>)
1a00122c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a001230:	f7ff ff28 	bl	1a001084 <Chip_Clock_GetRate>
1a001234:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a001236:	f04f 37ff 	mov.w	r7, #4294967295

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a00123a:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a00123c:	f04f 0b00 	mov.w	fp, #0
1a001240:	46a2      	mov	sl, r4
1a001242:	46d9      	mov	r9, fp
	for (m = 1; odiff && m < 16; m++) {
1a001244:	e02a      	b.n	1a00129c <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a001246:	4242      	negs	r2, r0
				div ++;
1a001248:	1c4b      	adds	r3, r1, #1
1a00124a:	e017      	b.n	1a00127c <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a00124c:	b30a      	cbz	r2, 1a001292 <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a00124e:	4617      	mov	r7, r2
			sd = d;
1a001250:	46ab      	mov	fp, r5
			sm = m;
1a001252:	46a2      	mov	sl, r4
			sdiv = div;
1a001254:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a001256:	3501      	adds	r5, #1
1a001258:	42ac      	cmp	r4, r5
1a00125a:	d91e      	bls.n	1a00129a <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a00125c:	0933      	lsrs	r3, r6, #4
1a00125e:	0730      	lsls	r0, r6, #28
1a001260:	fba4 0100 	umull	r0, r1, r4, r0
1a001264:	fb04 1103 	mla	r1, r4, r3, r1
1a001268:	1962      	adds	r2, r4, r5
1a00126a:	fb08 f202 	mul.w	r2, r8, r2
1a00126e:	2300      	movs	r3, #0
1a001270:	f000 fd9a 	bl	1a001da8 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a001274:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a001276:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a001278:	2800      	cmp	r0, #0
1a00127a:	dbe4      	blt.n	1a001246 <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a00127c:	4297      	cmp	r7, r2
1a00127e:	d3ea      	bcc.n	1a001256 <Chip_UART_SetBaudFDR+0x3a>
1a001280:	2b00      	cmp	r3, #0
1a001282:	d0e8      	beq.n	1a001256 <Chip_UART_SetBaudFDR+0x3a>
1a001284:	0c19      	lsrs	r1, r3, #16
1a001286:	d1e6      	bne.n	1a001256 <Chip_UART_SetBaudFDR+0x3a>
1a001288:	2b02      	cmp	r3, #2
1a00128a:	d8df      	bhi.n	1a00124c <Chip_UART_SetBaudFDR+0x30>
1a00128c:	2d00      	cmp	r5, #0
1a00128e:	d0dd      	beq.n	1a00124c <Chip_UART_SetBaudFDR+0x30>
1a001290:	e7e1      	b.n	1a001256 <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a001292:	4617      	mov	r7, r2
			sd = d;
1a001294:	46ab      	mov	fp, r5
			sm = m;
1a001296:	46a2      	mov	sl, r4
			sdiv = div;
1a001298:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a00129a:	3401      	adds	r4, #1
1a00129c:	b11f      	cbz	r7, 1a0012a6 <Chip_UART_SetBaudFDR+0x8a>
1a00129e:	2c0f      	cmp	r4, #15
1a0012a0:	d801      	bhi.n	1a0012a6 <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a0012a2:	2500      	movs	r5, #0
1a0012a4:	e7d8      	b.n	1a001258 <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a0012a6:	f1b9 0f00 	cmp.w	r9, #0
1a0012aa:	d01e      	beq.n	1a0012ea <Chip_UART_SetBaudFDR+0xce>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a0012ac:	9a01      	ldr	r2, [sp, #4]
1a0012ae:	4611      	mov	r1, r2
1a0012b0:	68d3      	ldr	r3, [r2, #12]
1a0012b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0012b6:	60d3      	str	r3, [r2, #12]
	pUART->DLL = (uint32_t) dll;
1a0012b8:	fa5f f389 	uxtb.w	r3, r9
1a0012bc:	6013      	str	r3, [r2, #0]
	pUART->DLM = (uint32_t) dlm;
1a0012be:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a0012c2:	6053      	str	r3, [r2, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a0012c4:	68d3      	ldr	r3, [r2, #12]
1a0012c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0012ca:	60d3      	str	r3, [r2, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a0012cc:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a0012d0:	b2db      	uxtb	r3, r3
1a0012d2:	f00b 020f 	and.w	r2, fp, #15
1a0012d6:	4313      	orrs	r3, r2
1a0012d8:	628b      	str	r3, [r1, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a0012da:	0933      	lsrs	r3, r6, #4
1a0012dc:	fb0a f303 	mul.w	r3, sl, r3
1a0012e0:	44da      	add	sl, fp
1a0012e2:	fb09 f90a 	mul.w	r9, r9, sl
1a0012e6:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a0012ea:	4648      	mov	r0, r9
1a0012ec:	b003      	add	sp, #12
1a0012ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0012f2:	bf00      	nop
1a0012f4:	1a002c00 	.word	0x1a002c00

1a0012f8 <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a0012f8:	b508      	push	{r3, lr}
   extern void * const g_pfnVectors[];
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a0012fa:	4a0b      	ldr	r2, [pc, #44]	; (1a001328 <SystemInit+0x30>)
1a0012fc:	4b0b      	ldr	r3, [pc, #44]	; (1a00132c <SystemInit+0x34>)
1a0012fe:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a001300:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a001304:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a001306:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a00130a:	2b20      	cmp	r3, #32
1a00130c:	d004      	beq.n	1a001318 <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit */
   Board_SystemInit();
1a00130e:	f7ff f927 	bl	1a000560 <Board_SystemInit>
   Board_Init();
1a001312:	f7ff f9fd 	bl	1a000710 <Board_Init>
}
1a001316:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a001318:	4a04      	ldr	r2, [pc, #16]	; (1a00132c <SystemInit+0x34>)
1a00131a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a00131e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a001322:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a001326:	e7f2      	b.n	1a00130e <SystemInit+0x16>
1a001328:	1a000000 	.word	0x1a000000
1a00132c:	e000ed00 	.word	0xe000ed00

1a001330 <sleepUntilNextInterrupt>:
 */
void sleepUntilNextInterrupt( void )
{

   /* Instert an assembly instruction wfi (wait for interrupt) */
   __asm volatile( "wfi" );
1a001330:	bf30      	wfi

}
1a001332:	4770      	bx	lr

1a001334 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a001334:	4b04      	ldr	r3, [pc, #16]	; (1a001348 <cyclesCounterInit+0x14>)
1a001336:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a001338:	4a04      	ldr	r2, [pc, #16]	; (1a00134c <cyclesCounterInit+0x18>)
1a00133a:	6813      	ldr	r3, [r2, #0]
1a00133c:	f043 0301 	orr.w	r3, r3, #1
1a001340:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a001342:	2001      	movs	r0, #1
1a001344:	4770      	bx	lr
1a001346:	bf00      	nop
1a001348:	10000080 	.word	0x10000080
1a00134c:	e0001000 	.word	0xe0001000

1a001350 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a001350:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a001352:	4d0b      	ldr	r5, [pc, #44]	; (1a001380 <gpioObtainPinInit+0x30>)
1a001354:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a001358:	182c      	adds	r4, r5, r0
1a00135a:	5628      	ldrsb	r0, [r5, r0]
1a00135c:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a00135e:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a001362:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a001364:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a001368:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a00136a:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a00136e:	9b02      	ldr	r3, [sp, #8]
1a001370:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a001372:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a001376:	9b03      	ldr	r3, [sp, #12]
1a001378:	701a      	strb	r2, [r3, #0]
}
1a00137a:	bc30      	pop	{r4, r5}
1a00137c:	4770      	bx	lr
1a00137e:	bf00      	nop
1a001380:	1a002c10 	.word	0x1a002c10

1a001384 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
   if( pin == VCC ){
1a001384:	f110 0f02 	cmn.w	r0, #2
1a001388:	f000 80c7 	beq.w	1a00151a <gpioInit+0x196>
	  return FALSE;
   }
   if( pin == GND ){
1a00138c:	f1b0 3fff 	cmp.w	r0, #4294967295
1a001390:	f000 80c5 	beq.w	1a00151e <gpioInit+0x19a>
{
1a001394:	b570      	push	{r4, r5, r6, lr}
1a001396:	b084      	sub	sp, #16
1a001398:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a00139a:	2300      	movs	r3, #0
1a00139c:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a0013a0:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0013a4:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a0013a8:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a0013ac:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a0013b0:	f10d 030b 	add.w	r3, sp, #11
1a0013b4:	9301      	str	r3, [sp, #4]
1a0013b6:	ab03      	add	r3, sp, #12
1a0013b8:	9300      	str	r3, [sp, #0]
1a0013ba:	f10d 030d 	add.w	r3, sp, #13
1a0013be:	f10d 020e 	add.w	r2, sp, #14
1a0013c2:	f10d 010f 	add.w	r1, sp, #15
1a0013c6:	f7ff ffc3 	bl	1a001350 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a0013ca:	2c05      	cmp	r4, #5
1a0013cc:	f200 80a9 	bhi.w	1a001522 <gpioInit+0x19e>
1a0013d0:	e8df f004 	tbb	[pc, r4]
1a0013d4:	45278109 	.word	0x45278109
1a0013d8:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a0013da:	4853      	ldr	r0, [pc, #332]	; (1a001528 <gpioInit+0x1a4>)
1a0013dc:	f7ff fa56 	bl	1a00088c <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a0013e0:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a0013e2:	b004      	add	sp, #16
1a0013e4:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a0013e6:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0013ea:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0013ee:	f89d 200d 	ldrb.w	r2, [sp, #13]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0013f2:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a0013f6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0013fa:	494c      	ldr	r1, [pc, #304]	; (1a00152c <gpioInit+0x1a8>)
1a0013fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001400:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001404:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001408:	2001      	movs	r0, #1
1a00140a:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a00140e:	4c46      	ldr	r4, [pc, #280]	; (1a001528 <gpioInit+0x1a4>)
1a001410:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001414:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001418:	ea22 0201 	bic.w	r2, r2, r1
1a00141c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001420:	e7df      	b.n	1a0013e2 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a001422:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001426:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00142a:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00142e:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a001432:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001436:	493d      	ldr	r1, [pc, #244]	; (1a00152c <gpioInit+0x1a8>)
1a001438:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a00143c:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001440:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001444:	2001      	movs	r0, #1
1a001446:	fa00 f102 	lsl.w	r1, r0, r2
1a00144a:	4c37      	ldr	r4, [pc, #220]	; (1a001528 <gpioInit+0x1a4>)
1a00144c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001450:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001454:	ea22 0201 	bic.w	r2, r2, r1
1a001458:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a00145c:	e7c1      	b.n	1a0013e2 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a00145e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001462:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001466:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00146a:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a00146e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001472:	492e      	ldr	r1, [pc, #184]	; (1a00152c <gpioInit+0x1a8>)
1a001474:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001478:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00147c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001480:	2001      	movs	r0, #1
1a001482:	fa00 f102 	lsl.w	r1, r0, r2
1a001486:	4c28      	ldr	r4, [pc, #160]	; (1a001528 <gpioInit+0x1a4>)
1a001488:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a00148c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001490:	ea22 0201 	bic.w	r2, r2, r1
1a001494:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001498:	e7a3      	b.n	1a0013e2 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a00149a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00149e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0014a2:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0014a6:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a0014aa:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0014ae:	491f      	ldr	r1, [pc, #124]	; (1a00152c <gpioInit+0x1a8>)
1a0014b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0014b4:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0014b8:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0014bc:	2001      	movs	r0, #1
1a0014be:	fa00 f102 	lsl.w	r1, r0, r2
1a0014c2:	4c19      	ldr	r4, [pc, #100]	; (1a001528 <gpioInit+0x1a4>)
1a0014c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0014c8:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0014cc:	ea22 0201 	bic.w	r2, r2, r1
1a0014d0:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0014d4:	e785      	b.n	1a0013e2 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a0014d6:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0014da:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0014de:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0014e2:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a0014e6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0014ea:	4910      	ldr	r1, [pc, #64]	; (1a00152c <gpioInit+0x1a8>)
1a0014ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a0014f0:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a0014f4:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0014f8:	2001      	movs	r0, #1
1a0014fa:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a0014fe:	4b0a      	ldr	r3, [pc, #40]	; (1a001528 <gpioInit+0x1a4>)
1a001500:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a001504:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a001508:	4331      	orrs	r1, r6
1a00150a:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a00150e:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a001510:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a001514:	2100      	movs	r1, #0
1a001516:	5499      	strb	r1, [r3, r2]
1a001518:	e763      	b.n	1a0013e2 <gpioInit+0x5e>
	  return FALSE;
1a00151a:	2000      	movs	r0, #0
1a00151c:	4770      	bx	lr
	  return FALSE;
1a00151e:	2000      	movs	r0, #0
}
1a001520:	4770      	bx	lr
      ret_val = 0;
1a001522:	2000      	movs	r0, #0
1a001524:	e75d      	b.n	1a0013e2 <gpioInit+0x5e>
1a001526:	bf00      	nop
1a001528:	400f4000 	.word	0x400f4000
1a00152c:	40086000 	.word	0x40086000

1a001530 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
   if( pin == VCC ){
1a001530:	f110 0f02 	cmn.w	r0, #2
1a001534:	d02d      	beq.n	1a001592 <gpioWrite+0x62>
	  return FALSE;
   }
   if( pin == GND ){
1a001536:	f1b0 3fff 	cmp.w	r0, #4294967295
1a00153a:	d02c      	beq.n	1a001596 <gpioWrite+0x66>
{
1a00153c:	b510      	push	{r4, lr}
1a00153e:	b084      	sub	sp, #16
1a001540:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a001542:	2300      	movs	r3, #0
1a001544:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a001548:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a00154c:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a001550:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a001554:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a001558:	f10d 030b 	add.w	r3, sp, #11
1a00155c:	9301      	str	r3, [sp, #4]
1a00155e:	ab03      	add	r3, sp, #12
1a001560:	9300      	str	r3, [sp, #0]
1a001562:	f10d 030d 	add.w	r3, sp, #13
1a001566:	f10d 020e 	add.w	r2, sp, #14
1a00156a:	f10d 010f 	add.w	r1, sp, #15
1a00156e:	f7ff feef 	bl	1a001350 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a001572:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001576:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a00157a:	1c21      	adds	r1, r4, #0
1a00157c:	bf18      	it	ne
1a00157e:	2101      	movne	r1, #1
1a001580:	015b      	lsls	r3, r3, #5
1a001582:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a001586:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a00158a:	5499      	strb	r1, [r3, r2]

   return ret_val;
1a00158c:	2001      	movs	r0, #1
}
1a00158e:	b004      	add	sp, #16
1a001590:	bd10      	pop	{r4, pc}
	  return FALSE;
1a001592:	2000      	movs	r0, #0
1a001594:	4770      	bx	lr
	  return FALSE;
1a001596:	2000      	movs	r0, #0
}
1a001598:	4770      	bx	lr

1a00159a <gpioRead>:
}


bool_t gpioRead( gpioMap_t pin )
{
   if( pin == VCC ){
1a00159a:	f110 0f02 	cmn.w	r0, #2
1a00159e:	d02c      	beq.n	1a0015fa <gpioRead+0x60>
      return TRUE;
   }
   if( pin == GND ){
1a0015a0:	f1b0 3fff 	cmp.w	r0, #4294967295
1a0015a4:	d02b      	beq.n	1a0015fe <gpioRead+0x64>
{
1a0015a6:	b500      	push	{lr}
1a0015a8:	b085      	sub	sp, #20
      return FALSE;
   }

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a0015aa:	2300      	movs	r3, #0
1a0015ac:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a0015b0:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0015b4:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a0015b8:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a0015bc:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a0015c0:	f10d 030b 	add.w	r3, sp, #11
1a0015c4:	9301      	str	r3, [sp, #4]
1a0015c6:	ab03      	add	r3, sp, #12
1a0015c8:	9300      	str	r3, [sp, #0]
1a0015ca:	f10d 030d 	add.w	r3, sp, #13
1a0015ce:	f10d 020e 	add.w	r2, sp, #14
1a0015d2:	f10d 010f 	add.w	r1, sp, #15
1a0015d6:	f7ff febb 	bl	1a001350 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a0015da:	f99d 300c 	ldrsb.w	r3, [sp, #12]
1a0015de:	f89d 200b 	ldrb.w	r2, [sp, #11]
	return (bool) pGPIO->B[port][pin];
1a0015e2:	015b      	lsls	r3, r3, #5
1a0015e4:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a0015e8:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a0015ec:	5c98      	ldrb	r0, [r3, r2]
1a0015ee:	3000      	adds	r0, #0
1a0015f0:	bf18      	it	ne
1a0015f2:	2001      	movne	r0, #1

   return ret_val;
}
1a0015f4:	b005      	add	sp, #20
1a0015f6:	f85d fb04 	ldr.w	pc, [sp], #4
      return TRUE;
1a0015fa:	2001      	movs	r0, #1
1a0015fc:	4770      	bx	lr
      return FALSE;
1a0015fe:	2000      	movs	r0, #0
}
1a001600:	4770      	bx	lr
1a001602:	Address 0x1a001602 is out of bounds.


1a001604 <tickPowerSet>:
void tickPowerSet( bool_t power )
{
   #ifdef USE_FREERTOS
      uartWriteString( UART_USB, "Use of tickPowerSet() in a program with freeRTOS has no effect\r\n" );
   #else
      if( power ) {
1a001604:	b118      	cbz	r0, 1a00160e <tickPowerSet+0xa>
         // Enable SysTick IRQ and SysTick Timer
         SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
1a001606:	4b04      	ldr	r3, [pc, #16]	; (1a001618 <tickPowerSet+0x14>)
1a001608:	2207      	movs	r2, #7
1a00160a:	601a      	str	r2, [r3, #0]
1a00160c:	4770      	bx	lr
                         SysTick_CTRL_TICKINT_Msk   |
                         SysTick_CTRL_ENABLE_Msk;
      } else {
         // Disable SysTick IRQ and SysTick Timer
         SysTick->CTRL = 0x0000000;
1a00160e:	4b02      	ldr	r3, [pc, #8]	; (1a001618 <tickPowerSet+0x14>)
1a001610:	2200      	movs	r2, #0
1a001612:	601a      	str	r2, [r3, #0]
      }
   #endif
}
1a001614:	4770      	bx	lr
1a001616:	bf00      	nop
1a001618:	e000e010 	.word	0xe000e010

1a00161c <tickInit>:
{
1a00161c:	b538      	push	{r3, r4, r5, lr}
      if( tickRateMSvalue == 0 ) {
1a00161e:	ea50 0401 	orrs.w	r4, r0, r1
1a001622:	d02a      	beq.n	1a00167a <tickInit+0x5e>
         if( (tickRateMSvalue >= 1) && (tickRateMSvalue <= 50) ) {
1a001624:	f110 32ff 	adds.w	r2, r0, #4294967295
1a001628:	f141 33ff 	adc.w	r3, r1, #4294967295
1a00162c:	2b00      	cmp	r3, #0
1a00162e:	bf08      	it	eq
1a001630:	2a32      	cmpeq	r2, #50	; 0x32
1a001632:	d227      	bcs.n	1a001684 <tickInit+0x68>
            tickRateMS = tickRateMSvalue;
1a001634:	4b14      	ldr	r3, [pc, #80]	; (1a001688 <tickInit+0x6c>)
1a001636:	e9c3 0100 	strd	r0, r1, [r3]
            SysTick_Config( SystemCoreClock * tickRateMSvalue / 1000 );
1a00163a:	4b14      	ldr	r3, [pc, #80]	; (1a00168c <tickInit+0x70>)
1a00163c:	681b      	ldr	r3, [r3, #0]
1a00163e:	fba3 4500 	umull	r4, r5, r3, r0
1a001642:	fb03 5501 	mla	r5, r3, r1, r5
1a001646:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a00164a:	2300      	movs	r3, #0
1a00164c:	4620      	mov	r0, r4
1a00164e:	4629      	mov	r1, r5
1a001650:	f000 fbaa 	bl	1a001da8 <__aeabi_uldivmod>
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
1a001654:	3801      	subs	r0, #1
1a001656:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
1a00165a:	d209      	bcs.n	1a001670 <tickInit+0x54>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
1a00165c:	4b0c      	ldr	r3, [pc, #48]	; (1a001690 <tickInit+0x74>)
1a00165e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a001660:	4a0c      	ldr	r2, [pc, #48]	; (1a001694 <tickInit+0x78>)
1a001662:	21e0      	movs	r1, #224	; 0xe0
1a001664:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
1a001668:	2200      	movs	r2, #0
1a00166a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a00166c:	2207      	movs	r2, #7
1a00166e:	601a      	str	r2, [r3, #0]
            tickPowerSet( ON );
1a001670:	2001      	movs	r0, #1
1a001672:	f7ff ffc7 	bl	1a001604 <tickPowerSet>
      bool_t ret_val = 1;
1a001676:	2001      	movs	r0, #1
}
1a001678:	bd38      	pop	{r3, r4, r5, pc}
         tickPowerSet( OFF );
1a00167a:	2000      	movs	r0, #0
1a00167c:	f7ff ffc2 	bl	1a001604 <tickPowerSet>
         ret_val = 0;
1a001680:	2000      	movs	r0, #0
1a001682:	e7f9      	b.n	1a001678 <tickInit+0x5c>
            ret_val = 0;
1a001684:	2000      	movs	r0, #0
1a001686:	e7f7      	b.n	1a001678 <tickInit+0x5c>
1a001688:	10000088 	.word	0x10000088
1a00168c:	10000158 	.word	0x10000158
1a001690:	e000e010 	.word	0xe000e010
1a001694:	e000ed00 	.word	0xe000ed00

1a001698 <SysTick_Handler>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a001698:	b508      	push	{r3, lr}
   // Increment Tick counters
   tickCounter++;
1a00169a:	4a07      	ldr	r2, [pc, #28]	; (1a0016b8 <SysTick_Handler+0x20>)
1a00169c:	6813      	ldr	r3, [r2, #0]
1a00169e:	6851      	ldr	r1, [r2, #4]
1a0016a0:	3301      	adds	r3, #1
1a0016a2:	f141 0100 	adc.w	r1, r1, #0
1a0016a6:	6013      	str	r3, [r2, #0]
1a0016a8:	6051      	str	r1, [r2, #4]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a0016aa:	4b04      	ldr	r3, [pc, #16]	; (1a0016bc <SysTick_Handler+0x24>)
1a0016ac:	681b      	ldr	r3, [r3, #0]
1a0016ae:	b113      	cbz	r3, 1a0016b6 <SysTick_Handler+0x1e>
      (* tickHookFunction )( callBackFuncParams );
1a0016b0:	4a03      	ldr	r2, [pc, #12]	; (1a0016c0 <SysTick_Handler+0x28>)
1a0016b2:	6810      	ldr	r0, [r2, #0]
1a0016b4:	4798      	blx	r3
   }
}
1a0016b6:	bd08      	pop	{r3, pc}
1a0016b8:	10000108 	.word	0x10000108
1a0016bc:	10000110 	.word	0x10000110
1a0016c0:	10000104 	.word	0x10000104

1a0016c4 <CDC_ep0_override_hdlr>:
	return LPC_OK;
}

/* CDC EP0_patch part of WORKAROUND for artf42016. */
static ErrorCode_t CDC_ep0_override_hdlr(USBD_HANDLE_T hUsb, void *data, uint32_t event)
{
1a0016c4:	b538      	push	{r3, r4, r5, lr}
1a0016c6:	4604      	mov	r4, r0
1a0016c8:	4608      	mov	r0, r1
	USB_CDC0_CTRL_T *pCdc0Ctrl = (USB_CDC0_CTRL_T *) data;
	uint8_t cif_num, dif_num;
	CIC_SetRequest_t setReq;
	ErrorCode_t ret = ERR_USBD_UNHANDLED;

	if ( (event == USB_EVT_OUT) &&
1a0016ca:	2a02      	cmp	r2, #2
1a0016cc:	d007      	beq.n	1a0016de <CDC_ep0_override_hdlr+0x1a>
			}
		}

	}
	else {
		ret = g_defaultCdcHdlr(hUsb, data, event);
1a0016ce:	4b1b      	ldr	r3, [pc, #108]	; (1a00173c <CDC_ep0_override_hdlr+0x78>)
1a0016d0:	681b      	ldr	r3, [r3, #0]
1a0016d2:	4601      	mov	r1, r0
1a0016d4:	4620      	mov	r0, r4
1a0016d6:	4798      	blx	r3
1a0016d8:	4605      	mov	r5, r0
	}
	return ret;
}
1a0016da:	4628      	mov	r0, r5
1a0016dc:	bd38      	pop	{r3, r4, r5, pc}
		 (pCtrl->SetupPacket.bmRequestType.BM.Type == REQUEST_CLASS) &&
1a0016de:	f894 3174 	ldrb.w	r3, [r4, #372]	; 0x174
1a0016e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
1a0016e6:	2b21      	cmp	r3, #33	; 0x21
1a0016e8:	d1f1      	bne.n	1a0016ce <CDC_ep0_override_hdlr+0xa>
		if ((pCdcCtrl->epin_num & 0x80) == 0) {
1a0016ea:	f991 301a 	ldrsb.w	r3, [r1, #26]
1a0016ee:	2b00      	cmp	r3, #0
1a0016f0:	db0a      	blt.n	1a001708 <CDC_ep0_override_hdlr+0x44>
			cif_num = pCdc0Ctrl->cif_num;
1a0016f2:	7dca      	ldrb	r2, [r1, #23]
			dif_num = pCdc0Ctrl->dif_num;
1a0016f4:	7e09      	ldrb	r1, [r1, #24]
			setReq = pCdc0Ctrl->CIC_SetRequest;
1a0016f6:	6c05      	ldr	r5, [r0, #64]	; 0x40
		if (((pCtrl->SetupPacket.wIndex.WB.L == cif_num)  ||
1a0016f8:	f894 3178 	ldrb.w	r3, [r4, #376]	; 0x178
1a0016fc:	4293      	cmp	r3, r2
1a0016fe:	d007      	beq.n	1a001710 <CDC_ep0_override_hdlr+0x4c>
1a001700:	428b      	cmp	r3, r1
1a001702:	d005      	beq.n	1a001710 <CDC_ep0_override_hdlr+0x4c>
	ErrorCode_t ret = ERR_USBD_UNHANDLED;
1a001704:	4d0e      	ldr	r5, [pc, #56]	; (1a001740 <CDC_ep0_override_hdlr+0x7c>)
	return ret;
1a001706:	e7e8      	b.n	1a0016da <CDC_ep0_override_hdlr+0x16>
			cif_num = pCdcCtrl->cif_num;
1a001708:	7e0a      	ldrb	r2, [r1, #24]
			dif_num = pCdcCtrl->dif_num;
1a00170a:	7e49      	ldrb	r1, [r1, #25]
			setReq = pCdcCtrl->CIC_SetRequest;
1a00170c:	6c45      	ldr	r5, [r0, #68]	; 0x44
1a00170e:	e7f3      	b.n	1a0016f8 <CDC_ep0_override_hdlr+0x34>
			pCtrl->EP0Data.pData -= pCtrl->SetupPacket.wLength;
1a001710:	f8b4 317a 	ldrh.w	r3, [r4, #378]	; 0x17a
1a001714:	f8d4 212c 	ldr.w	r2, [r4, #300]	; 0x12c
1a001718:	1ad2      	subs	r2, r2, r3
1a00171a:	f8c4 212c 	str.w	r2, [r4, #300]	; 0x12c
			ret = setReq(pCdcCtrl, &pCtrl->SetupPacket, &pCtrl->EP0Data.pData,
1a00171e:	f504 7296 	add.w	r2, r4, #300	; 0x12c
1a001722:	f504 71ba 	add.w	r1, r4, #372	; 0x174
1a001726:	47a8      	blx	r5
			if ( ret == LPC_OK) {
1a001728:	4605      	mov	r5, r0
1a00172a:	2800      	cmp	r0, #0
1a00172c:	d1d5      	bne.n	1a0016da <CDC_ep0_override_hdlr+0x16>
				USBD_API->core->StatusInStage(pCtrl);
1a00172e:	4b05      	ldr	r3, [pc, #20]	; (1a001744 <CDC_ep0_override_hdlr+0x80>)
1a001730:	681b      	ldr	r3, [r3, #0]
1a001732:	685b      	ldr	r3, [r3, #4]
1a001734:	695b      	ldr	r3, [r3, #20]
1a001736:	4620      	mov	r0, r4
1a001738:	4798      	blx	r3
1a00173a:	e7ce      	b.n	1a0016da <CDC_ep0_override_hdlr+0x16>
1a00173c:	10000114 	.word	0x10000114
1a001740:	00040002 	.word	0x00040002
1a001744:	1000015c 	.word	0x1000015c

1a001748 <UCOM_bulk_hdlr>:
{
1a001748:	b570      	push	{r4, r5, r6, lr}
1a00174a:	460c      	mov	r4, r1
	switch (event) {
1a00174c:	2a03      	cmp	r2, #3
1a00174e:	d005      	beq.n	1a00175c <UCOM_bulk_hdlr+0x14>
1a001750:	2a04      	cmp	r2, #4
1a001752:	d022      	beq.n	1a00179a <UCOM_bulk_hdlr+0x52>
1a001754:	2a02      	cmp	r2, #2
1a001756:	d02f      	beq.n	1a0017b8 <UCOM_bulk_hdlr+0x70>
}
1a001758:	2000      	movs	r0, #0
1a00175a:	bd70      	pop	{r4, r5, r6, pc}
		if (pUcom->rxBuf_uartIndex < pUcom->rxBuf_usbIndex) {
1a00175c:	7d0a      	ldrb	r2, [r1, #20]
1a00175e:	7d4b      	ldrb	r3, [r1, #21]
1a001760:	429a      	cmp	r2, r3
1a001762:	d215      	bcs.n	1a001790 <UCOM_bulk_hdlr+0x48>
			count = UCOM_RXBUF_SZ - pUcom->rxBuf_usbIndex;
1a001764:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
		if (count) {
1a001768:	b1a3      	cbz	r3, 1a001794 <UCOM_bulk_hdlr+0x4c>
			pUcom->usbTxBusy = 1;
1a00176a:	2201      	movs	r2, #1
1a00176c:	75a2      	strb	r2, [r4, #22]
			count = USBD_API->hw->WriteEP(pUcom->hUsb, USB_CDC_IN_EP, &pUcom->rxBuf[g_uCOM.rxBuf_usbIndex], count);
1a00176e:	4a23      	ldr	r2, [pc, #140]	; (1a0017fc <UCOM_bulk_hdlr+0xb4>)
1a001770:	6812      	ldr	r2, [r2, #0]
1a001772:	6812      	ldr	r2, [r2, #0]
1a001774:	6d16      	ldr	r6, [r2, #80]	; 0x50
1a001776:	68a1      	ldr	r1, [r4, #8]
1a001778:	4d21      	ldr	r5, [pc, #132]	; (1a001800 <UCOM_bulk_hdlr+0xb8>)
1a00177a:	7d6a      	ldrb	r2, [r5, #21]
1a00177c:	440a      	add	r2, r1
1a00177e:	2181      	movs	r1, #129	; 0x81
1a001780:	6820      	ldr	r0, [r4, #0]
1a001782:	47b0      	blx	r6
			g_uCOM.rxBuf_usbIndex = (g_uCOM.rxBuf_usbIndex + count) & (UCOM_RXBUF_SZ - 1);
1a001784:	7d6b      	ldrb	r3, [r5, #21]
1a001786:	4418      	add	r0, r3
1a001788:	f000 003f 	and.w	r0, r0, #63	; 0x3f
1a00178c:	7568      	strb	r0, [r5, #21]
1a00178e:	e7e3      	b.n	1a001758 <UCOM_bulk_hdlr+0x10>
			count = pUcom->rxBuf_uartIndex - pUcom->rxBuf_usbIndex;
1a001790:	1ad3      	subs	r3, r2, r3
1a001792:	e7e9      	b.n	1a001768 <UCOM_bulk_hdlr+0x20>
			pUcom->usbTxBusy = 0;
1a001794:	2300      	movs	r3, #0
1a001796:	75a3      	strb	r3, [r4, #22]
1a001798:	e7de      	b.n	1a001758 <UCOM_bulk_hdlr+0x10>
		if (pUcom->uartTxBusy == 0) {
1a00179a:	7dcb      	ldrb	r3, [r1, #23]
1a00179c:	2b00      	cmp	r3, #0
1a00179e:	d1db      	bne.n	1a001758 <UCOM_bulk_hdlr+0x10>
			USBD_API->hw->ReadReqEP(hUsb, USB_CDC_OUT_EP, &pUcom->txBuf[0], UCOM_TXBUF_SZ);
1a0017a0:	4b16      	ldr	r3, [pc, #88]	; (1a0017fc <UCOM_bulk_hdlr+0xb4>)
1a0017a2:	681b      	ldr	r3, [r3, #0]
1a0017a4:	681b      	ldr	r3, [r3, #0]
1a0017a6:	6c9d      	ldr	r5, [r3, #72]	; 0x48
1a0017a8:	f44f 7300 	mov.w	r3, #512	; 0x200
1a0017ac:	68ca      	ldr	r2, [r1, #12]
1a0017ae:	2101      	movs	r1, #1
1a0017b0:	47a8      	blx	r5
			pUcom->uartTxBusy = 1;
1a0017b2:	2301      	movs	r3, #1
1a0017b4:	75e3      	strb	r3, [r4, #23]
1a0017b6:	e7cf      	b.n	1a001758 <UCOM_bulk_hdlr+0x10>
	return pUART->IER;
1a0017b8:	4b12      	ldr	r3, [pc, #72]	; (1a001804 <UCOM_bulk_hdlr+0xbc>)
1a0017ba:	685b      	ldr	r3, [r3, #4]
		if ((Chip_UART_GetIntsEnabled(LPC_UART) & UART_IER_THREINT) == 0) {
1a0017bc:	f013 0f02 	tst.w	r3, #2
1a0017c0:	d1ca      	bne.n	1a001758 <UCOM_bulk_hdlr+0x10>
			pUcom->txBuf_count = USBD_API->hw->ReadEP(hUsb, USB_CDC_OUT_EP, &pUcom->txBuf[0]);
1a0017c2:	4b0e      	ldr	r3, [pc, #56]	; (1a0017fc <UCOM_bulk_hdlr+0xb4>)
1a0017c4:	681b      	ldr	r3, [r3, #0]
1a0017c6:	681b      	ldr	r3, [r3, #0]
1a0017c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
1a0017ca:	68ca      	ldr	r2, [r1, #12]
1a0017cc:	2101      	movs	r1, #1
1a0017ce:	4798      	blx	r3
1a0017d0:	b202      	sxth	r2, r0
1a0017d2:	8262      	strh	r2, [r4, #18]
			pUcom->txBuf_uartIndex = 0;
1a0017d4:	2300      	movs	r3, #0
1a0017d6:	8223      	strh	r3, [r4, #16]
													&pUcom->txBuf[g_uCOM.txBuf_uartIndex],
1a0017d8:	68e1      	ldr	r1, [r4, #12]
1a0017da:	4b09      	ldr	r3, [pc, #36]	; (1a001800 <UCOM_bulk_hdlr+0xb8>)
1a0017dc:	8a1b      	ldrh	r3, [r3, #16]
			pUcom->txBuf_uartIndex = Chip_UART_Send(LPC_UART,
1a0017de:	4d09      	ldr	r5, [pc, #36]	; (1a001804 <UCOM_bulk_hdlr+0xbc>)
1a0017e0:	4419      	add	r1, r3
1a0017e2:	4628      	mov	r0, r5
1a0017e4:	f7ff fce6 	bl	1a0011b4 <Chip_UART_Send>
1a0017e8:	b280      	uxth	r0, r0
1a0017ea:	8220      	strh	r0, [r4, #16]
			pUcom->txBuf_count -= pUcom->txBuf_uartIndex;
1a0017ec:	8a63      	ldrh	r3, [r4, #18]
1a0017ee:	1a1b      	subs	r3, r3, r0
1a0017f0:	8263      	strh	r3, [r4, #18]
	pUART->IER |= intMask;
1a0017f2:	686b      	ldr	r3, [r5, #4]
1a0017f4:	f043 0302 	orr.w	r3, r3, #2
1a0017f8:	606b      	str	r3, [r5, #4]
1a0017fa:	e7ad      	b.n	1a001758 <UCOM_bulk_hdlr+0x10>
1a0017fc:	1000015c 	.word	0x1000015c
1a001800:	10000118 	.word	0x10000118
1a001804:	400c1000 	.word	0x400c1000

1a001808 <UCOM_SetLineCode>:
{
1a001808:	b510      	push	{r4, lr}
	switch (line_coding->bDataBits) {
1a00180a:	798b      	ldrb	r3, [r1, #6]
1a00180c:	2b06      	cmp	r3, #6
1a00180e:	d011      	beq.n	1a001834 <UCOM_SetLineCode+0x2c>
1a001810:	2b07      	cmp	r3, #7
1a001812:	d011      	beq.n	1a001838 <UCOM_SetLineCode+0x30>
1a001814:	2b05      	cmp	r3, #5
1a001816:	d011      	beq.n	1a00183c <UCOM_SetLineCode+0x34>
		config_data |= UART_LCR_WLEN8;
1a001818:	2403      	movs	r4, #3
	switch (line_coding->bCharFormat) {
1a00181a:	790a      	ldrb	r2, [r1, #4]
1a00181c:	2a01      	cmp	r2, #1
1a00181e:	d00f      	beq.n	1a001840 <UCOM_SetLineCode+0x38>
1a001820:	2a02      	cmp	r2, #2
1a001822:	d012      	beq.n	1a00184a <UCOM_SetLineCode+0x42>
	switch (line_coding->bParityType) {
1a001824:	794b      	ldrb	r3, [r1, #5]
1a001826:	3b01      	subs	r3, #1
1a001828:	2b03      	cmp	r3, #3
1a00182a:	d815      	bhi.n	1a001858 <UCOM_SetLineCode+0x50>
1a00182c:	e8df f003 	tbb	[pc, r3]
1a001830:	221f1c12 	.word	0x221f1c12
		config_data |= UART_LCR_WLEN6;
1a001834:	2401      	movs	r4, #1
1a001836:	e7f0      	b.n	1a00181a <UCOM_SetLineCode+0x12>
		config_data |= UART_LCR_WLEN7;
1a001838:	2402      	movs	r4, #2
1a00183a:	e7ee      	b.n	1a00181a <UCOM_SetLineCode+0x12>
		config_data |= UART_LCR_WLEN5;
1a00183c:	2400      	movs	r4, #0
1a00183e:	e7ec      	b.n	1a00181a <UCOM_SetLineCode+0x12>
		if (line_coding->bDataBits == 5) {
1a001840:	2b05      	cmp	r3, #5
1a001842:	d11e      	bne.n	1a001882 <UCOM_SetLineCode+0x7a>
			config_data |= UART_LCR_SBS_2BIT;
1a001844:	f044 0404 	orr.w	r4, r4, #4
		break;
1a001848:	e7ec      	b.n	1a001824 <UCOM_SetLineCode+0x1c>
		if (line_coding->bDataBits != 5) {
1a00184a:	2b05      	cmp	r3, #5
1a00184c:	d01b      	beq.n	1a001886 <UCOM_SetLineCode+0x7e>
			config_data |= UART_LCR_SBS_2BIT;
1a00184e:	f044 0404 	orr.w	r4, r4, #4
		break;
1a001852:	e7e7      	b.n	1a001824 <UCOM_SetLineCode+0x1c>
		config_data |= (UART_LCR_PARITY_EN | UART_LCR_PARITY_ODD);
1a001854:	f044 0408 	orr.w	r4, r4, #8
	if (line_coding->dwDTERate < 3125000) {
1a001858:	6809      	ldr	r1, [r1, #0]
1a00185a:	4b0c      	ldr	r3, [pc, #48]	; (1a00188c <UCOM_SetLineCode+0x84>)
1a00185c:	4299      	cmp	r1, r3
1a00185e:	d90c      	bls.n	1a00187a <UCOM_SetLineCode+0x72>
	pUART->LCR = config;
1a001860:	4b0b      	ldr	r3, [pc, #44]	; (1a001890 <UCOM_SetLineCode+0x88>)
1a001862:	60dc      	str	r4, [r3, #12]
	return LPC_OK;
1a001864:	2000      	movs	r0, #0
}
1a001866:	bd10      	pop	{r4, pc}
		config_data |= (UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN);
1a001868:	f044 0418 	orr.w	r4, r4, #24
		break;
1a00186c:	e7f4      	b.n	1a001858 <UCOM_SetLineCode+0x50>
		config_data |= (UART_LCR_PARITY_EN | UART_LCR_PARITY_F_1);
1a00186e:	f044 0428 	orr.w	r4, r4, #40	; 0x28
		break;
1a001872:	e7f1      	b.n	1a001858 <UCOM_SetLineCode+0x50>
		config_data |= (UART_LCR_PARITY_EN | UART_LCR_PARITY_F_0);
1a001874:	f044 0438 	orr.w	r4, r4, #56	; 0x38
		break;
1a001878:	e7ee      	b.n	1a001858 <UCOM_SetLineCode+0x50>
		Chip_UART_SetBaud(LPC_UART, line_coding->dwDTERate);
1a00187a:	4805      	ldr	r0, [pc, #20]	; (1a001890 <UCOM_SetLineCode+0x88>)
1a00187c:	f7ff fcae 	bl	1a0011dc <Chip_UART_SetBaud>
1a001880:	e7ee      	b.n	1a001860 <UCOM_SetLineCode+0x58>
			return ERR_USBD_UNHANDLED;
1a001882:	4804      	ldr	r0, [pc, #16]	; (1a001894 <UCOM_SetLineCode+0x8c>)
1a001884:	e7ef      	b.n	1a001866 <UCOM_SetLineCode+0x5e>
			return ERR_USBD_UNHANDLED;
1a001886:	4803      	ldr	r0, [pc, #12]	; (1a001894 <UCOM_SetLineCode+0x8c>)
1a001888:	e7ed      	b.n	1a001866 <UCOM_SetLineCode+0x5e>
1a00188a:	bf00      	nop
1a00188c:	002faf07 	.word	0x002faf07
1a001890:	400c1000 	.word	0x400c1000
1a001894:	00040002 	.word	0x00040002

1a001898 <cdcUartLpcInit>:
//
//}

/* UART to USB com port init routine */
ErrorCode_t cdcUartLpcInit( USBD_HANDLE_T hUsb, USB_CORE_DESCS_T *pDesc,
                         USBD_API_INIT_PARAM_T *pUsbParam ){
1a001898:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00189a:	b093      	sub	sp, #76	; 0x4c
1a00189c:	4604      	mov	r4, r0
1a00189e:	460f      	mov	r7, r1
1a0018a0:	4615      	mov	r5, r2
	uint32_t ep_indx;
	USB_CDC_CTRL_T *pCDC;
	USB_CORE_CTRL_T *pCtrl = (USB_CORE_CTRL_T *) hUsb;

	/* Store USB stack handle for future use. */
	g_uCOM.hUsb = hUsb;
1a0018a2:	4e2e      	ldr	r6, [pc, #184]	; (1a00195c <cdcUartLpcInit+0xc4>)
1a0018a4:	f846 0b04 	str.w	r0, [r6], #4
	/* Initi CDC params */
	memset((void *) &cdc_param, 0, sizeof(USBD_CDC_INIT_PARAM_T));
1a0018a8:	2248      	movs	r2, #72	; 0x48
1a0018aa:	2100      	movs	r1, #0
1a0018ac:	4668      	mov	r0, sp
1a0018ae:	f000 fdda 	bl	1a002466 <memset>
	cdc_param.mem_base = pUsbParam->mem_base;
1a0018b2:	686b      	ldr	r3, [r5, #4]
1a0018b4:	9300      	str	r3, [sp, #0]
	cdc_param.mem_size = pUsbParam->mem_size;
1a0018b6:	68ab      	ldr	r3, [r5, #8]
1a0018b8:	9301      	str	r3, [sp, #4]
	cdc_param.cif_intf_desc = (uint8_t *) find_IntfDesc(pDesc->high_speed_desc, CDC_COMMUNICATION_INTERFACE_CLASS);
1a0018ba:	2102      	movs	r1, #2
1a0018bc:	68f8      	ldr	r0, [r7, #12]
1a0018be:	f000 f9c9 	bl	1a001c54 <find_IntfDesc>
1a0018c2:	9002      	str	r0, [sp, #8]
	cdc_param.dif_intf_desc = (uint8_t *) find_IntfDesc(pDesc->high_speed_desc, CDC_DATA_INTERFACE_CLASS);
1a0018c4:	210a      	movs	r1, #10
1a0018c6:	68f8      	ldr	r0, [r7, #12]
1a0018c8:	f000 f9c4 	bl	1a001c54 <find_IntfDesc>
1a0018cc:	9003      	str	r0, [sp, #12]
	cdc_param.SetLineCode = UCOM_SetLineCode;
1a0018ce:	4b24      	ldr	r3, [pc, #144]	; (1a001960 <cdcUartLpcInit+0xc8>)
1a0018d0:	930f      	str	r3, [sp, #60]	; 0x3c

	/* Init CDC interface */
	ret = USBD_API->cdc->init(hUsb, &cdc_param, &g_uCOM.hCdc);
1a0018d2:	4b24      	ldr	r3, [pc, #144]	; (1a001964 <cdcUartLpcInit+0xcc>)
1a0018d4:	681b      	ldr	r3, [r3, #0]
1a0018d6:	695b      	ldr	r3, [r3, #20]
1a0018d8:	685b      	ldr	r3, [r3, #4]
1a0018da:	4632      	mov	r2, r6
1a0018dc:	4669      	mov	r1, sp
1a0018de:	4620      	mov	r0, r4
1a0018e0:	4798      	blx	r3

	if (ret == LPC_OK) {
1a0018e2:	4603      	mov	r3, r0
1a0018e4:	2800      	cmp	r0, #0
1a0018e6:	d135      	bne.n	1a001954 <cdcUartLpcInit+0xbc>
		/* allocate transfer buffers */
		g_uCOM.txBuf = (uint8_t *) cdc_param.mem_base;
1a0018e8:	9a00      	ldr	r2, [sp, #0]
1a0018ea:	4b1c      	ldr	r3, [pc, #112]	; (1a00195c <cdcUartLpcInit+0xc4>)
1a0018ec:	60da      	str	r2, [r3, #12]
		cdc_param.mem_base += UCOM_TXBUF_SZ;
1a0018ee:	f502 7100 	add.w	r1, r2, #512	; 0x200
		cdc_param.mem_size -= UCOM_TXBUF_SZ;
		g_uCOM.rxBuf = (uint8_t *) cdc_param.mem_base;
1a0018f2:	6099      	str	r1, [r3, #8]
		cdc_param.mem_base += UCOM_RXBUF_SZ;
1a0018f4:	f502 7210 	add.w	r2, r2, #576	; 0x240
1a0018f8:	9200      	str	r2, [sp, #0]
		cdc_param.mem_size -= UCOM_RXBUF_SZ;
1a0018fa:	9a01      	ldr	r2, [sp, #4]
1a0018fc:	f5a2 7210 	sub.w	r2, r2, #576	; 0x240
1a001900:	9201      	str	r2, [sp, #4]

		/* register endpoint interrupt handler */
		ep_indx = (((USB_CDC_IN_EP & 0x0F) << 1) + 1);
		ret = USBD_API->core->RegisterEpHandler(hUsb, ep_indx, UCOM_bulk_hdlr, &g_uCOM);
1a001902:	4a18      	ldr	r2, [pc, #96]	; (1a001964 <cdcUartLpcInit+0xcc>)
1a001904:	6812      	ldr	r2, [r2, #0]
1a001906:	6852      	ldr	r2, [r2, #4]
1a001908:	6856      	ldr	r6, [r2, #4]
1a00190a:	4a17      	ldr	r2, [pc, #92]	; (1a001968 <cdcUartLpcInit+0xd0>)
1a00190c:	2103      	movs	r1, #3
1a00190e:	4620      	mov	r0, r4
1a001910:	47b0      	blx	r6

		if (ret == LPC_OK) {
1a001912:	4603      	mov	r3, r0
1a001914:	b9d0      	cbnz	r0, 1a00194c <cdcUartLpcInit+0xb4>
			    sending proper handshake after processing SET_REQUEST messages targeted
			    to CDC interfaces. The workaround will send the proper handshake to host.
			    Due to this bug some terminal applications such as Putty have problem
			    establishing connection.
			 */
			g_defaultCdcHdlr = pCtrl->ep0_hdlr_cb[pCtrl->num_ep0_hdlrs - 1];
1a001916:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
1a00191a:	332d      	adds	r3, #45	; 0x2d
1a00191c:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
1a001920:	4a12      	ldr	r2, [pc, #72]	; (1a00196c <cdcUartLpcInit+0xd4>)
1a001922:	6011      	str	r1, [r2, #0]
			/* store the default CDC handler and replace it with ours */
			pCtrl->ep0_hdlr_cb[pCtrl->num_ep0_hdlrs - 1] = CDC_ep0_override_hdlr;
1a001924:	4a12      	ldr	r2, [pc, #72]	; (1a001970 <cdcUartLpcInit+0xd8>)
1a001926:	f844 2023 	str.w	r2, [r4, r3, lsl #2]

			/* register endpoint interrupt handler */
			ep_indx = ((USB_CDC_OUT_EP & 0x0F) << 1);
			ret = USBD_API->core->RegisterEpHandler(hUsb, ep_indx, UCOM_bulk_hdlr, &g_uCOM);
1a00192a:	4b0e      	ldr	r3, [pc, #56]	; (1a001964 <cdcUartLpcInit+0xcc>)
1a00192c:	681b      	ldr	r3, [r3, #0]
1a00192e:	685b      	ldr	r3, [r3, #4]
1a001930:	685f      	ldr	r7, [r3, #4]
1a001932:	4e0a      	ldr	r6, [pc, #40]	; (1a00195c <cdcUartLpcInit+0xc4>)
1a001934:	4633      	mov	r3, r6
1a001936:	4a0c      	ldr	r2, [pc, #48]	; (1a001968 <cdcUartLpcInit+0xd0>)
1a001938:	2102      	movs	r1, #2
1a00193a:	4620      	mov	r0, r4
1a00193c:	47b8      	blx	r7
1a00193e:	4603      	mov	r3, r0
         
//			UCOM_UartInit();


			/* Set the line coding values as per UART Settings */
			pCDC = (USB_CDC_CTRL_T *) g_uCOM.hCdc;
1a001940:	6872      	ldr	r2, [r6, #4]
			pCDC->line_coding.dwDTERate = 115200;
1a001942:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a001946:	6111      	str	r1, [r2, #16]
			pCDC->line_coding.bDataBits = 8;
1a001948:	2108      	movs	r1, #8
1a00194a:	7591      	strb	r1, [r2, #22]
		}

		/* update mem_base and size variables for cascading calls. */
		pUsbParam->mem_base = cdc_param.mem_base;
1a00194c:	9a00      	ldr	r2, [sp, #0]
1a00194e:	606a      	str	r2, [r5, #4]
		pUsbParam->mem_size = cdc_param.mem_size;
1a001950:	9a01      	ldr	r2, [sp, #4]
1a001952:	60aa      	str	r2, [r5, #8]
	}

	return ret;
}
1a001954:	4618      	mov	r0, r3
1a001956:	b013      	add	sp, #76	; 0x4c
1a001958:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a00195a:	bf00      	nop
1a00195c:	10000118 	.word	0x10000118
1a001960:	1a001809 	.word	0x1a001809
1a001964:	1000015c 	.word	0x1000015c
1a001968:	1a001749 	.word	0x1a001749
1a00196c:	10000114 	.word	0x10000114
1a001970:	1a0016c5 	.word	0x1a0016c5

1a001974 <Keyboard_EpIN_Hdlr>:

/* HID interrupt IN endpoint handler */
static ErrorCode_t Keyboard_EpIN_Hdlr( USBD_HANDLE_T hUsb,
                                       void *data,
                                       uint32_t event ){
   switch (event) {
1a001974:	2a03      	cmp	r2, #3
1a001976:	d001      	beq.n	1a00197c <Keyboard_EpIN_Hdlr+0x8>
      case USB_EVT_IN:
         g_keyBoard.tx_busy = 0;
         break;
   }
   return LPC_OK;
}
1a001978:	2000      	movs	r0, #0
1a00197a:	4770      	bx	lr
         g_keyBoard.tx_busy = 0;
1a00197c:	4b01      	ldr	r3, [pc, #4]	; (1a001984 <Keyboard_EpIN_Hdlr+0x10>)
1a00197e:	2200      	movs	r2, #0
1a001980:	731a      	strb	r2, [r3, #12]
         break;
1a001982:	e7f9      	b.n	1a001978 <Keyboard_EpIN_Hdlr+0x4>
1a001984:	10000130 	.word	0x10000130

1a001988 <Keyboard_UpdateReport>:
static void Keyboard_UpdateReport(void){
1a001988:	b508      	push	{r3, lr}
   HID_KEYBOARD_CLEAR_REPORT(&g_keyBoard.report[0]);
1a00198a:	4a05      	ldr	r2, [pc, #20]	; (1a0019a0 <Keyboard_UpdateReport+0x18>)
1a00198c:	2300      	movs	r3, #0
1a00198e:	6053      	str	r3, [r2, #4]
1a001990:	6093      	str	r3, [r2, #8]
   if( (keyboardCheckKeysFunction != NULL) ) {
1a001992:	4b04      	ldr	r3, [pc, #16]	; (1a0019a4 <Keyboard_UpdateReport+0x1c>)
1a001994:	681b      	ldr	r3, [r3, #0]
1a001996:	b10b      	cbz	r3, 1a00199c <Keyboard_UpdateReport+0x14>
      (* keyboardCheckKeysFunction )( NULL );
1a001998:	2000      	movs	r0, #0
1a00199a:	4798      	blx	r3
}
1a00199c:	bd08      	pop	{r3, pc}
1a00199e:	bf00      	nop
1a0019a0:	10000130 	.word	0x10000130
1a0019a4:	10000140 	.word	0x10000140

1a0019a8 <Keyboard_SetReport>:
   if (length == 0) {
1a0019a8:	b1d3      	cbz	r3, 1a0019e0 <Keyboard_SetReport+0x38>
                                       uint16_t length){
1a0019aa:	b508      	push	{r3, lr}
   switch (pSetup->wValue.WB.H){
1a0019ac:	78cb      	ldrb	r3, [r1, #3]
1a0019ae:	2b02      	cmp	r3, #2
1a0019b0:	d005      	beq.n	1a0019be <Keyboard_SetReport+0x16>
1a0019b2:	2b03      	cmp	r3, #3
1a0019b4:	d016      	beq.n	1a0019e4 <Keyboard_SetReport+0x3c>
1a0019b6:	2b01      	cmp	r3, #1
1a0019b8:	d016      	beq.n	1a0019e8 <Keyboard_SetReport+0x40>
   return LPC_OK;
1a0019ba:	2000      	movs	r0, #0
}
1a0019bc:	bd08      	pop	{r3, pc}
         if (**pBuffer & 0x01) {
1a0019be:	6813      	ldr	r3, [r2, #0]
1a0019c0:	781b      	ldrb	r3, [r3, #0]
1a0019c2:	f013 0f01 	tst.w	r3, #1
1a0019c6:	d005      	beq.n	1a0019d4 <Keyboard_SetReport+0x2c>
            gpioWrite( LED, ON );
1a0019c8:	2101      	movs	r1, #1
1a0019ca:	202a      	movs	r0, #42	; 0x2a
1a0019cc:	f7ff fdb0 	bl	1a001530 <gpioWrite>
   return LPC_OK;
1a0019d0:	2000      	movs	r0, #0
1a0019d2:	e7f3      	b.n	1a0019bc <Keyboard_SetReport+0x14>
            gpioWrite( LED, OFF);
1a0019d4:	2100      	movs	r1, #0
1a0019d6:	202a      	movs	r0, #42	; 0x2a
1a0019d8:	f7ff fdaa 	bl	1a001530 <gpioWrite>
   return LPC_OK;
1a0019dc:	2000      	movs	r0, #0
1a0019de:	e7ed      	b.n	1a0019bc <Keyboard_SetReport+0x14>
      return LPC_OK;
1a0019e0:	2000      	movs	r0, #0
}
1a0019e2:	4770      	bx	lr
         return ERR_USBD_STALL;
1a0019e4:	4801      	ldr	r0, [pc, #4]	; (1a0019ec <Keyboard_SetReport+0x44>)
1a0019e6:	e7e9      	b.n	1a0019bc <Keyboard_SetReport+0x14>
1a0019e8:	4800      	ldr	r0, [pc, #0]	; (1a0019ec <Keyboard_SetReport+0x44>)
1a0019ea:	e7e7      	b.n	1a0019bc <Keyboard_SetReport+0x14>
1a0019ec:	00040003 	.word	0x00040003

1a0019f0 <Keyboard_GetReport>:
                                       uint16_t *plength ){
1a0019f0:	b538      	push	{r3, r4, r5, lr}
	switch (pSetup->wValue.WB.H) {
1a0019f2:	78c9      	ldrb	r1, [r1, #3]
1a0019f4:	2901      	cmp	r1, #1
1a0019f6:	d005      	beq.n	1a001a04 <Keyboard_GetReport+0x14>
1a0019f8:	b24b      	sxtb	r3, r1
1a0019fa:	b183      	cbz	r3, 1a001a1e <Keyboard_GetReport+0x2e>
1a0019fc:	2903      	cmp	r1, #3
1a0019fe:	d810      	bhi.n	1a001a22 <Keyboard_GetReport+0x32>
         return ERR_USBD_STALL;
1a001a00:	4809      	ldr	r0, [pc, #36]	; (1a001a28 <Keyboard_GetReport+0x38>)
}
1a001a02:	bd38      	pop	{r3, r4, r5, pc}
1a001a04:	461c      	mov	r4, r3
1a001a06:	4615      	mov	r5, r2
         Keyboard_UpdateReport();
1a001a08:	f7ff ffbe 	bl	1a001988 <Keyboard_UpdateReport>
         memcpy(*pBuffer, &g_keyBoard.report[0], KEYBOARD_REPORT_SIZE);
1a001a0c:	682a      	ldr	r2, [r5, #0]
1a001a0e:	4b07      	ldr	r3, [pc, #28]	; (1a001a2c <Keyboard_GetReport+0x3c>)
1a001a10:	cb03      	ldmia	r3!, {r0, r1}
1a001a12:	6010      	str	r0, [r2, #0]
1a001a14:	6051      	str	r1, [r2, #4]
         *plength = KEYBOARD_REPORT_SIZE;
1a001a16:	2308      	movs	r3, #8
1a001a18:	8023      	strh	r3, [r4, #0]
	return LPC_OK;
1a001a1a:	2000      	movs	r0, #0
      break;
1a001a1c:	e7f1      	b.n	1a001a02 <Keyboard_GetReport+0x12>
	return LPC_OK;
1a001a1e:	2000      	movs	r0, #0
1a001a20:	e7ef      	b.n	1a001a02 <Keyboard_GetReport+0x12>
1a001a22:	2000      	movs	r0, #0
1a001a24:	e7ed      	b.n	1a001a02 <Keyboard_GetReport+0x12>
1a001a26:	bf00      	nop
1a001a28:	00040003 	.word	0x00040003
1a001a2c:	10000134 	.word	0x10000134

1a001a30 <usbDeviceKeyboardInit>:
   USBD_HID_INIT_PARAM_T hid_param;
   USB_HID_REPORT_T reports_data[1];
   ErrorCode_t ret = LPC_OK;

   /* Do a quick check of if the interface descriptor passed is the right one. */
   if( (pIntfDesc == 0) || (pIntfDesc->bInterfaceClass
1a001a30:	2900      	cmp	r1, #0
1a001a32:	d036      	beq.n	1a001aa2 <usbDeviceKeyboardInit+0x72>
{
1a001a34:	b5f0      	push	{r4, r5, r6, r7, lr}
1a001a36:	b091      	sub	sp, #68	; 0x44
1a001a38:	460c      	mov	r4, r1
   if( (pIntfDesc == 0) || (pIntfDesc->bInterfaceClass
1a001a3a:	7949      	ldrb	r1, [r1, #5]
1a001a3c:	2903      	cmp	r1, #3
1a001a3e:	d133      	bne.n	1a001aa8 <usbDeviceKeyboardInit+0x78>
1a001a40:	461f      	mov	r7, r3
1a001a42:	4616      	mov	r6, r2
1a001a44:	4605      	mov	r5, r0
       != USB_DEVICE_CLASS_HUMAN_INTERFACE)) {
      return ERR_FAILED;
   }

   /* Init HID params */
   memset((void *) &hid_param, 0, sizeof(USBD_HID_INIT_PARAM_T));
1a001a46:	2238      	movs	r2, #56	; 0x38
1a001a48:	2100      	movs	r1, #0
1a001a4a:	a802      	add	r0, sp, #8
1a001a4c:	f000 fd0b 	bl	1a002466 <memset>
   hid_param.max_reports = 1;
1a001a50:	2301      	movs	r3, #1
1a001a52:	f88d 3010 	strb.w	r3, [sp, #16]
   hid_param.mem_base = *mem_base;
1a001a56:	6833      	ldr	r3, [r6, #0]
1a001a58:	9302      	str	r3, [sp, #8]
   hid_param.mem_size = *mem_size;
1a001a5a:	683b      	ldr	r3, [r7, #0]
1a001a5c:	9303      	str	r3, [sp, #12]
   hid_param.intf_desc = (uint8_t *) pIntfDesc;
1a001a5e:	9405      	str	r4, [sp, #20]

   /* user defined functions */
   hid_param.HID_GetReport = Keyboard_GetReport;
1a001a60:	4b13      	ldr	r3, [pc, #76]	; (1a001ab0 <usbDeviceKeyboardInit+0x80>)
1a001a62:	9307      	str	r3, [sp, #28]
   hid_param.HID_SetReport = Keyboard_SetReport;
1a001a64:	4b13      	ldr	r3, [pc, #76]	; (1a001ab4 <usbDeviceKeyboardInit+0x84>)
1a001a66:	9308      	str	r3, [sp, #32]
   hid_param.HID_EpIn_Hdlr  = Keyboard_EpIN_Hdlr;
1a001a68:	4b13      	ldr	r3, [pc, #76]	; (1a001ab8 <usbDeviceKeyboardInit+0x88>)
1a001a6a:	930c      	str	r3, [sp, #48]	; 0x30

   /* Init reports_data */
   reports_data[0].len = Keyboard_ReportDescSize;
1a001a6c:	4b13      	ldr	r3, [pc, #76]	; (1a001abc <usbDeviceKeyboardInit+0x8c>)
1a001a6e:	881b      	ldrh	r3, [r3, #0]
1a001a70:	f8ad 3000 	strh.w	r3, [sp]
   reports_data[0].idle_time = 0;
1a001a74:	2400      	movs	r4, #0
1a001a76:	f88d 4002 	strb.w	r4, [sp, #2]
   reports_data[0].desc = (uint8_t *) &Keyboard_ReportDescriptor[0];
1a001a7a:	4b11      	ldr	r3, [pc, #68]	; (1a001ac0 <usbDeviceKeyboardInit+0x90>)
1a001a7c:	9301      	str	r3, [sp, #4]
   hid_param.report_data  = reports_data;
1a001a7e:	f8cd d018 	str.w	sp, [sp, #24]

   ret = USBD_API->hid->init(hUsb, &hid_param);
1a001a82:	4b10      	ldr	r3, [pc, #64]	; (1a001ac4 <usbDeviceKeyboardInit+0x94>)
1a001a84:	681b      	ldr	r3, [r3, #0]
1a001a86:	691b      	ldr	r3, [r3, #16]
1a001a88:	685b      	ldr	r3, [r3, #4]
1a001a8a:	a902      	add	r1, sp, #8
1a001a8c:	4628      	mov	r0, r5
1a001a8e:	4798      	blx	r3

   /* update memory variables */
   *mem_base = hid_param.mem_base;
1a001a90:	9b02      	ldr	r3, [sp, #8]
1a001a92:	6033      	str	r3, [r6, #0]
   *mem_size = hid_param.mem_size;
1a001a94:	9b03      	ldr	r3, [sp, #12]
1a001a96:	603b      	str	r3, [r7, #0]

   /* store stack handle for later use. */
   g_keyBoard.hUsb = hUsb;
1a001a98:	4b0b      	ldr	r3, [pc, #44]	; (1a001ac8 <usbDeviceKeyboardInit+0x98>)
1a001a9a:	601d      	str	r5, [r3, #0]
   g_keyBoard.tx_busy = 0;
1a001a9c:	731c      	strb	r4, [r3, #12]

   return ret;
}
1a001a9e:	b011      	add	sp, #68	; 0x44
1a001aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return ERR_FAILED;
1a001aa2:	f04f 30ff 	mov.w	r0, #4294967295
}
1a001aa6:	4770      	bx	lr
      return ERR_FAILED;
1a001aa8:	f04f 30ff 	mov.w	r0, #4294967295
1a001aac:	e7f7      	b.n	1a001a9e <usbDeviceKeyboardInit+0x6e>
1a001aae:	bf00      	nop
1a001ab0:	1a0019f1 	.word	0x1a0019f1
1a001ab4:	1a0019a9 	.word	0x1a0019a9
1a001ab8:	1a001975 	.word	0x1a001975
1a001abc:	1a00299c 	.word	0x1a00299c
1a001ac0:	1a0029a0 	.word	0x1a0029a0
1a001ac4:	1000015c 	.word	0x1000015c
1a001ac8:	10000130 	.word	0x10000130

1a001acc <usbDeviceKeyboardTasks>:

/* Keyboard tasks */
void usbDeviceKeyboardTasks(void)
{
1a001acc:	b538      	push	{r3, r4, r5, lr}
	/* check device is configured before sending report. */
	if ( USB_IsConfigured(g_keyBoard.hUsb)) {
1a001ace:	4b0e      	ldr	r3, [pc, #56]	; (1a001b08 <usbDeviceKeyboardTasks+0x3c>)
1a001ad0:	681b      	ldr	r3, [r3, #0]
}

static INLINE bool USB_IsConfigured(USBD_HANDLE_T hUsb)
{
    USB_CORE_CTRL_T* pCtrl = (USB_CORE_CTRL_T*) hUsb;
    return (bool) (pCtrl->config_value != 0);   
1a001ad2:	f893 30fd 	ldrb.w	r3, [r3, #253]	; 0xfd
1a001ad6:	b193      	cbz	r3, 1a001afe <usbDeviceKeyboardTasks+0x32>

		/* send report data */
		if (g_keyBoard.tx_busy == 0) {
1a001ad8:	4b0b      	ldr	r3, [pc, #44]	; (1a001b08 <usbDeviceKeyboardTasks+0x3c>)
1a001ada:	7b1b      	ldrb	r3, [r3, #12]
1a001adc:	b993      	cbnz	r3, 1a001b04 <usbDeviceKeyboardTasks+0x38>
			g_keyBoard.tx_busy = 1;
1a001ade:	4c0a      	ldr	r4, [pc, #40]	; (1a001b08 <usbDeviceKeyboardTasks+0x3c>)
1a001ae0:	2301      	movs	r3, #1
1a001ae2:	7323      	strb	r3, [r4, #12]

			/* update report based on board state */
			Keyboard_UpdateReport();
1a001ae4:	f7ff ff50 	bl	1a001988 <Keyboard_UpdateReport>
			USBD_API->hw->WriteEP( g_keyBoard.hUsb,
1a001ae8:	4b08      	ldr	r3, [pc, #32]	; (1a001b0c <usbDeviceKeyboardTasks+0x40>)
1a001aea:	681b      	ldr	r3, [r3, #0]
1a001aec:	681b      	ldr	r3, [r3, #0]
1a001aee:	6d1d      	ldr	r5, [r3, #80]	; 0x50
1a001af0:	4622      	mov	r2, r4
1a001af2:	f852 0b04 	ldr.w	r0, [r2], #4
1a001af6:	2308      	movs	r3, #8
1a001af8:	2181      	movs	r1, #129	; 0x81
1a001afa:	47a8      	blx	r5
1a001afc:	e002      	b.n	1a001b04 <usbDeviceKeyboardTasks+0x38>
			                       KEYBOARD_REPORT_SIZE );
		}
	}
	else {
		/* reset busy flag if we get disconnected. */
		g_keyBoard.tx_busy = 0;
1a001afe:	4b02      	ldr	r3, [pc, #8]	; (1a001b08 <usbDeviceKeyboardTasks+0x3c>)
1a001b00:	2200      	movs	r2, #0
1a001b02:	731a      	strb	r2, [r3, #12]
	}
}
1a001b04:	bd38      	pop	{r3, r4, r5, pc}
1a001b06:	bf00      	nop
1a001b08:	10000130 	.word	0x10000130
1a001b0c:	1000015c 	.word	0x1000015c

1a001b10 <usbDeviceKeyboardPress>:



void usbDeviceKeyboardPress( uint8_t key )
{
   HID_KEYBOARD_REPORT_SET_KEY_PRESS(g_keyBoard.report, (key));
1a001b10:	4b01      	ldr	r3, [pc, #4]	; (1a001b18 <usbDeviceKeyboardPress+0x8>)
1a001b12:	7198      	strb	r0, [r3, #6]
}
1a001b14:	4770      	bx	lr
1a001b16:	bf00      	nop
1a001b18:	10000130 	.word	0x10000130

1a001b1c <usbDeviceKeyboardCheckKeysCallbackSet>:
bool_t usbDeviceKeyboardCheckKeysCallbackSet(
         callBackFuncPtr_t checkForPressedKeysCallback
       )
{
   bool_t retVal = TRUE;
   if( checkForPressedKeysCallback != NULL ) {
1a001b1c:	b118      	cbz	r0, 1a001b26 <usbDeviceKeyboardCheckKeysCallbackSet+0xa>
      keyboardCheckKeysFunction = checkForPressedKeysCallback;
1a001b1e:	4a03      	ldr	r2, [pc, #12]	; (1a001b2c <usbDeviceKeyboardCheckKeysCallbackSet+0x10>)
1a001b20:	6010      	str	r0, [r2, #0]
   bool_t retVal = TRUE;
1a001b22:	2001      	movs	r0, #1
1a001b24:	4770      	bx	lr
   } else {
      retVal = FALSE;
1a001b26:	2000      	movs	r0, #0
   }
   return retVal;
}
1a001b28:	4770      	bx	lr
1a001b2a:	bf00      	nop
1a001b2c:	10000140 	.word	0x10000140

1a001b30 <EP0_patch>:
 * Private functions
 ****************************************************************************/

/* EP0_patch part of WORKAROUND for artf45032. */
ErrorCode_t EP0_patch(USBD_HANDLE_T hUsb, void *data, uint32_t event)
{
1a001b30:	b510      	push	{r4, lr}
   switch (event) {
1a001b32:	4613      	mov	r3, r2
1a001b34:	b16a      	cbz	r2, 1a001b52 <EP0_patch+0x22>
1a001b36:	2a02      	cmp	r2, #2
1a001b38:	d908      	bls.n	1a001b4c <EP0_patch+0x1c>
1a001b3a:	2a04      	cmp	r2, #4
1a001b3c:	d109      	bne.n	1a001b52 <EP0_patch+0x22>
   case USB_EVT_OUT_NAK:
      if (g_ep0RxBusy) {
1a001b3e:	4a08      	ldr	r2, [pc, #32]	; (1a001b60 <EP0_patch+0x30>)
1a001b40:	6812      	ldr	r2, [r2, #0]
1a001b42:	b95a      	cbnz	r2, 1a001b5c <EP0_patch+0x2c>
         /* we already queued the buffer so ignore this NAK event. */
         return LPC_OK;
      }
      else {
         /* Mark EP0_RX buffer as busy and allow base handler to queue the buffer. */
         g_ep0RxBusy = 1;
1a001b44:	4a06      	ldr	r2, [pc, #24]	; (1a001b60 <EP0_patch+0x30>)
1a001b46:	2401      	movs	r4, #1
1a001b48:	6014      	str	r4, [r2, #0]
      }
      break;
1a001b4a:	e002      	b.n	1a001b52 <EP0_patch+0x22>

   case USB_EVT_SETUP:  /* reset the flag when new setup sequence starts */
   case USB_EVT_OUT:
      /* we received the packet so clear the flag. */
      g_ep0RxBusy = 0;
1a001b4c:	4a04      	ldr	r2, [pc, #16]	; (1a001b60 <EP0_patch+0x30>)
1a001b4e:	2400      	movs	r4, #0
1a001b50:	6014      	str	r4, [r2, #0]
      break;
1a001b52:	461a      	mov	r2, r3
   }
   return g_Ep0BaseHdlr(hUsb, data, event);
1a001b54:	4b03      	ldr	r3, [pc, #12]	; (1a001b64 <EP0_patch+0x34>)
1a001b56:	681b      	ldr	r3, [r3, #0]
1a001b58:	4798      	blx	r3
}
1a001b5a:	bd10      	pop	{r4, pc}
         return LPC_OK;
1a001b5c:	2000      	movs	r0, #0
1a001b5e:	e7fc      	b.n	1a001b5a <EP0_patch+0x2a>
1a001b60:	10000148 	.word	0x10000148
1a001b64:	10000144 	.word	0x10000144

1a001b68 <usbDeviceLpcInterruptPrioritySet>:
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a001b68:	0140      	lsls	r0, r0, #5
1a001b6a:	b2c0      	uxtb	r0, r0
1a001b6c:	4b01      	ldr	r3, [pc, #4]	; (1a001b74 <usbDeviceLpcInterruptPrioritySet+0xc>)
1a001b6e:	f883 0308 	strb.w	r0, [r3, #776]	; 0x308
   return ret;
}

static void usbDeviceLpcInterruptPrioritySet( uint32_t priority ){
   NVIC_SetPriority( LPC_USB_IRQ, priority );
}
1a001b72:	4770      	bx	lr
1a001b74:	e000e100 	.word	0xe000e100

1a001b78 <usbDeviceLpcInterruptInit>:

static void usbDeviceLpcInterruptInit( void ){
1a001b78:	b508      	push	{r3, lr}
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a001b7a:	4b06      	ldr	r3, [pc, #24]	; (1a001b94 <usbDeviceLpcInterruptInit+0x1c>)
1a001b7c:	f44f 7280 	mov.w	r2, #256	; 0x100
1a001b80:	601a      	str	r2, [r3, #0]
    /*  enable USB interrupts */
   NVIC_EnableIRQ( LPC_USB_IRQ );
   /* now connect */
   USBD_API->hw->Connect( g_hUsb, 1 );
1a001b82:	4b05      	ldr	r3, [pc, #20]	; (1a001b98 <usbDeviceLpcInterruptInit+0x20>)
1a001b84:	681b      	ldr	r3, [r3, #0]
1a001b86:	681b      	ldr	r3, [r3, #0]
1a001b88:	689b      	ldr	r3, [r3, #8]
1a001b8a:	2101      	movs	r1, #1
1a001b8c:	4a03      	ldr	r2, [pc, #12]	; (1a001b9c <usbDeviceLpcInterruptInit+0x24>)
1a001b8e:	6810      	ldr	r0, [r2, #0]
1a001b90:	4798      	blx	r3
}
1a001b92:	bd08      	pop	{r3, pc}
1a001b94:	e000e100 	.word	0xe000e100
1a001b98:	1000015c 	.word	0x1000015c
1a001b9c:	1000014c 	.word	0x1000014c

1a001ba0 <usbDeviceLpcInit>:
                                    USBD_API_INIT_PARAM_T* usb_param){
1a001ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a001ba2:	4604      	mov	r4, r0
1a001ba4:	460d      	mov	r5, r1
   USB_init_pin_clk();
1a001ba6:	f7fe ff9d 	bl	1a000ae4 <Chip_USB0_Init>
   g_pUsbApi = (const USBD_API_T *) LPC_ROM_API->usbdApiBase;
1a001baa:	4b18      	ldr	r3, [pc, #96]	; (1a001c0c <usbDeviceLpcInit+0x6c>)
1a001bac:	69db      	ldr	r3, [r3, #28]
1a001bae:	4e18      	ldr	r6, [pc, #96]	; (1a001c10 <usbDeviceLpcInit+0x70>)
1a001bb0:	6033      	str	r3, [r6, #0]
   uint8_t max_num_ep = usb_param->max_num_ep;
1a001bb2:	4628      	mov	r0, r5
1a001bb4:	f810 7f0c 	ldrb.w	r7, [r0, #12]!
   memset((void *) usb_param, 0, sizeof(USBD_API_INIT_PARAM_T));   
1a001bb8:	2238      	movs	r2, #56	; 0x38
1a001bba:	2100      	movs	r1, #0
1a001bbc:	f000 fc53 	bl	1a002466 <memset>
   usb_param->usb_reg_base = LPC_USB_BASE;
1a001bc0:	4b14      	ldr	r3, [pc, #80]	; (1a001c14 <usbDeviceLpcInit+0x74>)
1a001bc2:	602b      	str	r3, [r5, #0]
   usb_param->mem_base = USB_STACK_MEM_BASE;
1a001bc4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
1a001bc8:	606b      	str	r3, [r5, #4]
   usb_param->mem_size = USB_STACK_MEM_SIZE;   
1a001bca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
1a001bce:	60ab      	str	r3, [r5, #8]
   usb_param->max_num_ep = max_num_ep;
1a001bd0:	732f      	strb	r7, [r5, #12]
   desc->device_desc = (uint8_t *) USB_DeviceDescriptor;
1a001bd2:	4b11      	ldr	r3, [pc, #68]	; (1a001c18 <usbDeviceLpcInit+0x78>)
1a001bd4:	6023      	str	r3, [r4, #0]
   desc->string_desc = (uint8_t *) USB_StringDescriptor;
1a001bd6:	4b11      	ldr	r3, [pc, #68]	; (1a001c1c <usbDeviceLpcInit+0x7c>)
1a001bd8:	6063      	str	r3, [r4, #4]
      desc->high_speed_desc = USB_HsConfigDescriptor;
1a001bda:	4b11      	ldr	r3, [pc, #68]	; (1a001c20 <usbDeviceLpcInit+0x80>)
1a001bdc:	60e3      	str	r3, [r4, #12]
      desc->full_speed_desc = USB_FsConfigDescriptor;
1a001bde:	4b11      	ldr	r3, [pc, #68]	; (1a001c24 <usbDeviceLpcInit+0x84>)
1a001be0:	60a3      	str	r3, [r4, #8]
      desc->device_qualifier = (uint8_t *) USB_DeviceQualifier;
1a001be2:	4b11      	ldr	r3, [pc, #68]	; (1a001c28 <usbDeviceLpcInit+0x88>)
1a001be4:	6123      	str	r3, [r4, #16]
   ret = USBD_API->hw->Init(&g_hUsb, desc, usb_param);
1a001be6:	6833      	ldr	r3, [r6, #0]
1a001be8:	681b      	ldr	r3, [r3, #0]
1a001bea:	685b      	ldr	r3, [r3, #4]
1a001bec:	462a      	mov	r2, r5
1a001bee:	4621      	mov	r1, r4
1a001bf0:	480e      	ldr	r0, [pc, #56]	; (1a001c2c <usbDeviceLpcInit+0x8c>)
1a001bf2:	4798      	blx	r3
   if (ret == LPC_OK) {      
1a001bf4:	4603      	mov	r3, r0
1a001bf6:	b930      	cbnz	r0, 1a001c06 <usbDeviceLpcInit+0x66>
      pCtrl = (USB_CORE_CTRL_T *) g_hUsb; /* convert the handle to control structure */
1a001bf8:	4a0c      	ldr	r2, [pc, #48]	; (1a001c2c <usbDeviceLpcInit+0x8c>)
1a001bfa:	6812      	ldr	r2, [r2, #0]
      g_Ep0BaseHdlr = pCtrl->ep_event_hdlr[0];/* retrieve the default EP0_OUT handler */
1a001bfc:	6d90      	ldr	r0, [r2, #88]	; 0x58
1a001bfe:	490c      	ldr	r1, [pc, #48]	; (1a001c30 <usbDeviceLpcInit+0x90>)
1a001c00:	6008      	str	r0, [r1, #0]
      pCtrl->ep_event_hdlr[0] = EP0_patch;/* set our patch routine as EP0_OUT handler */
1a001c02:	490c      	ldr	r1, [pc, #48]	; (1a001c34 <usbDeviceLpcInit+0x94>)
1a001c04:	6591      	str	r1, [r2, #88]	; 0x58
}
1a001c06:	4618      	mov	r0, r3
1a001c08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a001c0a:	bf00      	nop
1a001c0c:	10400100 	.word	0x10400100
1a001c10:	1000015c 	.word	0x1000015c
1a001c14:	40006000 	.word	0x40006000
1a001c18:	1a0029e0 	.word	0x1a0029e0
1a001c1c:	1a002a00 	.word	0x1a002a00
1a001c20:	10000024 	.word	0x10000024
1a001c24:	10000000 	.word	0x10000000
1a001c28:	1a0029f4 	.word	0x1a0029f4
1a001c2c:	1000014c 	.word	0x1000014c
1a001c30:	10000144 	.word	0x10000144
1a001c34:	1a001b31 	.word	0x1a001b31

1a001c38 <USB0_IRQHandler>:
void USB_IRQHandler(void){
1a001c38:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a001c3a:	4b04      	ldr	r3, [pc, #16]	; (1a001c4c <USB0_IRQHandler+0x14>)
1a001c3c:	681b      	ldr	r3, [r3, #0]
1a001c3e:	681b      	ldr	r3, [r3, #0]
1a001c40:	68db      	ldr	r3, [r3, #12]
1a001c42:	4a03      	ldr	r2, [pc, #12]	; (1a001c50 <USB0_IRQHandler+0x18>)
1a001c44:	6810      	ldr	r0, [r2, #0]
1a001c46:	4798      	blx	r3
}
1a001c48:	bd08      	pop	{r3, pc}
1a001c4a:	bf00      	nop
1a001c4c:	1000015c 	.word	0x1000015c
1a001c50:	1000014c 	.word	0x1000014c

1a001c54 <find_IntfDesc>:
   while (pD->bLength) {
1a001c54:	e000      	b.n	1a001c58 <find_IntfDesc+0x4>
      next_desc_adr = (uint32_t) pD + pD->bLength;
1a001c56:	4418      	add	r0, r3
   while (pD->bLength) {
1a001c58:	7803      	ldrb	r3, [r0, #0]
1a001c5a:	b133      	cbz	r3, 1a001c6a <find_IntfDesc+0x16>
      if (pD->bDescriptorType == USB_INTERFACE_DESCRIPTOR_TYPE) {
1a001c5c:	7842      	ldrb	r2, [r0, #1]
1a001c5e:	2a04      	cmp	r2, #4
1a001c60:	d1f9      	bne.n	1a001c56 <find_IntfDesc+0x2>
         if (pIntfDesc->bInterfaceClass == intfClass) {
1a001c62:	7942      	ldrb	r2, [r0, #5]
1a001c64:	428a      	cmp	r2, r1
1a001c66:	d1f6      	bne.n	1a001c56 <find_IntfDesc+0x2>
1a001c68:	e000      	b.n	1a001c6c <find_IntfDesc+0x18>
1a001c6a:	2000      	movs	r0, #0
}
1a001c6c:	4770      	bx	lr
1a001c6e:	Address 0x1a001c6e is out of bounds.


1a001c70 <usbDeviceInit>:
bool_t usbDeviceInit( UsbSubClass_t subclass ){
1a001c70:	b500      	push	{lr}
1a001c72:	b097      	sub	sp, #92	; 0x5c
   switch(subclass){
1a001c74:	2805      	cmp	r0, #5
1a001c76:	d847      	bhi.n	1a001d08 <usbDeviceInit+0x98>
1a001c78:	e8df f000 	tbb	[pc, r0]
1a001c7c:	22460a03 	.word	0x22460a03
1a001c80:	4127      	.short	0x4127
         printf("USB_HID_MOUSE\r\n");
1a001c82:	4824      	ldr	r0, [pc, #144]	; (1a001d14 <usbDeviceInit+0xa4>)
1a001c84:	f000 fd0e 	bl	1a0026a4 <puts>
   return FALSE;
1a001c88:	2000      	movs	r0, #0
}
1a001c8a:	b017      	add	sp, #92	; 0x5c
1a001c8c:	f85d fb04 	ldr.w	pc, [sp], #4
         printf("USB_HID_KEYBOARD\r\n");
1a001c90:	4821      	ldr	r0, [pc, #132]	; (1a001d18 <usbDeviceInit+0xa8>)
1a001c92:	f000 fd07 	bl	1a0026a4 <puts>
         usb_param.max_num_ep = 2; // Keyboard has 2 endpoints
1a001c96:	2302      	movs	r3, #2
1a001c98:	f88d 3020 	strb.w	r3, [sp, #32]
         ret = usbDeviceLpcInit(&desc, &usb_param);
1a001c9c:	a905      	add	r1, sp, #20
1a001c9e:	4668      	mov	r0, sp
1a001ca0:	f7ff ff7e 	bl	1a001ba0 <usbDeviceLpcInit>
         ret = usbDeviceKeyboardInit(
1a001ca4:	ab07      	add	r3, sp, #28
1a001ca6:	aa06      	add	r2, sp, #24
1a001ca8:	491c      	ldr	r1, [pc, #112]	; (1a001d1c <usbDeviceInit+0xac>)
1a001caa:	481d      	ldr	r0, [pc, #116]	; (1a001d20 <usbDeviceInit+0xb0>)
1a001cac:	6800      	ldr	r0, [r0, #0]
1a001cae:	f7ff febf 	bl	1a001a30 <usbDeviceKeyboardInit>
         if (ret == LPC_OK) {
1a001cb2:	b108      	cbz	r0, 1a001cb8 <usbDeviceInit+0x48>
   return FALSE;
1a001cb4:	2000      	movs	r0, #0
1a001cb6:	e7e8      	b.n	1a001c8a <usbDeviceInit+0x1a>
            usbDeviceLpcInterruptInit();
1a001cb8:	f7ff ff5e 	bl	1a001b78 <usbDeviceLpcInterruptInit>
            return TRUE;
1a001cbc:	2001      	movs	r0, #1
1a001cbe:	e7e4      	b.n	1a001c8a <usbDeviceInit+0x1a>
         printf("USB_HID_GENERIC\r\n");
1a001cc0:	4818      	ldr	r0, [pc, #96]	; (1a001d24 <usbDeviceInit+0xb4>)
1a001cc2:	f000 fcef 	bl	1a0026a4 <puts>
   return FALSE;
1a001cc6:	2000      	movs	r0, #0
      break;
1a001cc8:	e7df      	b.n	1a001c8a <usbDeviceInit+0x1a>
         printf("USB_CDC_UART\r\n");
1a001cca:	4817      	ldr	r0, [pc, #92]	; (1a001d28 <usbDeviceInit+0xb8>)
1a001ccc:	f000 fcea 	bl	1a0026a4 <puts>
         usb_param.max_num_ep = 4; // CDC Uart has 4 endpoints
1a001cd0:	2304      	movs	r3, #4
1a001cd2:	f88d 3020 	strb.w	r3, [sp, #32]
         ret = usbDeviceLpcInit(&desc, &usb_param);
1a001cd6:	a905      	add	r1, sp, #20
1a001cd8:	4668      	mov	r0, sp
1a001cda:	f7ff ff61 	bl	1a001ba0 <usbDeviceLpcInit>
         ret = cdcUartLpcInit(g_hUsb, &desc, &usb_param);
1a001cde:	aa05      	add	r2, sp, #20
1a001ce0:	4669      	mov	r1, sp
1a001ce2:	4b0f      	ldr	r3, [pc, #60]	; (1a001d20 <usbDeviceInit+0xb0>)
1a001ce4:	6818      	ldr	r0, [r3, #0]
1a001ce6:	f7ff fdd7 	bl	1a001898 <cdcUartLpcInit>
         if (ret == LPC_OK) {
1a001cea:	b108      	cbz	r0, 1a001cf0 <usbDeviceInit+0x80>
   return FALSE;
1a001cec:	2000      	movs	r0, #0
1a001cee:	e7cc      	b.n	1a001c8a <usbDeviceInit+0x1a>
            usbDeviceLpcInterruptPrioritySet(5); // FreeRTOS Requiere prioridad>=5
1a001cf0:	2005      	movs	r0, #5
1a001cf2:	f7ff ff39 	bl	1a001b68 <usbDeviceLpcInterruptPrioritySet>
            usbDeviceLpcInterruptInit();      
1a001cf6:	f7ff ff3f 	bl	1a001b78 <usbDeviceLpcInterruptInit>
            return TRUE;   
1a001cfa:	2001      	movs	r0, #1
1a001cfc:	e7c5      	b.n	1a001c8a <usbDeviceInit+0x1a>
         printf("USB_MSC_DRIVE\r\n");
1a001cfe:	480b      	ldr	r0, [pc, #44]	; (1a001d2c <usbDeviceInit+0xbc>)
1a001d00:	f000 fcd0 	bl	1a0026a4 <puts>
         return TRUE;
1a001d04:	2001      	movs	r0, #1
1a001d06:	e7c0      	b.n	1a001c8a <usbDeviceInit+0x1a>
         printf("Error, you must use a valid USB device class\r\n");
1a001d08:	4809      	ldr	r0, [pc, #36]	; (1a001d30 <usbDeviceInit+0xc0>)
1a001d0a:	f000 fccb 	bl	1a0026a4 <puts>
         return TRUE;
1a001d0e:	2001      	movs	r0, #1
1a001d10:	e7bb      	b.n	1a001c8a <usbDeviceInit+0x1a>
1a001d12:	bf00      	nop
1a001d14:	1a002cf8 	.word	0x1a002cf8
1a001d18:	1a002d08 	.word	0x1a002d08
1a001d1c:	10000009 	.word	0x10000009
1a001d20:	1000014c 	.word	0x1000014c
1a001d24:	1a002d1c 	.word	0x1a002d1c
1a001d28:	1a002d30 	.word	0x1a002d30
1a001d2c:	1a002d40 	.word	0x1a002d40
1a001d30:	1a002d50 	.word	0x1a002d50

1a001d34 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a001d34:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a001d36:	f7fe feef 	bl	1a000b18 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a001d3a:	4b1a      	ldr	r3, [pc, #104]	; (1a001da4 <boardInit+0x70>)
1a001d3c:	6818      	ldr	r0, [r3, #0]
1a001d3e:	f7ff faf9 	bl	1a001334 <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms (si no se usa freeRTOS)
   #ifndef USE_FREERTOS
      tickInit( 1 );
1a001d42:	2001      	movs	r0, #1
1a001d44:	2100      	movs	r1, #0
1a001d46:	f7ff fc69 	bl	1a00161c <tickInit>
      //#error CIAA-NXP

   #elif BOARD==edu_ciaa_nxp

      // Inicializar GPIOs
      gpioInit( 0, GPIO_ENABLE );
1a001d4a:	2105      	movs	r1, #5
1a001d4c:	2000      	movs	r0, #0
1a001d4e:	f7ff fb19 	bl	1a001384 <gpioInit>

      // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
      gpioInit( TEC1, GPIO_INPUT );
1a001d52:	2100      	movs	r1, #0
1a001d54:	2024      	movs	r0, #36	; 0x24
1a001d56:	f7ff fb15 	bl	1a001384 <gpioInit>
      gpioInit( TEC2, GPIO_INPUT );
1a001d5a:	2100      	movs	r1, #0
1a001d5c:	2025      	movs	r0, #37	; 0x25
1a001d5e:	f7ff fb11 	bl	1a001384 <gpioInit>
      gpioInit( TEC3, GPIO_INPUT );
1a001d62:	2100      	movs	r1, #0
1a001d64:	2026      	movs	r0, #38	; 0x26
1a001d66:	f7ff fb0d 	bl	1a001384 <gpioInit>
      gpioInit( TEC4, GPIO_INPUT );
1a001d6a:	2100      	movs	r1, #0
1a001d6c:	2027      	movs	r0, #39	; 0x27
1a001d6e:	f7ff fb09 	bl	1a001384 <gpioInit>

      // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
      gpioInit( LEDR, GPIO_OUTPUT );
1a001d72:	2101      	movs	r1, #1
1a001d74:	2028      	movs	r0, #40	; 0x28
1a001d76:	f7ff fb05 	bl	1a001384 <gpioInit>
      gpioInit( LEDG, GPIO_OUTPUT );
1a001d7a:	2101      	movs	r1, #1
1a001d7c:	2029      	movs	r0, #41	; 0x29
1a001d7e:	f7ff fb01 	bl	1a001384 <gpioInit>
      gpioInit( LEDB, GPIO_OUTPUT );
1a001d82:	2101      	movs	r1, #1
1a001d84:	202a      	movs	r0, #42	; 0x2a
1a001d86:	f7ff fafd 	bl	1a001384 <gpioInit>
      gpioInit( LED1, GPIO_OUTPUT );
1a001d8a:	2101      	movs	r1, #1
1a001d8c:	202b      	movs	r0, #43	; 0x2b
1a001d8e:	f7ff faf9 	bl	1a001384 <gpioInit>
      gpioInit( LED2, GPIO_OUTPUT );
1a001d92:	2101      	movs	r1, #1
1a001d94:	202c      	movs	r0, #44	; 0x2c
1a001d96:	f7ff faf5 	bl	1a001384 <gpioInit>
      gpioInit( LED3, GPIO_OUTPUT );
1a001d9a:	2101      	movs	r1, #1
1a001d9c:	202d      	movs	r0, #45	; 0x2d
1a001d9e:	f7ff faf1 	bl	1a001384 <gpioInit>
   #else
      #error BOARD compile variable must be defined

   #endif

}
1a001da2:	bd08      	pop	{r3, pc}
1a001da4:	10000158 	.word	0x10000158

1a001da8 <__aeabi_uldivmod>:
1a001da8:	b953      	cbnz	r3, 1a001dc0 <__aeabi_uldivmod+0x18>
1a001daa:	b94a      	cbnz	r2, 1a001dc0 <__aeabi_uldivmod+0x18>
1a001dac:	2900      	cmp	r1, #0
1a001dae:	bf08      	it	eq
1a001db0:	2800      	cmpeq	r0, #0
1a001db2:	bf1c      	itt	ne
1a001db4:	f04f 31ff 	movne.w	r1, #4294967295
1a001db8:	f04f 30ff 	movne.w	r0, #4294967295
1a001dbc:	f000 b974 	b.w	1a0020a8 <__aeabi_idiv0>
1a001dc0:	f1ad 0c08 	sub.w	ip, sp, #8
1a001dc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a001dc8:	f000 f806 	bl	1a001dd8 <__udivmoddi4>
1a001dcc:	f8dd e004 	ldr.w	lr, [sp, #4]
1a001dd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a001dd4:	b004      	add	sp, #16
1a001dd6:	4770      	bx	lr

1a001dd8 <__udivmoddi4>:
1a001dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a001ddc:	9e08      	ldr	r6, [sp, #32]
1a001dde:	4604      	mov	r4, r0
1a001de0:	4688      	mov	r8, r1
1a001de2:	2b00      	cmp	r3, #0
1a001de4:	f040 8085 	bne.w	1a001ef2 <__udivmoddi4+0x11a>
1a001de8:	428a      	cmp	r2, r1
1a001dea:	4615      	mov	r5, r2
1a001dec:	d948      	bls.n	1a001e80 <__udivmoddi4+0xa8>
1a001dee:	fab2 f282 	clz	r2, r2
1a001df2:	b14a      	cbz	r2, 1a001e08 <__udivmoddi4+0x30>
1a001df4:	f1c2 0720 	rsb	r7, r2, #32
1a001df8:	fa01 f302 	lsl.w	r3, r1, r2
1a001dfc:	fa20 f707 	lsr.w	r7, r0, r7
1a001e00:	4095      	lsls	r5, r2
1a001e02:	ea47 0803 	orr.w	r8, r7, r3
1a001e06:	4094      	lsls	r4, r2
1a001e08:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a001e0c:	0c23      	lsrs	r3, r4, #16
1a001e0e:	fbb8 f7fe 	udiv	r7, r8, lr
1a001e12:	fa1f fc85 	uxth.w	ip, r5
1a001e16:	fb0e 8817 	mls	r8, lr, r7, r8
1a001e1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a001e1e:	fb07 f10c 	mul.w	r1, r7, ip
1a001e22:	4299      	cmp	r1, r3
1a001e24:	d909      	bls.n	1a001e3a <__udivmoddi4+0x62>
1a001e26:	18eb      	adds	r3, r5, r3
1a001e28:	f107 30ff 	add.w	r0, r7, #4294967295
1a001e2c:	f080 80e3 	bcs.w	1a001ff6 <__udivmoddi4+0x21e>
1a001e30:	4299      	cmp	r1, r3
1a001e32:	f240 80e0 	bls.w	1a001ff6 <__udivmoddi4+0x21e>
1a001e36:	3f02      	subs	r7, #2
1a001e38:	442b      	add	r3, r5
1a001e3a:	1a5b      	subs	r3, r3, r1
1a001e3c:	b2a4      	uxth	r4, r4
1a001e3e:	fbb3 f0fe 	udiv	r0, r3, lr
1a001e42:	fb0e 3310 	mls	r3, lr, r0, r3
1a001e46:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a001e4a:	fb00 fc0c 	mul.w	ip, r0, ip
1a001e4e:	45a4      	cmp	ip, r4
1a001e50:	d909      	bls.n	1a001e66 <__udivmoddi4+0x8e>
1a001e52:	192c      	adds	r4, r5, r4
1a001e54:	f100 33ff 	add.w	r3, r0, #4294967295
1a001e58:	f080 80cb 	bcs.w	1a001ff2 <__udivmoddi4+0x21a>
1a001e5c:	45a4      	cmp	ip, r4
1a001e5e:	f240 80c8 	bls.w	1a001ff2 <__udivmoddi4+0x21a>
1a001e62:	3802      	subs	r0, #2
1a001e64:	442c      	add	r4, r5
1a001e66:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a001e6a:	eba4 040c 	sub.w	r4, r4, ip
1a001e6e:	2700      	movs	r7, #0
1a001e70:	b11e      	cbz	r6, 1a001e7a <__udivmoddi4+0xa2>
1a001e72:	40d4      	lsrs	r4, r2
1a001e74:	2300      	movs	r3, #0
1a001e76:	e9c6 4300 	strd	r4, r3, [r6]
1a001e7a:	4639      	mov	r1, r7
1a001e7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001e80:	2a00      	cmp	r2, #0
1a001e82:	d053      	beq.n	1a001f2c <__udivmoddi4+0x154>
1a001e84:	fab2 f282 	clz	r2, r2
1a001e88:	2a00      	cmp	r2, #0
1a001e8a:	f040 80b6 	bne.w	1a001ffa <__udivmoddi4+0x222>
1a001e8e:	1b49      	subs	r1, r1, r5
1a001e90:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a001e94:	fa1f f885 	uxth.w	r8, r5
1a001e98:	2701      	movs	r7, #1
1a001e9a:	fbb1 fcfe 	udiv	ip, r1, lr
1a001e9e:	0c23      	lsrs	r3, r4, #16
1a001ea0:	fb0e 111c 	mls	r1, lr, ip, r1
1a001ea4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a001ea8:	fb08 f10c 	mul.w	r1, r8, ip
1a001eac:	4299      	cmp	r1, r3
1a001eae:	d907      	bls.n	1a001ec0 <__udivmoddi4+0xe8>
1a001eb0:	18eb      	adds	r3, r5, r3
1a001eb2:	f10c 30ff 	add.w	r0, ip, #4294967295
1a001eb6:	d202      	bcs.n	1a001ebe <__udivmoddi4+0xe6>
1a001eb8:	4299      	cmp	r1, r3
1a001eba:	f200 80ec 	bhi.w	1a002096 <__udivmoddi4+0x2be>
1a001ebe:	4684      	mov	ip, r0
1a001ec0:	1a59      	subs	r1, r3, r1
1a001ec2:	b2a3      	uxth	r3, r4
1a001ec4:	fbb1 f0fe 	udiv	r0, r1, lr
1a001ec8:	fb0e 1410 	mls	r4, lr, r0, r1
1a001ecc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a001ed0:	fb08 f800 	mul.w	r8, r8, r0
1a001ed4:	45a0      	cmp	r8, r4
1a001ed6:	d907      	bls.n	1a001ee8 <__udivmoddi4+0x110>
1a001ed8:	192c      	adds	r4, r5, r4
1a001eda:	f100 33ff 	add.w	r3, r0, #4294967295
1a001ede:	d202      	bcs.n	1a001ee6 <__udivmoddi4+0x10e>
1a001ee0:	45a0      	cmp	r8, r4
1a001ee2:	f200 80dc 	bhi.w	1a00209e <__udivmoddi4+0x2c6>
1a001ee6:	4618      	mov	r0, r3
1a001ee8:	eba4 0408 	sub.w	r4, r4, r8
1a001eec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a001ef0:	e7be      	b.n	1a001e70 <__udivmoddi4+0x98>
1a001ef2:	428b      	cmp	r3, r1
1a001ef4:	d908      	bls.n	1a001f08 <__udivmoddi4+0x130>
1a001ef6:	2e00      	cmp	r6, #0
1a001ef8:	d078      	beq.n	1a001fec <__udivmoddi4+0x214>
1a001efa:	2700      	movs	r7, #0
1a001efc:	e9c6 0100 	strd	r0, r1, [r6]
1a001f00:	4638      	mov	r0, r7
1a001f02:	4639      	mov	r1, r7
1a001f04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001f08:	fab3 f783 	clz	r7, r3
1a001f0c:	b97f      	cbnz	r7, 1a001f2e <__udivmoddi4+0x156>
1a001f0e:	428b      	cmp	r3, r1
1a001f10:	d302      	bcc.n	1a001f18 <__udivmoddi4+0x140>
1a001f12:	4282      	cmp	r2, r0
1a001f14:	f200 80bd 	bhi.w	1a002092 <__udivmoddi4+0x2ba>
1a001f18:	1a84      	subs	r4, r0, r2
1a001f1a:	eb61 0303 	sbc.w	r3, r1, r3
1a001f1e:	2001      	movs	r0, #1
1a001f20:	4698      	mov	r8, r3
1a001f22:	2e00      	cmp	r6, #0
1a001f24:	d0a9      	beq.n	1a001e7a <__udivmoddi4+0xa2>
1a001f26:	e9c6 4800 	strd	r4, r8, [r6]
1a001f2a:	e7a6      	b.n	1a001e7a <__udivmoddi4+0xa2>
1a001f2c:	deff      	udf	#255	; 0xff
1a001f2e:	f1c7 0520 	rsb	r5, r7, #32
1a001f32:	40bb      	lsls	r3, r7
1a001f34:	fa22 fc05 	lsr.w	ip, r2, r5
1a001f38:	ea4c 0c03 	orr.w	ip, ip, r3
1a001f3c:	fa01 f407 	lsl.w	r4, r1, r7
1a001f40:	fa20 f805 	lsr.w	r8, r0, r5
1a001f44:	fa21 f305 	lsr.w	r3, r1, r5
1a001f48:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
1a001f4c:	ea48 0404 	orr.w	r4, r8, r4
1a001f50:	fbb3 f9fe 	udiv	r9, r3, lr
1a001f54:	0c21      	lsrs	r1, r4, #16
1a001f56:	fb0e 3319 	mls	r3, lr, r9, r3
1a001f5a:	fa1f f88c 	uxth.w	r8, ip
1a001f5e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
1a001f62:	fb09 fa08 	mul.w	sl, r9, r8
1a001f66:	459a      	cmp	sl, r3
1a001f68:	fa02 f207 	lsl.w	r2, r2, r7
1a001f6c:	fa00 f107 	lsl.w	r1, r0, r7
1a001f70:	d90b      	bls.n	1a001f8a <__udivmoddi4+0x1b2>
1a001f72:	eb1c 0303 	adds.w	r3, ip, r3
1a001f76:	f109 30ff 	add.w	r0, r9, #4294967295
1a001f7a:	f080 8088 	bcs.w	1a00208e <__udivmoddi4+0x2b6>
1a001f7e:	459a      	cmp	sl, r3
1a001f80:	f240 8085 	bls.w	1a00208e <__udivmoddi4+0x2b6>
1a001f84:	f1a9 0902 	sub.w	r9, r9, #2
1a001f88:	4463      	add	r3, ip
1a001f8a:	eba3 030a 	sub.w	r3, r3, sl
1a001f8e:	b2a4      	uxth	r4, r4
1a001f90:	fbb3 f0fe 	udiv	r0, r3, lr
1a001f94:	fb0e 3310 	mls	r3, lr, r0, r3
1a001f98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a001f9c:	fb00 f808 	mul.w	r8, r0, r8
1a001fa0:	45a0      	cmp	r8, r4
1a001fa2:	d908      	bls.n	1a001fb6 <__udivmoddi4+0x1de>
1a001fa4:	eb1c 0404 	adds.w	r4, ip, r4
1a001fa8:	f100 33ff 	add.w	r3, r0, #4294967295
1a001fac:	d26b      	bcs.n	1a002086 <__udivmoddi4+0x2ae>
1a001fae:	45a0      	cmp	r8, r4
1a001fb0:	d969      	bls.n	1a002086 <__udivmoddi4+0x2ae>
1a001fb2:	3802      	subs	r0, #2
1a001fb4:	4464      	add	r4, ip
1a001fb6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a001fba:	eba4 0408 	sub.w	r4, r4, r8
1a001fbe:	fba0 8902 	umull	r8, r9, r0, r2
1a001fc2:	454c      	cmp	r4, r9
1a001fc4:	46c6      	mov	lr, r8
1a001fc6:	464b      	mov	r3, r9
1a001fc8:	d354      	bcc.n	1a002074 <__udivmoddi4+0x29c>
1a001fca:	d051      	beq.n	1a002070 <__udivmoddi4+0x298>
1a001fcc:	2e00      	cmp	r6, #0
1a001fce:	d069      	beq.n	1a0020a4 <__udivmoddi4+0x2cc>
1a001fd0:	ebb1 020e 	subs.w	r2, r1, lr
1a001fd4:	eb64 0403 	sbc.w	r4, r4, r3
1a001fd8:	fa04 f505 	lsl.w	r5, r4, r5
1a001fdc:	fa22 f307 	lsr.w	r3, r2, r7
1a001fe0:	40fc      	lsrs	r4, r7
1a001fe2:	431d      	orrs	r5, r3
1a001fe4:	e9c6 5400 	strd	r5, r4, [r6]
1a001fe8:	2700      	movs	r7, #0
1a001fea:	e746      	b.n	1a001e7a <__udivmoddi4+0xa2>
1a001fec:	4637      	mov	r7, r6
1a001fee:	4630      	mov	r0, r6
1a001ff0:	e743      	b.n	1a001e7a <__udivmoddi4+0xa2>
1a001ff2:	4618      	mov	r0, r3
1a001ff4:	e737      	b.n	1a001e66 <__udivmoddi4+0x8e>
1a001ff6:	4607      	mov	r7, r0
1a001ff8:	e71f      	b.n	1a001e3a <__udivmoddi4+0x62>
1a001ffa:	f1c2 0320 	rsb	r3, r2, #32
1a001ffe:	fa20 f703 	lsr.w	r7, r0, r3
1a002002:	4095      	lsls	r5, r2
1a002004:	fa01 f002 	lsl.w	r0, r1, r2
1a002008:	fa21 f303 	lsr.w	r3, r1, r3
1a00200c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a002010:	4338      	orrs	r0, r7
1a002012:	0c01      	lsrs	r1, r0, #16
1a002014:	fbb3 f7fe 	udiv	r7, r3, lr
1a002018:	fa1f f885 	uxth.w	r8, r5
1a00201c:	fb0e 3317 	mls	r3, lr, r7, r3
1a002020:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a002024:	fb07 f308 	mul.w	r3, r7, r8
1a002028:	428b      	cmp	r3, r1
1a00202a:	fa04 f402 	lsl.w	r4, r4, r2
1a00202e:	d907      	bls.n	1a002040 <__udivmoddi4+0x268>
1a002030:	1869      	adds	r1, r5, r1
1a002032:	f107 3cff 	add.w	ip, r7, #4294967295
1a002036:	d228      	bcs.n	1a00208a <__udivmoddi4+0x2b2>
1a002038:	428b      	cmp	r3, r1
1a00203a:	d926      	bls.n	1a00208a <__udivmoddi4+0x2b2>
1a00203c:	3f02      	subs	r7, #2
1a00203e:	4429      	add	r1, r5
1a002040:	1acb      	subs	r3, r1, r3
1a002042:	b281      	uxth	r1, r0
1a002044:	fbb3 f0fe 	udiv	r0, r3, lr
1a002048:	fb0e 3310 	mls	r3, lr, r0, r3
1a00204c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a002050:	fb00 f308 	mul.w	r3, r0, r8
1a002054:	428b      	cmp	r3, r1
1a002056:	d907      	bls.n	1a002068 <__udivmoddi4+0x290>
1a002058:	1869      	adds	r1, r5, r1
1a00205a:	f100 3cff 	add.w	ip, r0, #4294967295
1a00205e:	d210      	bcs.n	1a002082 <__udivmoddi4+0x2aa>
1a002060:	428b      	cmp	r3, r1
1a002062:	d90e      	bls.n	1a002082 <__udivmoddi4+0x2aa>
1a002064:	3802      	subs	r0, #2
1a002066:	4429      	add	r1, r5
1a002068:	1ac9      	subs	r1, r1, r3
1a00206a:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a00206e:	e714      	b.n	1a001e9a <__udivmoddi4+0xc2>
1a002070:	4541      	cmp	r1, r8
1a002072:	d2ab      	bcs.n	1a001fcc <__udivmoddi4+0x1f4>
1a002074:	ebb8 0e02 	subs.w	lr, r8, r2
1a002078:	eb69 020c 	sbc.w	r2, r9, ip
1a00207c:	3801      	subs	r0, #1
1a00207e:	4613      	mov	r3, r2
1a002080:	e7a4      	b.n	1a001fcc <__udivmoddi4+0x1f4>
1a002082:	4660      	mov	r0, ip
1a002084:	e7f0      	b.n	1a002068 <__udivmoddi4+0x290>
1a002086:	4618      	mov	r0, r3
1a002088:	e795      	b.n	1a001fb6 <__udivmoddi4+0x1de>
1a00208a:	4667      	mov	r7, ip
1a00208c:	e7d8      	b.n	1a002040 <__udivmoddi4+0x268>
1a00208e:	4681      	mov	r9, r0
1a002090:	e77b      	b.n	1a001f8a <__udivmoddi4+0x1b2>
1a002092:	4638      	mov	r0, r7
1a002094:	e745      	b.n	1a001f22 <__udivmoddi4+0x14a>
1a002096:	f1ac 0c02 	sub.w	ip, ip, #2
1a00209a:	442b      	add	r3, r5
1a00209c:	e710      	b.n	1a001ec0 <__udivmoddi4+0xe8>
1a00209e:	3802      	subs	r0, #2
1a0020a0:	442c      	add	r4, r5
1a0020a2:	e721      	b.n	1a001ee8 <__udivmoddi4+0x110>
1a0020a4:	4637      	mov	r7, r6
1a0020a6:	e6e8      	b.n	1a001e7a <__udivmoddi4+0xa2>

1a0020a8 <__aeabi_idiv0>:
1a0020a8:	4770      	bx	lr
1a0020aa:	bf00      	nop

1a0020ac <__sflush_r>:
1a0020ac:	898a      	ldrh	r2, [r1, #12]
1a0020ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0020b2:	4605      	mov	r5, r0
1a0020b4:	0710      	lsls	r0, r2, #28
1a0020b6:	460c      	mov	r4, r1
1a0020b8:	d458      	bmi.n	1a00216c <__sflush_r+0xc0>
1a0020ba:	684b      	ldr	r3, [r1, #4]
1a0020bc:	2b00      	cmp	r3, #0
1a0020be:	dc05      	bgt.n	1a0020cc <__sflush_r+0x20>
1a0020c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
1a0020c2:	2b00      	cmp	r3, #0
1a0020c4:	dc02      	bgt.n	1a0020cc <__sflush_r+0x20>
1a0020c6:	2000      	movs	r0, #0
1a0020c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0020cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a0020ce:	2e00      	cmp	r6, #0
1a0020d0:	d0f9      	beq.n	1a0020c6 <__sflush_r+0x1a>
1a0020d2:	2300      	movs	r3, #0
1a0020d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
1a0020d8:	682f      	ldr	r7, [r5, #0]
1a0020da:	602b      	str	r3, [r5, #0]
1a0020dc:	d032      	beq.n	1a002144 <__sflush_r+0x98>
1a0020de:	6d60      	ldr	r0, [r4, #84]	; 0x54
1a0020e0:	89a3      	ldrh	r3, [r4, #12]
1a0020e2:	075a      	lsls	r2, r3, #29
1a0020e4:	d505      	bpl.n	1a0020f2 <__sflush_r+0x46>
1a0020e6:	6863      	ldr	r3, [r4, #4]
1a0020e8:	1ac0      	subs	r0, r0, r3
1a0020ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
1a0020ec:	b10b      	cbz	r3, 1a0020f2 <__sflush_r+0x46>
1a0020ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a0020f0:	1ac0      	subs	r0, r0, r3
1a0020f2:	2300      	movs	r3, #0
1a0020f4:	4602      	mov	r2, r0
1a0020f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a0020f8:	6a21      	ldr	r1, [r4, #32]
1a0020fa:	4628      	mov	r0, r5
1a0020fc:	47b0      	blx	r6
1a0020fe:	1c43      	adds	r3, r0, #1
1a002100:	89a3      	ldrh	r3, [r4, #12]
1a002102:	d106      	bne.n	1a002112 <__sflush_r+0x66>
1a002104:	6829      	ldr	r1, [r5, #0]
1a002106:	291d      	cmp	r1, #29
1a002108:	d849      	bhi.n	1a00219e <__sflush_r+0xf2>
1a00210a:	4a2a      	ldr	r2, [pc, #168]	; (1a0021b4 <__sflush_r+0x108>)
1a00210c:	40ca      	lsrs	r2, r1
1a00210e:	07d6      	lsls	r6, r2, #31
1a002110:	d545      	bpl.n	1a00219e <__sflush_r+0xf2>
1a002112:	2200      	movs	r2, #0
1a002114:	6062      	str	r2, [r4, #4]
1a002116:	04d9      	lsls	r1, r3, #19
1a002118:	6922      	ldr	r2, [r4, #16]
1a00211a:	6022      	str	r2, [r4, #0]
1a00211c:	d504      	bpl.n	1a002128 <__sflush_r+0x7c>
1a00211e:	1c42      	adds	r2, r0, #1
1a002120:	d101      	bne.n	1a002126 <__sflush_r+0x7a>
1a002122:	682b      	ldr	r3, [r5, #0]
1a002124:	b903      	cbnz	r3, 1a002128 <__sflush_r+0x7c>
1a002126:	6560      	str	r0, [r4, #84]	; 0x54
1a002128:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a00212a:	602f      	str	r7, [r5, #0]
1a00212c:	2900      	cmp	r1, #0
1a00212e:	d0ca      	beq.n	1a0020c6 <__sflush_r+0x1a>
1a002130:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a002134:	4299      	cmp	r1, r3
1a002136:	d002      	beq.n	1a00213e <__sflush_r+0x92>
1a002138:	4628      	mov	r0, r5
1a00213a:	f000 f99d 	bl	1a002478 <_free_r>
1a00213e:	2000      	movs	r0, #0
1a002140:	6360      	str	r0, [r4, #52]	; 0x34
1a002142:	e7c1      	b.n	1a0020c8 <__sflush_r+0x1c>
1a002144:	6a21      	ldr	r1, [r4, #32]
1a002146:	2301      	movs	r3, #1
1a002148:	4628      	mov	r0, r5
1a00214a:	47b0      	blx	r6
1a00214c:	1c41      	adds	r1, r0, #1
1a00214e:	d1c7      	bne.n	1a0020e0 <__sflush_r+0x34>
1a002150:	682b      	ldr	r3, [r5, #0]
1a002152:	2b00      	cmp	r3, #0
1a002154:	d0c4      	beq.n	1a0020e0 <__sflush_r+0x34>
1a002156:	2b1d      	cmp	r3, #29
1a002158:	d001      	beq.n	1a00215e <__sflush_r+0xb2>
1a00215a:	2b16      	cmp	r3, #22
1a00215c:	d101      	bne.n	1a002162 <__sflush_r+0xb6>
1a00215e:	602f      	str	r7, [r5, #0]
1a002160:	e7b1      	b.n	1a0020c6 <__sflush_r+0x1a>
1a002162:	89a3      	ldrh	r3, [r4, #12]
1a002164:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a002168:	81a3      	strh	r3, [r4, #12]
1a00216a:	e7ad      	b.n	1a0020c8 <__sflush_r+0x1c>
1a00216c:	690f      	ldr	r7, [r1, #16]
1a00216e:	2f00      	cmp	r7, #0
1a002170:	d0a9      	beq.n	1a0020c6 <__sflush_r+0x1a>
1a002172:	0793      	lsls	r3, r2, #30
1a002174:	680e      	ldr	r6, [r1, #0]
1a002176:	bf08      	it	eq
1a002178:	694b      	ldreq	r3, [r1, #20]
1a00217a:	600f      	str	r7, [r1, #0]
1a00217c:	bf18      	it	ne
1a00217e:	2300      	movne	r3, #0
1a002180:	eba6 0807 	sub.w	r8, r6, r7
1a002184:	608b      	str	r3, [r1, #8]
1a002186:	f1b8 0f00 	cmp.w	r8, #0
1a00218a:	dd9c      	ble.n	1a0020c6 <__sflush_r+0x1a>
1a00218c:	4643      	mov	r3, r8
1a00218e:	463a      	mov	r2, r7
1a002190:	6a21      	ldr	r1, [r4, #32]
1a002192:	6aa6      	ldr	r6, [r4, #40]	; 0x28
1a002194:	4628      	mov	r0, r5
1a002196:	47b0      	blx	r6
1a002198:	2800      	cmp	r0, #0
1a00219a:	dc06      	bgt.n	1a0021aa <__sflush_r+0xfe>
1a00219c:	89a3      	ldrh	r3, [r4, #12]
1a00219e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a0021a2:	81a3      	strh	r3, [r4, #12]
1a0021a4:	f04f 30ff 	mov.w	r0, #4294967295
1a0021a8:	e78e      	b.n	1a0020c8 <__sflush_r+0x1c>
1a0021aa:	4407      	add	r7, r0
1a0021ac:	eba8 0800 	sub.w	r8, r8, r0
1a0021b0:	e7e9      	b.n	1a002186 <__sflush_r+0xda>
1a0021b2:	bf00      	nop
1a0021b4:	20400001 	.word	0x20400001

1a0021b8 <_fflush_r>:
1a0021b8:	b538      	push	{r3, r4, r5, lr}
1a0021ba:	690b      	ldr	r3, [r1, #16]
1a0021bc:	4605      	mov	r5, r0
1a0021be:	460c      	mov	r4, r1
1a0021c0:	b913      	cbnz	r3, 1a0021c8 <_fflush_r+0x10>
1a0021c2:	2500      	movs	r5, #0
1a0021c4:	4628      	mov	r0, r5
1a0021c6:	bd38      	pop	{r3, r4, r5, pc}
1a0021c8:	b118      	cbz	r0, 1a0021d2 <_fflush_r+0x1a>
1a0021ca:	6983      	ldr	r3, [r0, #24]
1a0021cc:	b90b      	cbnz	r3, 1a0021d2 <_fflush_r+0x1a>
1a0021ce:	f000 f887 	bl	1a0022e0 <__sinit>
1a0021d2:	4b14      	ldr	r3, [pc, #80]	; (1a002224 <_fflush_r+0x6c>)
1a0021d4:	429c      	cmp	r4, r3
1a0021d6:	d11b      	bne.n	1a002210 <_fflush_r+0x58>
1a0021d8:	686c      	ldr	r4, [r5, #4]
1a0021da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0021de:	2b00      	cmp	r3, #0
1a0021e0:	d0ef      	beq.n	1a0021c2 <_fflush_r+0xa>
1a0021e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
1a0021e4:	07d0      	lsls	r0, r2, #31
1a0021e6:	d404      	bmi.n	1a0021f2 <_fflush_r+0x3a>
1a0021e8:	0599      	lsls	r1, r3, #22
1a0021ea:	d402      	bmi.n	1a0021f2 <_fflush_r+0x3a>
1a0021ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a0021ee:	f000 f938 	bl	1a002462 <__retarget_lock_acquire_recursive>
1a0021f2:	4628      	mov	r0, r5
1a0021f4:	4621      	mov	r1, r4
1a0021f6:	f7ff ff59 	bl	1a0020ac <__sflush_r>
1a0021fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a0021fc:	07da      	lsls	r2, r3, #31
1a0021fe:	4605      	mov	r5, r0
1a002200:	d4e0      	bmi.n	1a0021c4 <_fflush_r+0xc>
1a002202:	89a3      	ldrh	r3, [r4, #12]
1a002204:	059b      	lsls	r3, r3, #22
1a002206:	d4dd      	bmi.n	1a0021c4 <_fflush_r+0xc>
1a002208:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a00220a:	f000 f92b 	bl	1a002464 <__retarget_lock_release_recursive>
1a00220e:	e7d9      	b.n	1a0021c4 <_fflush_r+0xc>
1a002210:	4b05      	ldr	r3, [pc, #20]	; (1a002228 <_fflush_r+0x70>)
1a002212:	429c      	cmp	r4, r3
1a002214:	d101      	bne.n	1a00221a <_fflush_r+0x62>
1a002216:	68ac      	ldr	r4, [r5, #8]
1a002218:	e7df      	b.n	1a0021da <_fflush_r+0x22>
1a00221a:	4b04      	ldr	r3, [pc, #16]	; (1a00222c <_fflush_r+0x74>)
1a00221c:	429c      	cmp	r4, r3
1a00221e:	bf08      	it	eq
1a002220:	68ec      	ldreq	r4, [r5, #12]
1a002222:	e7da      	b.n	1a0021da <_fflush_r+0x22>
1a002224:	1a002da0 	.word	0x1a002da0
1a002228:	1a002dc0 	.word	0x1a002dc0
1a00222c:	1a002d80 	.word	0x1a002d80

1a002230 <std>:
1a002230:	2300      	movs	r3, #0
1a002232:	b510      	push	{r4, lr}
1a002234:	4604      	mov	r4, r0
1a002236:	e9c0 3300 	strd	r3, r3, [r0]
1a00223a:	6083      	str	r3, [r0, #8]
1a00223c:	8181      	strh	r1, [r0, #12]
1a00223e:	6643      	str	r3, [r0, #100]	; 0x64
1a002240:	81c2      	strh	r2, [r0, #14]
1a002242:	e9c0 3304 	strd	r3, r3, [r0, #16]
1a002246:	6183      	str	r3, [r0, #24]
1a002248:	4619      	mov	r1, r3
1a00224a:	2208      	movs	r2, #8
1a00224c:	305c      	adds	r0, #92	; 0x5c
1a00224e:	f000 f90a 	bl	1a002466 <memset>
1a002252:	4b05      	ldr	r3, [pc, #20]	; (1a002268 <std+0x38>)
1a002254:	6263      	str	r3, [r4, #36]	; 0x24
1a002256:	4b05      	ldr	r3, [pc, #20]	; (1a00226c <std+0x3c>)
1a002258:	62a3      	str	r3, [r4, #40]	; 0x28
1a00225a:	4b05      	ldr	r3, [pc, #20]	; (1a002270 <std+0x40>)
1a00225c:	62e3      	str	r3, [r4, #44]	; 0x2c
1a00225e:	4b05      	ldr	r3, [pc, #20]	; (1a002274 <std+0x44>)
1a002260:	6224      	str	r4, [r4, #32]
1a002262:	6323      	str	r3, [r4, #48]	; 0x30
1a002264:	bd10      	pop	{r4, pc}
1a002266:	bf00      	nop
1a002268:	1a0026b5 	.word	0x1a0026b5
1a00226c:	1a0026d7 	.word	0x1a0026d7
1a002270:	1a00270f 	.word	0x1a00270f
1a002274:	1a002733 	.word	0x1a002733

1a002278 <_cleanup_r>:
1a002278:	4901      	ldr	r1, [pc, #4]	; (1a002280 <_cleanup_r+0x8>)
1a00227a:	f000 b8af 	b.w	1a0023dc <_fwalk_reent>
1a00227e:	bf00      	nop
1a002280:	1a0021b9 	.word	0x1a0021b9

1a002284 <__sfmoreglue>:
1a002284:	b570      	push	{r4, r5, r6, lr}
1a002286:	1e4a      	subs	r2, r1, #1
1a002288:	2568      	movs	r5, #104	; 0x68
1a00228a:	4355      	muls	r5, r2
1a00228c:	460e      	mov	r6, r1
1a00228e:	f105 0174 	add.w	r1, r5, #116	; 0x74
1a002292:	f000 f93f 	bl	1a002514 <_malloc_r>
1a002296:	4604      	mov	r4, r0
1a002298:	b140      	cbz	r0, 1a0022ac <__sfmoreglue+0x28>
1a00229a:	2100      	movs	r1, #0
1a00229c:	e9c0 1600 	strd	r1, r6, [r0]
1a0022a0:	300c      	adds	r0, #12
1a0022a2:	60a0      	str	r0, [r4, #8]
1a0022a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
1a0022a8:	f000 f8dd 	bl	1a002466 <memset>
1a0022ac:	4620      	mov	r0, r4
1a0022ae:	bd70      	pop	{r4, r5, r6, pc}

1a0022b0 <__sfp_lock_acquire>:
1a0022b0:	4801      	ldr	r0, [pc, #4]	; (1a0022b8 <__sfp_lock_acquire+0x8>)
1a0022b2:	f000 b8d6 	b.w	1a002462 <__retarget_lock_acquire_recursive>
1a0022b6:	bf00      	nop
1a0022b8:	10000168 	.word	0x10000168

1a0022bc <__sfp_lock_release>:
1a0022bc:	4801      	ldr	r0, [pc, #4]	; (1a0022c4 <__sfp_lock_release+0x8>)
1a0022be:	f000 b8d1 	b.w	1a002464 <__retarget_lock_release_recursive>
1a0022c2:	bf00      	nop
1a0022c4:	10000168 	.word	0x10000168

1a0022c8 <__sinit_lock_acquire>:
1a0022c8:	4801      	ldr	r0, [pc, #4]	; (1a0022d0 <__sinit_lock_acquire+0x8>)
1a0022ca:	f000 b8ca 	b.w	1a002462 <__retarget_lock_acquire_recursive>
1a0022ce:	bf00      	nop
1a0022d0:	10000163 	.word	0x10000163

1a0022d4 <__sinit_lock_release>:
1a0022d4:	4801      	ldr	r0, [pc, #4]	; (1a0022dc <__sinit_lock_release+0x8>)
1a0022d6:	f000 b8c5 	b.w	1a002464 <__retarget_lock_release_recursive>
1a0022da:	bf00      	nop
1a0022dc:	10000163 	.word	0x10000163

1a0022e0 <__sinit>:
1a0022e0:	b510      	push	{r4, lr}
1a0022e2:	4604      	mov	r4, r0
1a0022e4:	f7ff fff0 	bl	1a0022c8 <__sinit_lock_acquire>
1a0022e8:	69a3      	ldr	r3, [r4, #24]
1a0022ea:	b11b      	cbz	r3, 1a0022f4 <__sinit+0x14>
1a0022ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a0022f0:	f7ff bff0 	b.w	1a0022d4 <__sinit_lock_release>
1a0022f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
1a0022f8:	6523      	str	r3, [r4, #80]	; 0x50
1a0022fa:	4b13      	ldr	r3, [pc, #76]	; (1a002348 <__sinit+0x68>)
1a0022fc:	4a13      	ldr	r2, [pc, #76]	; (1a00234c <__sinit+0x6c>)
1a0022fe:	681b      	ldr	r3, [r3, #0]
1a002300:	62a2      	str	r2, [r4, #40]	; 0x28
1a002302:	42a3      	cmp	r3, r4
1a002304:	bf04      	itt	eq
1a002306:	2301      	moveq	r3, #1
1a002308:	61a3      	streq	r3, [r4, #24]
1a00230a:	4620      	mov	r0, r4
1a00230c:	f000 f820 	bl	1a002350 <__sfp>
1a002310:	6060      	str	r0, [r4, #4]
1a002312:	4620      	mov	r0, r4
1a002314:	f000 f81c 	bl	1a002350 <__sfp>
1a002318:	60a0      	str	r0, [r4, #8]
1a00231a:	4620      	mov	r0, r4
1a00231c:	f000 f818 	bl	1a002350 <__sfp>
1a002320:	2200      	movs	r2, #0
1a002322:	60e0      	str	r0, [r4, #12]
1a002324:	2104      	movs	r1, #4
1a002326:	6860      	ldr	r0, [r4, #4]
1a002328:	f7ff ff82 	bl	1a002230 <std>
1a00232c:	2201      	movs	r2, #1
1a00232e:	2109      	movs	r1, #9
1a002330:	68a0      	ldr	r0, [r4, #8]
1a002332:	f7ff ff7d 	bl	1a002230 <std>
1a002336:	2202      	movs	r2, #2
1a002338:	2112      	movs	r1, #18
1a00233a:	68e0      	ldr	r0, [r4, #12]
1a00233c:	f7ff ff78 	bl	1a002230 <std>
1a002340:	2301      	movs	r3, #1
1a002342:	61a3      	str	r3, [r4, #24]
1a002344:	e7d2      	b.n	1a0022ec <__sinit+0xc>
1a002346:	bf00      	nop
1a002348:	1a002de0 	.word	0x1a002de0
1a00234c:	1a002279 	.word	0x1a002279

1a002350 <__sfp>:
1a002350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a002352:	4607      	mov	r7, r0
1a002354:	f7ff ffac 	bl	1a0022b0 <__sfp_lock_acquire>
1a002358:	4b1e      	ldr	r3, [pc, #120]	; (1a0023d4 <__sfp+0x84>)
1a00235a:	681e      	ldr	r6, [r3, #0]
1a00235c:	69b3      	ldr	r3, [r6, #24]
1a00235e:	b913      	cbnz	r3, 1a002366 <__sfp+0x16>
1a002360:	4630      	mov	r0, r6
1a002362:	f7ff ffbd 	bl	1a0022e0 <__sinit>
1a002366:	3648      	adds	r6, #72	; 0x48
1a002368:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
1a00236c:	3b01      	subs	r3, #1
1a00236e:	d503      	bpl.n	1a002378 <__sfp+0x28>
1a002370:	6833      	ldr	r3, [r6, #0]
1a002372:	b30b      	cbz	r3, 1a0023b8 <__sfp+0x68>
1a002374:	6836      	ldr	r6, [r6, #0]
1a002376:	e7f7      	b.n	1a002368 <__sfp+0x18>
1a002378:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
1a00237c:	b9d5      	cbnz	r5, 1a0023b4 <__sfp+0x64>
1a00237e:	4b16      	ldr	r3, [pc, #88]	; (1a0023d8 <__sfp+0x88>)
1a002380:	60e3      	str	r3, [r4, #12]
1a002382:	f104 0058 	add.w	r0, r4, #88	; 0x58
1a002386:	6665      	str	r5, [r4, #100]	; 0x64
1a002388:	f000 f86a 	bl	1a002460 <__retarget_lock_init_recursive>
1a00238c:	f7ff ff96 	bl	1a0022bc <__sfp_lock_release>
1a002390:	6025      	str	r5, [r4, #0]
1a002392:	e9c4 5501 	strd	r5, r5, [r4, #4]
1a002396:	e9c4 5504 	strd	r5, r5, [r4, #16]
1a00239a:	61a5      	str	r5, [r4, #24]
1a00239c:	2208      	movs	r2, #8
1a00239e:	4629      	mov	r1, r5
1a0023a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
1a0023a4:	f000 f85f 	bl	1a002466 <memset>
1a0023a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
1a0023ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
1a0023b0:	4620      	mov	r0, r4
1a0023b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0023b4:	3468      	adds	r4, #104	; 0x68
1a0023b6:	e7d9      	b.n	1a00236c <__sfp+0x1c>
1a0023b8:	2104      	movs	r1, #4
1a0023ba:	4638      	mov	r0, r7
1a0023bc:	f7ff ff62 	bl	1a002284 <__sfmoreglue>
1a0023c0:	4604      	mov	r4, r0
1a0023c2:	6030      	str	r0, [r6, #0]
1a0023c4:	2800      	cmp	r0, #0
1a0023c6:	d1d5      	bne.n	1a002374 <__sfp+0x24>
1a0023c8:	f7ff ff78 	bl	1a0022bc <__sfp_lock_release>
1a0023cc:	230c      	movs	r3, #12
1a0023ce:	603b      	str	r3, [r7, #0]
1a0023d0:	e7ee      	b.n	1a0023b0 <__sfp+0x60>
1a0023d2:	bf00      	nop
1a0023d4:	1a002de0 	.word	0x1a002de0
1a0023d8:	ffff0001 	.word	0xffff0001

1a0023dc <_fwalk_reent>:
1a0023dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a0023e0:	4680      	mov	r8, r0
1a0023e2:	4689      	mov	r9, r1
1a0023e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
1a0023e8:	2600      	movs	r6, #0
1a0023ea:	b914      	cbnz	r4, 1a0023f2 <_fwalk_reent+0x16>
1a0023ec:	4630      	mov	r0, r6
1a0023ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a0023f2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
1a0023f6:	3f01      	subs	r7, #1
1a0023f8:	d501      	bpl.n	1a0023fe <_fwalk_reent+0x22>
1a0023fa:	6824      	ldr	r4, [r4, #0]
1a0023fc:	e7f5      	b.n	1a0023ea <_fwalk_reent+0xe>
1a0023fe:	89ab      	ldrh	r3, [r5, #12]
1a002400:	2b01      	cmp	r3, #1
1a002402:	d907      	bls.n	1a002414 <_fwalk_reent+0x38>
1a002404:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
1a002408:	3301      	adds	r3, #1
1a00240a:	d003      	beq.n	1a002414 <_fwalk_reent+0x38>
1a00240c:	4629      	mov	r1, r5
1a00240e:	4640      	mov	r0, r8
1a002410:	47c8      	blx	r9
1a002412:	4306      	orrs	r6, r0
1a002414:	3568      	adds	r5, #104	; 0x68
1a002416:	e7ee      	b.n	1a0023f6 <_fwalk_reent+0x1a>

1a002418 <__libc_init_array>:
1a002418:	b570      	push	{r4, r5, r6, lr}
1a00241a:	4d0d      	ldr	r5, [pc, #52]	; (1a002450 <__libc_init_array+0x38>)
1a00241c:	4c0d      	ldr	r4, [pc, #52]	; (1a002454 <__libc_init_array+0x3c>)
1a00241e:	1b64      	subs	r4, r4, r5
1a002420:	10a4      	asrs	r4, r4, #2
1a002422:	2600      	movs	r6, #0
1a002424:	42a6      	cmp	r6, r4
1a002426:	d109      	bne.n	1a00243c <__libc_init_array+0x24>
1a002428:	4d0b      	ldr	r5, [pc, #44]	; (1a002458 <__libc_init_array+0x40>)
1a00242a:	4c0c      	ldr	r4, [pc, #48]	; (1a00245c <__libc_init_array+0x44>)
1a00242c:	f7fd ffe1 	bl	1a0003f2 <_init>
1a002430:	1b64      	subs	r4, r4, r5
1a002432:	10a4      	asrs	r4, r4, #2
1a002434:	2600      	movs	r6, #0
1a002436:	42a6      	cmp	r6, r4
1a002438:	d105      	bne.n	1a002446 <__libc_init_array+0x2e>
1a00243a:	bd70      	pop	{r4, r5, r6, pc}
1a00243c:	f855 3b04 	ldr.w	r3, [r5], #4
1a002440:	4798      	blx	r3
1a002442:	3601      	adds	r6, #1
1a002444:	e7ee      	b.n	1a002424 <__libc_init_array+0xc>
1a002446:	f855 3b04 	ldr.w	r3, [r5], #4
1a00244a:	4798      	blx	r3
1a00244c:	3601      	adds	r6, #1
1a00244e:	e7f2      	b.n	1a002436 <__libc_init_array+0x1e>
1a002450:	1a002de4 	.word	0x1a002de4
1a002454:	1a002de4 	.word	0x1a002de4
1a002458:	1a002de4 	.word	0x1a002de4
1a00245c:	1a002de8 	.word	0x1a002de8

1a002460 <__retarget_lock_init_recursive>:
1a002460:	4770      	bx	lr

1a002462 <__retarget_lock_acquire_recursive>:
1a002462:	4770      	bx	lr

1a002464 <__retarget_lock_release_recursive>:
1a002464:	4770      	bx	lr

1a002466 <memset>:
1a002466:	4402      	add	r2, r0
1a002468:	4603      	mov	r3, r0
1a00246a:	4293      	cmp	r3, r2
1a00246c:	d100      	bne.n	1a002470 <memset+0xa>
1a00246e:	4770      	bx	lr
1a002470:	f803 1b01 	strb.w	r1, [r3], #1
1a002474:	e7f9      	b.n	1a00246a <memset+0x4>
1a002476:	Address 0x1a002476 is out of bounds.


1a002478 <_free_r>:
1a002478:	b538      	push	{r3, r4, r5, lr}
1a00247a:	4605      	mov	r5, r0
1a00247c:	2900      	cmp	r1, #0
1a00247e:	d045      	beq.n	1a00250c <_free_r+0x94>
1a002480:	f851 3c04 	ldr.w	r3, [r1, #-4]
1a002484:	1f0c      	subs	r4, r1, #4
1a002486:	2b00      	cmp	r3, #0
1a002488:	bfb8      	it	lt
1a00248a:	18e4      	addlt	r4, r4, r3
1a00248c:	f000 fa7a 	bl	1a002984 <__malloc_lock>
1a002490:	4a1f      	ldr	r2, [pc, #124]	; (1a002510 <_free_r+0x98>)
1a002492:	6813      	ldr	r3, [r2, #0]
1a002494:	4610      	mov	r0, r2
1a002496:	b933      	cbnz	r3, 1a0024a6 <_free_r+0x2e>
1a002498:	6063      	str	r3, [r4, #4]
1a00249a:	6014      	str	r4, [r2, #0]
1a00249c:	4628      	mov	r0, r5
1a00249e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a0024a2:	f000 ba75 	b.w	1a002990 <__malloc_unlock>
1a0024a6:	42a3      	cmp	r3, r4
1a0024a8:	d90c      	bls.n	1a0024c4 <_free_r+0x4c>
1a0024aa:	6821      	ldr	r1, [r4, #0]
1a0024ac:	1862      	adds	r2, r4, r1
1a0024ae:	4293      	cmp	r3, r2
1a0024b0:	bf04      	itt	eq
1a0024b2:	681a      	ldreq	r2, [r3, #0]
1a0024b4:	685b      	ldreq	r3, [r3, #4]
1a0024b6:	6063      	str	r3, [r4, #4]
1a0024b8:	bf04      	itt	eq
1a0024ba:	1852      	addeq	r2, r2, r1
1a0024bc:	6022      	streq	r2, [r4, #0]
1a0024be:	6004      	str	r4, [r0, #0]
1a0024c0:	e7ec      	b.n	1a00249c <_free_r+0x24>
1a0024c2:	4613      	mov	r3, r2
1a0024c4:	685a      	ldr	r2, [r3, #4]
1a0024c6:	b10a      	cbz	r2, 1a0024cc <_free_r+0x54>
1a0024c8:	42a2      	cmp	r2, r4
1a0024ca:	d9fa      	bls.n	1a0024c2 <_free_r+0x4a>
1a0024cc:	6819      	ldr	r1, [r3, #0]
1a0024ce:	1858      	adds	r0, r3, r1
1a0024d0:	42a0      	cmp	r0, r4
1a0024d2:	d10b      	bne.n	1a0024ec <_free_r+0x74>
1a0024d4:	6820      	ldr	r0, [r4, #0]
1a0024d6:	4401      	add	r1, r0
1a0024d8:	1858      	adds	r0, r3, r1
1a0024da:	4282      	cmp	r2, r0
1a0024dc:	6019      	str	r1, [r3, #0]
1a0024de:	d1dd      	bne.n	1a00249c <_free_r+0x24>
1a0024e0:	6810      	ldr	r0, [r2, #0]
1a0024e2:	6852      	ldr	r2, [r2, #4]
1a0024e4:	605a      	str	r2, [r3, #4]
1a0024e6:	4401      	add	r1, r0
1a0024e8:	6019      	str	r1, [r3, #0]
1a0024ea:	e7d7      	b.n	1a00249c <_free_r+0x24>
1a0024ec:	d902      	bls.n	1a0024f4 <_free_r+0x7c>
1a0024ee:	230c      	movs	r3, #12
1a0024f0:	602b      	str	r3, [r5, #0]
1a0024f2:	e7d3      	b.n	1a00249c <_free_r+0x24>
1a0024f4:	6820      	ldr	r0, [r4, #0]
1a0024f6:	1821      	adds	r1, r4, r0
1a0024f8:	428a      	cmp	r2, r1
1a0024fa:	bf04      	itt	eq
1a0024fc:	6811      	ldreq	r1, [r2, #0]
1a0024fe:	6852      	ldreq	r2, [r2, #4]
1a002500:	6062      	str	r2, [r4, #4]
1a002502:	bf04      	itt	eq
1a002504:	1809      	addeq	r1, r1, r0
1a002506:	6021      	streq	r1, [r4, #0]
1a002508:	605c      	str	r4, [r3, #4]
1a00250a:	e7c7      	b.n	1a00249c <_free_r+0x24>
1a00250c:	bd38      	pop	{r3, r4, r5, pc}
1a00250e:	bf00      	nop
1a002510:	10000150 	.word	0x10000150

1a002514 <_malloc_r>:
1a002514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a002516:	1ccd      	adds	r5, r1, #3
1a002518:	f025 0503 	bic.w	r5, r5, #3
1a00251c:	3508      	adds	r5, #8
1a00251e:	2d0c      	cmp	r5, #12
1a002520:	bf38      	it	cc
1a002522:	250c      	movcc	r5, #12
1a002524:	2d00      	cmp	r5, #0
1a002526:	4606      	mov	r6, r0
1a002528:	db01      	blt.n	1a00252e <_malloc_r+0x1a>
1a00252a:	42a9      	cmp	r1, r5
1a00252c:	d903      	bls.n	1a002536 <_malloc_r+0x22>
1a00252e:	230c      	movs	r3, #12
1a002530:	6033      	str	r3, [r6, #0]
1a002532:	2000      	movs	r0, #0
1a002534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a002536:	f000 fa25 	bl	1a002984 <__malloc_lock>
1a00253a:	4921      	ldr	r1, [pc, #132]	; (1a0025c0 <_malloc_r+0xac>)
1a00253c:	680a      	ldr	r2, [r1, #0]
1a00253e:	4614      	mov	r4, r2
1a002540:	b99c      	cbnz	r4, 1a00256a <_malloc_r+0x56>
1a002542:	4f20      	ldr	r7, [pc, #128]	; (1a0025c4 <_malloc_r+0xb0>)
1a002544:	683b      	ldr	r3, [r7, #0]
1a002546:	b923      	cbnz	r3, 1a002552 <_malloc_r+0x3e>
1a002548:	4621      	mov	r1, r4
1a00254a:	4630      	mov	r0, r6
1a00254c:	f7fd ffa6 	bl	1a00049c <_sbrk_r>
1a002550:	6038      	str	r0, [r7, #0]
1a002552:	4629      	mov	r1, r5
1a002554:	4630      	mov	r0, r6
1a002556:	f7fd ffa1 	bl	1a00049c <_sbrk_r>
1a00255a:	1c43      	adds	r3, r0, #1
1a00255c:	d123      	bne.n	1a0025a6 <_malloc_r+0x92>
1a00255e:	230c      	movs	r3, #12
1a002560:	6033      	str	r3, [r6, #0]
1a002562:	4630      	mov	r0, r6
1a002564:	f000 fa14 	bl	1a002990 <__malloc_unlock>
1a002568:	e7e3      	b.n	1a002532 <_malloc_r+0x1e>
1a00256a:	6823      	ldr	r3, [r4, #0]
1a00256c:	1b5b      	subs	r3, r3, r5
1a00256e:	d417      	bmi.n	1a0025a0 <_malloc_r+0x8c>
1a002570:	2b0b      	cmp	r3, #11
1a002572:	d903      	bls.n	1a00257c <_malloc_r+0x68>
1a002574:	6023      	str	r3, [r4, #0]
1a002576:	441c      	add	r4, r3
1a002578:	6025      	str	r5, [r4, #0]
1a00257a:	e004      	b.n	1a002586 <_malloc_r+0x72>
1a00257c:	6863      	ldr	r3, [r4, #4]
1a00257e:	42a2      	cmp	r2, r4
1a002580:	bf0c      	ite	eq
1a002582:	600b      	streq	r3, [r1, #0]
1a002584:	6053      	strne	r3, [r2, #4]
1a002586:	4630      	mov	r0, r6
1a002588:	f000 fa02 	bl	1a002990 <__malloc_unlock>
1a00258c:	f104 000b 	add.w	r0, r4, #11
1a002590:	1d23      	adds	r3, r4, #4
1a002592:	f020 0007 	bic.w	r0, r0, #7
1a002596:	1ac2      	subs	r2, r0, r3
1a002598:	d0cc      	beq.n	1a002534 <_malloc_r+0x20>
1a00259a:	1a1b      	subs	r3, r3, r0
1a00259c:	50a3      	str	r3, [r4, r2]
1a00259e:	e7c9      	b.n	1a002534 <_malloc_r+0x20>
1a0025a0:	4622      	mov	r2, r4
1a0025a2:	6864      	ldr	r4, [r4, #4]
1a0025a4:	e7cc      	b.n	1a002540 <_malloc_r+0x2c>
1a0025a6:	1cc4      	adds	r4, r0, #3
1a0025a8:	f024 0403 	bic.w	r4, r4, #3
1a0025ac:	42a0      	cmp	r0, r4
1a0025ae:	d0e3      	beq.n	1a002578 <_malloc_r+0x64>
1a0025b0:	1a21      	subs	r1, r4, r0
1a0025b2:	4630      	mov	r0, r6
1a0025b4:	f7fd ff72 	bl	1a00049c <_sbrk_r>
1a0025b8:	3001      	adds	r0, #1
1a0025ba:	d1dd      	bne.n	1a002578 <_malloc_r+0x64>
1a0025bc:	e7cf      	b.n	1a00255e <_malloc_r+0x4a>
1a0025be:	bf00      	nop
1a0025c0:	10000150 	.word	0x10000150
1a0025c4:	10000154 	.word	0x10000154

1a0025c8 <_puts_r>:
1a0025c8:	b570      	push	{r4, r5, r6, lr}
1a0025ca:	460e      	mov	r6, r1
1a0025cc:	4605      	mov	r5, r0
1a0025ce:	b118      	cbz	r0, 1a0025d8 <_puts_r+0x10>
1a0025d0:	6983      	ldr	r3, [r0, #24]
1a0025d2:	b90b      	cbnz	r3, 1a0025d8 <_puts_r+0x10>
1a0025d4:	f7ff fe84 	bl	1a0022e0 <__sinit>
1a0025d8:	69ab      	ldr	r3, [r5, #24]
1a0025da:	68ac      	ldr	r4, [r5, #8]
1a0025dc:	b913      	cbnz	r3, 1a0025e4 <_puts_r+0x1c>
1a0025de:	4628      	mov	r0, r5
1a0025e0:	f7ff fe7e 	bl	1a0022e0 <__sinit>
1a0025e4:	4b2c      	ldr	r3, [pc, #176]	; (1a002698 <_puts_r+0xd0>)
1a0025e6:	429c      	cmp	r4, r3
1a0025e8:	d120      	bne.n	1a00262c <_puts_r+0x64>
1a0025ea:	686c      	ldr	r4, [r5, #4]
1a0025ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a0025ee:	07db      	lsls	r3, r3, #31
1a0025f0:	d405      	bmi.n	1a0025fe <_puts_r+0x36>
1a0025f2:	89a3      	ldrh	r3, [r4, #12]
1a0025f4:	0598      	lsls	r0, r3, #22
1a0025f6:	d402      	bmi.n	1a0025fe <_puts_r+0x36>
1a0025f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a0025fa:	f7ff ff32 	bl	1a002462 <__retarget_lock_acquire_recursive>
1a0025fe:	89a3      	ldrh	r3, [r4, #12]
1a002600:	0719      	lsls	r1, r3, #28
1a002602:	d51d      	bpl.n	1a002640 <_puts_r+0x78>
1a002604:	6923      	ldr	r3, [r4, #16]
1a002606:	b1db      	cbz	r3, 1a002640 <_puts_r+0x78>
1a002608:	3e01      	subs	r6, #1
1a00260a:	68a3      	ldr	r3, [r4, #8]
1a00260c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
1a002610:	3b01      	subs	r3, #1
1a002612:	60a3      	str	r3, [r4, #8]
1a002614:	bb39      	cbnz	r1, 1a002666 <_puts_r+0x9e>
1a002616:	2b00      	cmp	r3, #0
1a002618:	da38      	bge.n	1a00268c <_puts_r+0xc4>
1a00261a:	4622      	mov	r2, r4
1a00261c:	210a      	movs	r1, #10
1a00261e:	4628      	mov	r0, r5
1a002620:	f000 f88c 	bl	1a00273c <__swbuf_r>
1a002624:	3001      	adds	r0, #1
1a002626:	d011      	beq.n	1a00264c <_puts_r+0x84>
1a002628:	250a      	movs	r5, #10
1a00262a:	e011      	b.n	1a002650 <_puts_r+0x88>
1a00262c:	4b1b      	ldr	r3, [pc, #108]	; (1a00269c <_puts_r+0xd4>)
1a00262e:	429c      	cmp	r4, r3
1a002630:	d101      	bne.n	1a002636 <_puts_r+0x6e>
1a002632:	68ac      	ldr	r4, [r5, #8]
1a002634:	e7da      	b.n	1a0025ec <_puts_r+0x24>
1a002636:	4b1a      	ldr	r3, [pc, #104]	; (1a0026a0 <_puts_r+0xd8>)
1a002638:	429c      	cmp	r4, r3
1a00263a:	bf08      	it	eq
1a00263c:	68ec      	ldreq	r4, [r5, #12]
1a00263e:	e7d5      	b.n	1a0025ec <_puts_r+0x24>
1a002640:	4621      	mov	r1, r4
1a002642:	4628      	mov	r0, r5
1a002644:	f000 f8cc 	bl	1a0027e0 <__swsetup_r>
1a002648:	2800      	cmp	r0, #0
1a00264a:	d0dd      	beq.n	1a002608 <_puts_r+0x40>
1a00264c:	f04f 35ff 	mov.w	r5, #4294967295
1a002650:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a002652:	07da      	lsls	r2, r3, #31
1a002654:	d405      	bmi.n	1a002662 <_puts_r+0x9a>
1a002656:	89a3      	ldrh	r3, [r4, #12]
1a002658:	059b      	lsls	r3, r3, #22
1a00265a:	d402      	bmi.n	1a002662 <_puts_r+0x9a>
1a00265c:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a00265e:	f7ff ff01 	bl	1a002464 <__retarget_lock_release_recursive>
1a002662:	4628      	mov	r0, r5
1a002664:	bd70      	pop	{r4, r5, r6, pc}
1a002666:	2b00      	cmp	r3, #0
1a002668:	da04      	bge.n	1a002674 <_puts_r+0xac>
1a00266a:	69a2      	ldr	r2, [r4, #24]
1a00266c:	429a      	cmp	r2, r3
1a00266e:	dc06      	bgt.n	1a00267e <_puts_r+0xb6>
1a002670:	290a      	cmp	r1, #10
1a002672:	d004      	beq.n	1a00267e <_puts_r+0xb6>
1a002674:	6823      	ldr	r3, [r4, #0]
1a002676:	1c5a      	adds	r2, r3, #1
1a002678:	6022      	str	r2, [r4, #0]
1a00267a:	7019      	strb	r1, [r3, #0]
1a00267c:	e7c5      	b.n	1a00260a <_puts_r+0x42>
1a00267e:	4622      	mov	r2, r4
1a002680:	4628      	mov	r0, r5
1a002682:	f000 f85b 	bl	1a00273c <__swbuf_r>
1a002686:	3001      	adds	r0, #1
1a002688:	d1bf      	bne.n	1a00260a <_puts_r+0x42>
1a00268a:	e7df      	b.n	1a00264c <_puts_r+0x84>
1a00268c:	6823      	ldr	r3, [r4, #0]
1a00268e:	250a      	movs	r5, #10
1a002690:	1c5a      	adds	r2, r3, #1
1a002692:	6022      	str	r2, [r4, #0]
1a002694:	701d      	strb	r5, [r3, #0]
1a002696:	e7db      	b.n	1a002650 <_puts_r+0x88>
1a002698:	1a002da0 	.word	0x1a002da0
1a00269c:	1a002dc0 	.word	0x1a002dc0
1a0026a0:	1a002d80 	.word	0x1a002d80

1a0026a4 <puts>:
1a0026a4:	4b02      	ldr	r3, [pc, #8]	; (1a0026b0 <puts+0xc>)
1a0026a6:	4601      	mov	r1, r0
1a0026a8:	6818      	ldr	r0, [r3, #0]
1a0026aa:	f7ff bf8d 	b.w	1a0025c8 <_puts_r>
1a0026ae:	bf00      	nop
1a0026b0:	10000090 	.word	0x10000090

1a0026b4 <__sread>:
1a0026b4:	b510      	push	{r4, lr}
1a0026b6:	460c      	mov	r4, r1
1a0026b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0026bc:	f7fd feb2 	bl	1a000424 <_read_r>
1a0026c0:	2800      	cmp	r0, #0
1a0026c2:	bfab      	itete	ge
1a0026c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
1a0026c6:	89a3      	ldrhlt	r3, [r4, #12]
1a0026c8:	181b      	addge	r3, r3, r0
1a0026ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
1a0026ce:	bfac      	ite	ge
1a0026d0:	6563      	strge	r3, [r4, #84]	; 0x54
1a0026d2:	81a3      	strhlt	r3, [r4, #12]
1a0026d4:	bd10      	pop	{r4, pc}

1a0026d6 <__swrite>:
1a0026d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0026da:	461f      	mov	r7, r3
1a0026dc:	898b      	ldrh	r3, [r1, #12]
1a0026de:	05db      	lsls	r3, r3, #23
1a0026e0:	4605      	mov	r5, r0
1a0026e2:	460c      	mov	r4, r1
1a0026e4:	4616      	mov	r6, r2
1a0026e6:	d505      	bpl.n	1a0026f4 <__swrite+0x1e>
1a0026e8:	2302      	movs	r3, #2
1a0026ea:	2200      	movs	r2, #0
1a0026ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0026f0:	f7fd fe93 	bl	1a00041a <_lseek_r>
1a0026f4:	89a3      	ldrh	r3, [r4, #12]
1a0026f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a0026fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
1a0026fe:	81a3      	strh	r3, [r4, #12]
1a002700:	4632      	mov	r2, r6
1a002702:	463b      	mov	r3, r7
1a002704:	4628      	mov	r0, r5
1a002706:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a00270a:	f7fd beb2 	b.w	1a000472 <_write_r>

1a00270e <__sseek>:
1a00270e:	b510      	push	{r4, lr}
1a002710:	460c      	mov	r4, r1
1a002712:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a002716:	f7fd fe80 	bl	1a00041a <_lseek_r>
1a00271a:	1c43      	adds	r3, r0, #1
1a00271c:	89a3      	ldrh	r3, [r4, #12]
1a00271e:	bf15      	itete	ne
1a002720:	6560      	strne	r0, [r4, #84]	; 0x54
1a002722:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
1a002726:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
1a00272a:	81a3      	strheq	r3, [r4, #12]
1a00272c:	bf18      	it	ne
1a00272e:	81a3      	strhne	r3, [r4, #12]
1a002730:	bd10      	pop	{r4, pc}

1a002732 <__sclose>:
1a002732:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a002736:	f7fd be5d 	b.w	1a0003f4 <_close_r>
1a00273a:	Address 0x1a00273a is out of bounds.


1a00273c <__swbuf_r>:
1a00273c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a00273e:	460e      	mov	r6, r1
1a002740:	4614      	mov	r4, r2
1a002742:	4605      	mov	r5, r0
1a002744:	b118      	cbz	r0, 1a00274e <__swbuf_r+0x12>
1a002746:	6983      	ldr	r3, [r0, #24]
1a002748:	b90b      	cbnz	r3, 1a00274e <__swbuf_r+0x12>
1a00274a:	f7ff fdc9 	bl	1a0022e0 <__sinit>
1a00274e:	4b21      	ldr	r3, [pc, #132]	; (1a0027d4 <__swbuf_r+0x98>)
1a002750:	429c      	cmp	r4, r3
1a002752:	d12b      	bne.n	1a0027ac <__swbuf_r+0x70>
1a002754:	686c      	ldr	r4, [r5, #4]
1a002756:	69a3      	ldr	r3, [r4, #24]
1a002758:	60a3      	str	r3, [r4, #8]
1a00275a:	89a3      	ldrh	r3, [r4, #12]
1a00275c:	071a      	lsls	r2, r3, #28
1a00275e:	d52f      	bpl.n	1a0027c0 <__swbuf_r+0x84>
1a002760:	6923      	ldr	r3, [r4, #16]
1a002762:	b36b      	cbz	r3, 1a0027c0 <__swbuf_r+0x84>
1a002764:	6923      	ldr	r3, [r4, #16]
1a002766:	6820      	ldr	r0, [r4, #0]
1a002768:	1ac0      	subs	r0, r0, r3
1a00276a:	6963      	ldr	r3, [r4, #20]
1a00276c:	b2f6      	uxtb	r6, r6
1a00276e:	4283      	cmp	r3, r0
1a002770:	4637      	mov	r7, r6
1a002772:	dc04      	bgt.n	1a00277e <__swbuf_r+0x42>
1a002774:	4621      	mov	r1, r4
1a002776:	4628      	mov	r0, r5
1a002778:	f7ff fd1e 	bl	1a0021b8 <_fflush_r>
1a00277c:	bb30      	cbnz	r0, 1a0027cc <__swbuf_r+0x90>
1a00277e:	68a3      	ldr	r3, [r4, #8]
1a002780:	3b01      	subs	r3, #1
1a002782:	60a3      	str	r3, [r4, #8]
1a002784:	6823      	ldr	r3, [r4, #0]
1a002786:	1c5a      	adds	r2, r3, #1
1a002788:	6022      	str	r2, [r4, #0]
1a00278a:	701e      	strb	r6, [r3, #0]
1a00278c:	6963      	ldr	r3, [r4, #20]
1a00278e:	3001      	adds	r0, #1
1a002790:	4283      	cmp	r3, r0
1a002792:	d004      	beq.n	1a00279e <__swbuf_r+0x62>
1a002794:	89a3      	ldrh	r3, [r4, #12]
1a002796:	07db      	lsls	r3, r3, #31
1a002798:	d506      	bpl.n	1a0027a8 <__swbuf_r+0x6c>
1a00279a:	2e0a      	cmp	r6, #10
1a00279c:	d104      	bne.n	1a0027a8 <__swbuf_r+0x6c>
1a00279e:	4621      	mov	r1, r4
1a0027a0:	4628      	mov	r0, r5
1a0027a2:	f7ff fd09 	bl	1a0021b8 <_fflush_r>
1a0027a6:	b988      	cbnz	r0, 1a0027cc <__swbuf_r+0x90>
1a0027a8:	4638      	mov	r0, r7
1a0027aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0027ac:	4b0a      	ldr	r3, [pc, #40]	; (1a0027d8 <__swbuf_r+0x9c>)
1a0027ae:	429c      	cmp	r4, r3
1a0027b0:	d101      	bne.n	1a0027b6 <__swbuf_r+0x7a>
1a0027b2:	68ac      	ldr	r4, [r5, #8]
1a0027b4:	e7cf      	b.n	1a002756 <__swbuf_r+0x1a>
1a0027b6:	4b09      	ldr	r3, [pc, #36]	; (1a0027dc <__swbuf_r+0xa0>)
1a0027b8:	429c      	cmp	r4, r3
1a0027ba:	bf08      	it	eq
1a0027bc:	68ec      	ldreq	r4, [r5, #12]
1a0027be:	e7ca      	b.n	1a002756 <__swbuf_r+0x1a>
1a0027c0:	4621      	mov	r1, r4
1a0027c2:	4628      	mov	r0, r5
1a0027c4:	f000 f80c 	bl	1a0027e0 <__swsetup_r>
1a0027c8:	2800      	cmp	r0, #0
1a0027ca:	d0cb      	beq.n	1a002764 <__swbuf_r+0x28>
1a0027cc:	f04f 37ff 	mov.w	r7, #4294967295
1a0027d0:	e7ea      	b.n	1a0027a8 <__swbuf_r+0x6c>
1a0027d2:	bf00      	nop
1a0027d4:	1a002da0 	.word	0x1a002da0
1a0027d8:	1a002dc0 	.word	0x1a002dc0
1a0027dc:	1a002d80 	.word	0x1a002d80

1a0027e0 <__swsetup_r>:
1a0027e0:	4b32      	ldr	r3, [pc, #200]	; (1a0028ac <__swsetup_r+0xcc>)
1a0027e2:	b570      	push	{r4, r5, r6, lr}
1a0027e4:	681d      	ldr	r5, [r3, #0]
1a0027e6:	4606      	mov	r6, r0
1a0027e8:	460c      	mov	r4, r1
1a0027ea:	b125      	cbz	r5, 1a0027f6 <__swsetup_r+0x16>
1a0027ec:	69ab      	ldr	r3, [r5, #24]
1a0027ee:	b913      	cbnz	r3, 1a0027f6 <__swsetup_r+0x16>
1a0027f0:	4628      	mov	r0, r5
1a0027f2:	f7ff fd75 	bl	1a0022e0 <__sinit>
1a0027f6:	4b2e      	ldr	r3, [pc, #184]	; (1a0028b0 <__swsetup_r+0xd0>)
1a0027f8:	429c      	cmp	r4, r3
1a0027fa:	d10f      	bne.n	1a00281c <__swsetup_r+0x3c>
1a0027fc:	686c      	ldr	r4, [r5, #4]
1a0027fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a002802:	b29a      	uxth	r2, r3
1a002804:	0715      	lsls	r5, r2, #28
1a002806:	d42c      	bmi.n	1a002862 <__swsetup_r+0x82>
1a002808:	06d0      	lsls	r0, r2, #27
1a00280a:	d411      	bmi.n	1a002830 <__swsetup_r+0x50>
1a00280c:	2209      	movs	r2, #9
1a00280e:	6032      	str	r2, [r6, #0]
1a002810:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a002814:	81a3      	strh	r3, [r4, #12]
1a002816:	f04f 30ff 	mov.w	r0, #4294967295
1a00281a:	e03e      	b.n	1a00289a <__swsetup_r+0xba>
1a00281c:	4b25      	ldr	r3, [pc, #148]	; (1a0028b4 <__swsetup_r+0xd4>)
1a00281e:	429c      	cmp	r4, r3
1a002820:	d101      	bne.n	1a002826 <__swsetup_r+0x46>
1a002822:	68ac      	ldr	r4, [r5, #8]
1a002824:	e7eb      	b.n	1a0027fe <__swsetup_r+0x1e>
1a002826:	4b24      	ldr	r3, [pc, #144]	; (1a0028b8 <__swsetup_r+0xd8>)
1a002828:	429c      	cmp	r4, r3
1a00282a:	bf08      	it	eq
1a00282c:	68ec      	ldreq	r4, [r5, #12]
1a00282e:	e7e6      	b.n	1a0027fe <__swsetup_r+0x1e>
1a002830:	0751      	lsls	r1, r2, #29
1a002832:	d512      	bpl.n	1a00285a <__swsetup_r+0x7a>
1a002834:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a002836:	b141      	cbz	r1, 1a00284a <__swsetup_r+0x6a>
1a002838:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a00283c:	4299      	cmp	r1, r3
1a00283e:	d002      	beq.n	1a002846 <__swsetup_r+0x66>
1a002840:	4630      	mov	r0, r6
1a002842:	f7ff fe19 	bl	1a002478 <_free_r>
1a002846:	2300      	movs	r3, #0
1a002848:	6363      	str	r3, [r4, #52]	; 0x34
1a00284a:	89a3      	ldrh	r3, [r4, #12]
1a00284c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
1a002850:	81a3      	strh	r3, [r4, #12]
1a002852:	2300      	movs	r3, #0
1a002854:	6063      	str	r3, [r4, #4]
1a002856:	6923      	ldr	r3, [r4, #16]
1a002858:	6023      	str	r3, [r4, #0]
1a00285a:	89a3      	ldrh	r3, [r4, #12]
1a00285c:	f043 0308 	orr.w	r3, r3, #8
1a002860:	81a3      	strh	r3, [r4, #12]
1a002862:	6923      	ldr	r3, [r4, #16]
1a002864:	b94b      	cbnz	r3, 1a00287a <__swsetup_r+0x9a>
1a002866:	89a3      	ldrh	r3, [r4, #12]
1a002868:	f403 7320 	and.w	r3, r3, #640	; 0x280
1a00286c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a002870:	d003      	beq.n	1a00287a <__swsetup_r+0x9a>
1a002872:	4621      	mov	r1, r4
1a002874:	4630      	mov	r0, r6
1a002876:	f000 f845 	bl	1a002904 <__smakebuf_r>
1a00287a:	89a2      	ldrh	r2, [r4, #12]
1a00287c:	f012 0301 	ands.w	r3, r2, #1
1a002880:	d00c      	beq.n	1a00289c <__swsetup_r+0xbc>
1a002882:	2300      	movs	r3, #0
1a002884:	60a3      	str	r3, [r4, #8]
1a002886:	6963      	ldr	r3, [r4, #20]
1a002888:	425b      	negs	r3, r3
1a00288a:	61a3      	str	r3, [r4, #24]
1a00288c:	6923      	ldr	r3, [r4, #16]
1a00288e:	b953      	cbnz	r3, 1a0028a6 <__swsetup_r+0xc6>
1a002890:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a002894:	f013 0080 	ands.w	r0, r3, #128	; 0x80
1a002898:	d1ba      	bne.n	1a002810 <__swsetup_r+0x30>
1a00289a:	bd70      	pop	{r4, r5, r6, pc}
1a00289c:	0792      	lsls	r2, r2, #30
1a00289e:	bf58      	it	pl
1a0028a0:	6963      	ldrpl	r3, [r4, #20]
1a0028a2:	60a3      	str	r3, [r4, #8]
1a0028a4:	e7f2      	b.n	1a00288c <__swsetup_r+0xac>
1a0028a6:	2000      	movs	r0, #0
1a0028a8:	e7f7      	b.n	1a00289a <__swsetup_r+0xba>
1a0028aa:	bf00      	nop
1a0028ac:	10000090 	.word	0x10000090
1a0028b0:	1a002da0 	.word	0x1a002da0
1a0028b4:	1a002dc0 	.word	0x1a002dc0
1a0028b8:	1a002d80 	.word	0x1a002d80

1a0028bc <__swhatbuf_r>:
1a0028bc:	b570      	push	{r4, r5, r6, lr}
1a0028be:	460e      	mov	r6, r1
1a0028c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0028c4:	2900      	cmp	r1, #0
1a0028c6:	b096      	sub	sp, #88	; 0x58
1a0028c8:	4614      	mov	r4, r2
1a0028ca:	461d      	mov	r5, r3
1a0028cc:	da07      	bge.n	1a0028de <__swhatbuf_r+0x22>
1a0028ce:	2300      	movs	r3, #0
1a0028d0:	602b      	str	r3, [r5, #0]
1a0028d2:	89b3      	ldrh	r3, [r6, #12]
1a0028d4:	061a      	lsls	r2, r3, #24
1a0028d6:	d410      	bmi.n	1a0028fa <__swhatbuf_r+0x3e>
1a0028d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a0028dc:	e00e      	b.n	1a0028fc <__swhatbuf_r+0x40>
1a0028de:	466a      	mov	r2, sp
1a0028e0:	f7fd fd8d 	bl	1a0003fe <_fstat_r>
1a0028e4:	2800      	cmp	r0, #0
1a0028e6:	dbf2      	blt.n	1a0028ce <__swhatbuf_r+0x12>
1a0028e8:	9a01      	ldr	r2, [sp, #4]
1a0028ea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
1a0028ee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
1a0028f2:	425a      	negs	r2, r3
1a0028f4:	415a      	adcs	r2, r3
1a0028f6:	602a      	str	r2, [r5, #0]
1a0028f8:	e7ee      	b.n	1a0028d8 <__swhatbuf_r+0x1c>
1a0028fa:	2340      	movs	r3, #64	; 0x40
1a0028fc:	2000      	movs	r0, #0
1a0028fe:	6023      	str	r3, [r4, #0]
1a002900:	b016      	add	sp, #88	; 0x58
1a002902:	bd70      	pop	{r4, r5, r6, pc}

1a002904 <__smakebuf_r>:
1a002904:	898b      	ldrh	r3, [r1, #12]
1a002906:	b573      	push	{r0, r1, r4, r5, r6, lr}
1a002908:	079d      	lsls	r5, r3, #30
1a00290a:	4606      	mov	r6, r0
1a00290c:	460c      	mov	r4, r1
1a00290e:	d507      	bpl.n	1a002920 <__smakebuf_r+0x1c>
1a002910:	f104 0347 	add.w	r3, r4, #71	; 0x47
1a002914:	6023      	str	r3, [r4, #0]
1a002916:	6123      	str	r3, [r4, #16]
1a002918:	2301      	movs	r3, #1
1a00291a:	6163      	str	r3, [r4, #20]
1a00291c:	b002      	add	sp, #8
1a00291e:	bd70      	pop	{r4, r5, r6, pc}
1a002920:	ab01      	add	r3, sp, #4
1a002922:	466a      	mov	r2, sp
1a002924:	f7ff ffca 	bl	1a0028bc <__swhatbuf_r>
1a002928:	9900      	ldr	r1, [sp, #0]
1a00292a:	4605      	mov	r5, r0
1a00292c:	4630      	mov	r0, r6
1a00292e:	f7ff fdf1 	bl	1a002514 <_malloc_r>
1a002932:	b948      	cbnz	r0, 1a002948 <__smakebuf_r+0x44>
1a002934:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a002938:	059a      	lsls	r2, r3, #22
1a00293a:	d4ef      	bmi.n	1a00291c <__smakebuf_r+0x18>
1a00293c:	f023 0303 	bic.w	r3, r3, #3
1a002940:	f043 0302 	orr.w	r3, r3, #2
1a002944:	81a3      	strh	r3, [r4, #12]
1a002946:	e7e3      	b.n	1a002910 <__smakebuf_r+0xc>
1a002948:	4b0d      	ldr	r3, [pc, #52]	; (1a002980 <__smakebuf_r+0x7c>)
1a00294a:	62b3      	str	r3, [r6, #40]	; 0x28
1a00294c:	89a3      	ldrh	r3, [r4, #12]
1a00294e:	6020      	str	r0, [r4, #0]
1a002950:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a002954:	81a3      	strh	r3, [r4, #12]
1a002956:	9b00      	ldr	r3, [sp, #0]
1a002958:	6163      	str	r3, [r4, #20]
1a00295a:	9b01      	ldr	r3, [sp, #4]
1a00295c:	6120      	str	r0, [r4, #16]
1a00295e:	b15b      	cbz	r3, 1a002978 <__smakebuf_r+0x74>
1a002960:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a002964:	4630      	mov	r0, r6
1a002966:	f7fd fd4f 	bl	1a000408 <_isatty_r>
1a00296a:	b128      	cbz	r0, 1a002978 <__smakebuf_r+0x74>
1a00296c:	89a3      	ldrh	r3, [r4, #12]
1a00296e:	f023 0303 	bic.w	r3, r3, #3
1a002972:	f043 0301 	orr.w	r3, r3, #1
1a002976:	81a3      	strh	r3, [r4, #12]
1a002978:	89a3      	ldrh	r3, [r4, #12]
1a00297a:	431d      	orrs	r5, r3
1a00297c:	81a5      	strh	r5, [r4, #12]
1a00297e:	e7cd      	b.n	1a00291c <__smakebuf_r+0x18>
1a002980:	1a002279 	.word	0x1a002279

1a002984 <__malloc_lock>:
1a002984:	4801      	ldr	r0, [pc, #4]	; (1a00298c <__malloc_lock+0x8>)
1a002986:	f7ff bd6c 	b.w	1a002462 <__retarget_lock_acquire_recursive>
1a00298a:	bf00      	nop
1a00298c:	10000164 	.word	0x10000164

1a002990 <__malloc_unlock>:
1a002990:	4801      	ldr	r0, [pc, #4]	; (1a002998 <__malloc_unlock+0x8>)
1a002992:	f7ff bd67 	b.w	1a002464 <__retarget_lock_release_recursive>
1a002996:	bf00      	nop
1a002998:	10000164 	.word	0x10000164

1a00299c <Keyboard_ReportDescSize>:
1a00299c:	ffff003f                                ?...

1a0029a0 <Keyboard_ReportDescriptor>:
1a0029a0:	06090105 070501a1 e729e019 01250015     ..........)...%.
1a0029b0:	08950175 01950281 01810875 01750595     u.......u.....u.
1a0029c0:	01190805 02910529 03750195 06950191     ....).....u.....
1a0029d0:	00150875 07056525 65290019 ffc00081     u...%e....)e....

1a0029e0 <USB_DeviceDescriptor>:
1a0029e0:	02000112 40000000 00861fc9 02010100     .......@........
1a0029f0:	ffff0103                                ....

1a0029f4 <USB_DeviceQualifier>:
1a0029f4:	0200060a 40000000 ffff0001              .......@....

1a002a00 <USB_StringDescriptor>:
1a002a00:	04090304 004e0326 00500058 00530020     ....&.N.X.P. .S.
1a002a10:	006d0065 00630069 006e006f 00750064     e.m.i.c.o.n.d.u.
1a002a20:	00740063 0072006f 03220073 0050004c     c.t.o.r.s.".L.P.
1a002a30:	00310043 00780038 00200078 0045004b     C.1.8.x.x. .K.E.
1a002a40:	00420059 0041004f 00440052 0041031c     Y.B.O.A.R.D...A.
1a002a50:	00430042 00310044 00330032 00350034     B.C.D.1.2.3.4.5.
1a002a60:	00370036 00390038 0048031a 00440049     6.7.8.9...H.I.D.
1a002a70:	004b0020 00590045 004f0042 00520041      .K.E.Y.B.O.A.R.
1a002a80:	ffff0044                                D...

1a002a84 <InitClkStates>:
1a002a84:	01010f01                                ....

1a002a88 <pinmuxing>:
1a002a88:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a002a98:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a002aa8:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a002ab8:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a002ac8:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a002ad8:	00d50301 00d50401 00160107 00560207     ..............V.
1a002ae8:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a002af8:	00570206                                ..W.

1a002afc <ExtRateIn>:
1a002afc:	00000000                                ....

1a002b00 <GpioButtons>:
1a002b00:	08000400 09010900                       ........

1a002b08 <GpioLeds>:
1a002b08:	01050005 0e000205 0c010b01              ............

1a002b14 <GpioPorts>:
1a002b14:	03030003 0f050403 05031005 07030603     ................
1a002b24:	ffff0802                                ....

1a002b28 <OscRateIn>:
1a002b28:	00b71b00                                ....

1a002b2c <InitClkStates>:
1a002b2c:	00010100 00010909 0001090a 01010701     ................
1a002b3c:	00010902 00010906 0101090c 0001090d     ................
1a002b4c:	0001090e 0001090f 00010910 00010911     ................
1a002b5c:	00010912 00010913 00011114 00011119     ................
1a002b6c:	0001111a 0001111b                       ........

1a002b74 <usbPLLSetup>:
1a002b74:	0000601d 06167ffa 00000000 00000000     .`..............
1a002b84:	1c9c3800 08040201 0f0f0f03 ffff00ff     .8..............

1a002b94 <periph_to_base>:
1a002b94:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a002ba4:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a002bb4:	000100e0 01000100 01200003 00060120     .......... . ...
1a002bc4:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a002bd4:	01820013 00120182 01a201a2 01c20011     ................
1a002be4:	001001c2 01e201e2 0202000f 000e0202     ................
1a002bf4:	02220222 0223000d 001c0223              "."...#.#...

1a002c00 <UART_BClock>:
1a002c00:	01a201c2 01620182                       ......b.

1a002c08 <UART_PClock>:
1a002c08:	00820081 00a200a1                       ........

1a002c10 <gpioPinsInit>:
1a002c10:	02000104 00050701 05010d03 04080100     ................
1a002c20:	02020002 02000304 00000403 04070002     ................
1a002c30:	030c0300 09050402 05040103 04030208     ................
1a002c40:	04020305 06040504 0802000c 03000b06     ................
1a002c50:	00090607 07060503 060f0504 03030004     ................
1a002c60:	02000404 00050404 06040502 04060200     ................
1a002c70:	0c050408 05040a04 0003010e 14010a00     ................
1a002c80:	010f0000 0d000012 00001101 0010010c     ................
1a002c90:	07070300 000f0300 01000001 00000000     ................
1a002ca0:	000a0600 08060603 06100504 04030005     ................
1a002cb0:	03000106 04090400 04010d05 010b0000     ................
1a002cc0:	0200000f 00000001 00010104 02010800     ................
1a002cd0:	01090000 09010006 05040002 04010200     ................
1a002ce0:	02020105 02020504 0e00000a 01000b02     ................
1a002cf0:	000c020b ffff0c01 5f425355 5f444948     ........USB_HID_
1a002d00:	53554f4d 00000d45 5f425355 5f444948     MOUSE...USB_HID_
1a002d10:	4259454b 4452414f 0000000d 5f425355     KEYBOARD....USB_
1a002d20:	5f444948 454e4547 0d434952 00000000     HID_GENERIC.....
1a002d30:	5f425355 5f434443 54524155 0000000d     USB_CDC_UART....
1a002d40:	5f425355 5f43534d 56495244 00000d45     USB_MSC_DRIVE...
1a002d50:	6f727245 79202c72 6d20756f 20747375     Error, you must 
1a002d60:	20657375 61762061 2064696c 20425355     use a valid USB 
1a002d70:	69766564 63206563 7373616c 0000000d     device class....

1a002d80 <__sf_fake_stderr>:
	...

1a002da0 <__sf_fake_stdin>:
	...

1a002dc0 <__sf_fake_stdout>:
	...

1a002de0 <_global_impure_ptr>:
1a002de0:	10000094                                ....
