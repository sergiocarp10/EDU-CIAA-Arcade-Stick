
examples/c/app/out/app.elf:     file format elf32-littlearm
examples/c/app/out/app.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a000369

Program Header:
0x70000001 off    0x00012538 vaddr 0x1a002538 paddr 0x1a002538 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x000100b0 vaddr 0x100000b0 paddr 0x100000b0 align 2**16
         filesz 0x00000000 memsz 0x0000003c flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x00002540 memsz 0x00002540 flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a002540 align 2**16
         filesz 0x000000ac memsz 0x000000ac flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002534  1a000000  1a000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ac  10000000  1a002540  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  000200ac  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  000200ac  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  000200ac  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  000200ac  2**2
                  CONTENTS
  6 .bss          0000003c  100000b0  100000b0  000100b0  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  000200ac  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  000200ac  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  000200ac  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  000200ac  2**2
                  CONTENTS
 11 .init_array   00000004  1a002534  1a002534  00012534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a002538  1a002538  00012538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  000200ac  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  000200ac  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  000200ac  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  000200ac  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  000200ac  2**2
                  CONTENTS
 18 .noinit       00000000  100000ec  100000ec  000200ac  2**2
                  CONTENTS
 19 .debug_info   00019841  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 00003c61  00000000  00000000  000398ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00007050  00000000  00000000  0003d54e  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 000008c8  00000000  00000000  0004459e  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 00000918  00000000  00000000  00044e66  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  0000bb88  00000000  00000000  0004577e  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   0000e031  00000000  00000000  00051306  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    0002786f  00000000  00000000  0005f337  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      00000068  00000000  00000000  00086ba6  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000032  00000000  00000000  00086c0e  2**0
                  CONTENTS, READONLY
 29 .debug_frame  00001a68  00000000  00000000  00086c40  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
100000b0 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a002534 l    d  .init_array	00000000 .init_array
1a002538 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
100000ec l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 app.c
00000000 l    df *ABS*	00000000 system.c
100000b0 l     O .bss	00000004 heap_end.5864
00000000 l    df *ABS*	00000000 board_sysinit.c
1a002270 l     O .text	00000004 InitClkStates
1a002274 l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 board.c
1a00056c l     F .text	00000044 Board_LED_Init
1a0005b0 l     F .text	00000040 Board_TEC_Init
1a0005f0 l     F .text	00000040 Board_GPIO_Init
1a000630 l     F .text	00000030 Board_ADC_Init
1a000660 l     F .text	00000038 Board_SPI_Init
1a000698 l     F .text	00000024 Board_I2C_Init
1a0022ec l     O .text	00000008 GpioButtons
1a0022f4 l     O .text	0000000c GpioLeds
1a002300 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a00075c l     F .text	00000014 Chip_SSP_GetClockIndex
1a000770 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000000 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a000890 l     F .text	00000014 Chip_ADC_GetClockIndex
1a0008a4 l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a002318 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a000ac4 l     F .text	000000a0 pll_calc_divs
1a000b64 l     F .text	0000010c pll_get_frac
1a000c70 l     F .text	0000004c Chip_Clock_FindBaseClock
1a000ee4 l     F .text	00000022 Chip_Clock_GetDivRate
100000b4 l     O .bss	00000008 audio_usb_pll_freq
1a00236c l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a001050 l     F .text	0000002c Chip_UART_GetIndex
1a0023d8 l     O .text	00000008 UART_BClock
1a0023e0 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000038 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a001200 l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_tick.c
100000bc l     O .bss	00000004 callBackFuncParams
100000c0 l     O .bss	00000008 tickCounter
100000c8 l     O .bss	00000004 tickHookFunction
00000000 l    df *ABS*	00000000 sapi_usb_device.c
100000cc l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_delay.c
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1a001ae4 l     F .text	00000048 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 impure.c
1000004c l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 
1a002538 l       .init_array	00000000 __init_array_end
1a002534 l       .bss_RAM5	00000000 __preinit_array_end
1a002534 l       .init_array	00000000 __init_array_start
1a002534 l       .bss_RAM5	00000000 __preinit_array_start
1a000d08 g     F .text	0000001c Chip_Clock_GetDividerSource
1a000408 g     F .text	00000012 _isatty_r
1a001e7c g     F .text	000000dc _puts_r
1a0001ba  w    F .text	00000002 TIMER2_IRQHandler
1a00041a g     F .text	0000000a _lseek_r
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a000752 g     F .text	00000008 __stdio_init
100000e0 g     O .bss	00000001 __lock___atexit_recursive_mutex
1a001fc2 g     F .text	00000024 __sseek
1a001b94 g     F .text	00000070 __sinit
1a001ff0 g     F .text	000000a4 __swbuf_r
1a00017a  w    F .text	00000002 HardFault_Handler
1a001b38 g     F .text	0000002c __sfmoreglue
1a000000 g       *ABS*	00000000 __vectors_start__
1a00094a g     F .text	0000000c Chip_ADC_SetResolution
1a002244 g     F .text	0000000c __malloc_unlock
1a001568 g     F .text	0000002c SysTick_Handler
100000e1 g     O .bss	00000001 __lock___arc4random_mutex
1a000364  w    F .text	00000002 initialise_monitor_handles
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a0006f4 g     F .text	0000001c Board_UARTGetChar
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a000186  w    F .text	00000002 PendSV_Handler
1a000178  w    F .text	00000002 NMI_Handler
1a002540 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
1a0003fe g     F .text	0000000a _fstat_r
53ff7526 g       *ABS*	00000000 __valid_user_code_checksum
1a002540 g       .ARM.exidx	00000000 _etext
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a0001ba  w    F .text	00000002 TIMER3_IRQHandler
1a000f86 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001ba  w    F .text	00000002 UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a001b2c g     F .text	0000000c _cleanup_r
1a00165c g     F .text	00000000 .hidden __aeabi_uldivmod
100000ec g       .noinit	00000000 _noinit
1a001f58 g     F .text	00000010 puts
100000d8 g     O .bss	00000004 SystemCoreClock
1a00107c g     F .text	00000054 Chip_UART_Init
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a000180  w    F .text	00000002 UsageFault_Handler
1a001004 g     F .text	0000004c Chip_Clock_GetRate
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
1a0004f4 g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a00168c g     F .text	000002d0 .hidden __udivmoddi4
1a00049c g     F .text	00000020 _sbrk_r
1a0022e8 g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a000424 g     F .text	0000004e _read_r
1a0001ba  w    F .text	00000002 GPIO1_IRQHandler
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a002538 g       .ARM.exidx	00000000 __exidx_start
100000e2 g     O .bss	00000001 __lock___env_recursive_mutex
1a0002fc g     O .text	00000004 CRP_WORD
100000e3 g     O .bss	00000001 __lock___sinit_recursive_mutex
1a002530 g     O .text	00000004 _global_impure_ptr
1a001ccc g     F .text	00000048 __libc_init_array
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a000710 g     F .text	00000030 Board_Init
1a0003f2  w    F .text	00000002 _init
1a000114 g       .text	00000000 __data_section_table
1a0001ba  w    F .text	00000002 RTC_IRQHandler
100000ec g       .bss	00000000 _ebss
1a0001ba  w    F .text	00000002 TIMER0_IRQHandler
1a000368 g     F .text	00000088 Reset_Handler
1a0014ec g     F .text	0000007c tickInit
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a000854 g     F .text	00000038 Chip_I2C_SetClockRate
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a000cbc g     F .text	0000004c Chip_Clock_EnableCrystal
100000e4 g     O .bss	00000001 __lock___malloc_recursive_mutex
10008000 g       *ABS*	00000000 __top_RamLoc32
1a00018a g     F .text	0000001e data_init
1a0001ba  w    F .text	00000002 TIMER1_IRQHandler
1a0024d0 g     O .text	00000020 __sf_fake_stderr
1a000830 g     F .text	00000024 Chip_I2C_Init
1a001d18 g     F .text	00000002 __retarget_lock_release_recursive
1a0001ba  w    F .text	00000002 UART2_IRQHandler
1a000e78 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a0023e8 g     O .text	000000e6 gpioPinsInit
1a000788 g     F .text	00000012 Chip_SSP_SetClockRate
1a0014b2 g     F .text	00000016 gpioToggle
1a0001ba  w    F .text	00000002 GPIO2_IRQHandler
1a001b64 g     F .text	0000000c __sfp_lock_acquire
1a001d2c g     F .text	0000009c _free_r
1a000f60 g     F .text	00000026 Chip_Clock_GetBaseClock
100000b0 g       .bss	00000000 _bss
1a000918 g     F .text	00000032 Chip_ADC_SetSampleRate
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a00079a g     F .text	0000003e Chip_SSP_SetBitRate
1a00088c g     F .text	00000002 Chip_GPIO_Init
1a002314 g     O .text	00000004 OscRateIn
100000ec g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a000178 g       .text	00000000 __bss_section_table_end
1a0003f4 g     F .text	0000000a _close_r
1a001234 g     F .text	000001ac gpioInit
1a002094 g     F .text	000000dc __swsetup_r
1a00195c  w    F .text	00000002 .hidden __aeabi_ldiv0
1a001c04 g     F .text	0000008c __sfp
1a001b88 g     F .text	0000000c __sinit_lock_release
1a001f68 g     F .text	00000022 __sread
1a001594 g     F .text	0000001c USB0_IRQHandler
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a002238 g     F .text	0000000c __malloc_lock
1a0006e0 g     F .text	00000014 Board_UARTPutChar
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a001a6c g     F .text	00000078 _fflush_r
1a0024f0 g     O .text	00000020 __sf_fake_stdin
1a000d24 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a001d16 g     F .text	00000002 __retarget_lock_acquire_recursive
1a001d1a g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a000300 g     F .text	00000064 main
1a001d14 g     F .text	00000002 __retarget_lock_init_recursive
1a0001ba  w    F .text	00000002 WDT_IRQHandler
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a000182  w    F .text	00000002 SVC_Handler
1a001fe6 g     F .text	00000008 __sclose
1a001dc8 g     F .text	000000b4 _malloc_r
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a000f94 g     F .text	0000003c Chip_Clock_EnableOpts
1a00074a g     F .text	00000008 __stdio_getchar
1a000d40 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a000df8 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a0011ac g     F .text	00000038 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a001624 g     F .text	00000038 delay
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a0013e0 g     F .text	0000006a gpioWrite
1a0003f0  w    F .text	00000002 _fini
1a0008d8 g     F .text	00000040 Chip_ADC_Init
100000dc g     O .bss	00000004 g_pUsbApi
1a0004bc g     F .text	00000038 Board_SetupMuxing
1a0010d0 g     F .text	000000dc Chip_UART_SetBaudFDR
1a0014c8 g     F .text	0000000c tickRead
1a000472 g     F .text	00000028 _write_r
10000040 g     O .data	00000008 tickRateMS
1a0001ba  w    F .text	00000002 ETH_IRQHandler
10000048 g     O .data	00000004 _impure_ptr
1a001960 g     F .text	0000010c __sflush_r
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
100000ec g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a0007d8 g     F .text	00000038 Chip_SSP_Init
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a002170 g     F .text	00000048 __swhatbuf_r
1a0001ba  w    F .text	00000002 DAC_IRQHandler
1a0006bc g     F .text	00000024 Board_Debug_Init
1a000740 g     F .text	0000000a __stdio_putchar
100000ac g       .data	00000000 _edata
1a000810 g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
100000e5 g     O .bss	00000001 __lock___at_quick_exit_mutex
1a000958 g     F .text	00000158 Chip_SetupCoreClock
1a001f8a g     F .text	00000038 __swrite
1a0001ba  w    F .text	00000002 GPIO0_IRQHandler
1a000000 g     O .text	00000040 g_pfnVectors
1a001c90 g     F .text	0000003c _fwalk_reent
1a000ab0 g     F .text	00000014 SystemCoreClockUpdate
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a001b70 g     F .text	0000000c __sfp_lock_release
1a002510 g     O .text	00000020 __sf_fake_stdout
1a00195c  w    F .text	00000002 .hidden __aeabi_idiv0
1a00017e  w    F .text	00000002 BusFault_Handler
100000e6 g     O .bss	00000001 __lock___dd_hash_mutex
1a0021b8 g     F .text	00000080 __smakebuf_r
100000e7 g     O .bss	00000001 __lock___tz_mutex
1a000fd0 g     F .text	00000034 Chip_Clock_Enable
1a0001ba  w    F .text	00000002 UART3_IRQHandler
100000d4 g     O .bss	00000004 __malloc_sbrk_start
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a00144a g     F .text	00000068 gpioRead
1a0015b0 g     F .text	00000074 boardInit
100000d0 g     O .bss	00000004 __malloc_free_list
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a0014d4 g     F .text	00000018 tickPowerSet
1a000f08 g     F .text	00000058 Chip_Clock_SetBaseClock
1a0011e4 g     F .text	0000001c cyclesCounterInit
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
100000e8 g     O .bss	00000001 __lock___sfp_recursive_mutex
1a001b7c g     F .text	0000000c __sinit_lock_acquire
1a000560 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 69 03 00 1a 79 01 00 1a 7b 01 00 1a     ....i...y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a 26 75 ff 53     }...........&u.S
	...
1a00002c:	83 01 00 1a 85 01 00 1a 00 00 00 00 87 01 00 1a     ................
1a00003c:	69 15 00 1a                                         i...

1a000040 <g_pfnVendorVectors>:
1a000040:	bb 01 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     ................
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	95 15 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000070:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a002540 	.word	0x1a002540
1a000118:	10000000 	.word	0x10000000
1a00011c:	000000ac 	.word	0x000000ac
1a000120:	1a002540 	.word	0x1a002540
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a002540 	.word	0x1a002540
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a002540 	.word	0x1a002540
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a002540 	.word	0x1a002540
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	100000b0 	.word	0x100000b0
1a000154:	0000003c 	.word	0x0000003c
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
    }
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
    }
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
    }
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
    }
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
    }
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>

1a000182 <SVC_Handler>:
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
    }
1a000182:	e7fe      	b.n	1a000182 <SVC_Handler>

1a000184 <DebugMon_Handler>:
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
    }
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>

1a000186 <PendSV_Handler>:
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
    }
1a000186:	e7fe      	b.n	1a000186 <PendSV_Handler>
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
    }
1a000188:	e7fe      	b.n	1a000188 <PendSV_Handler+0x2>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	f850 4b04 	ldr.w	r4, [r0], #4
1a000196:	f841 4b04 	str.w	r4, [r1], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019a:	3304      	adds	r3, #4
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	428b      	cmp	r3, r1
1a0001ac:	d204      	bcs.n	1a0001b8 <bss_init+0x10>
        *pulDest++ = 0;
1a0001ae:	2200      	movs	r2, #0
1a0001b0:	f840 2b04 	str.w	r2, [r0], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	3304      	adds	r3, #4
1a0001b6:	e7f8      	b.n	1a0001aa <bss_init+0x2>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
};

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
    while (1) {
    }
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <main>:
#include "app.h"         // <= Su propia cabecera
#include "sapi.h"        // <= Biblioteca sAPI

// FUNCION PRINCIPAL, PUNTO DE ENTRADA AL PROGRAMA LUEGO DE ENCENDIDO O RESET.
int main( void )
{
1a000300:	b538      	push	{r3, r4, r5, lr}
   // ---------- CONFIGURACIONES ------------------------------

   // Inicializar y configurar la plataforma
   boardConfig();
1a000302:	f001 f955 	bl	1a0015b0 <boardInit>

   // Crear varias variables del tipo booleano
   bool_t buttonValue = OFF;
   bool_t ledValue    = OFF;
   // Crear variable del tipo tick_t para contar tiempo
   tick_t timeCount   = 0;
1a000306:	2400      	movs	r4, #0
1a000308:	2500      	movs	r5, #0
   // ---------- REPETIR POR SIEMPRE --------------------------
   while( TRUE ) {

      /* Retardo bloqueante durante 100ms */
      
      delay( 100 );
1a00030a:	2064      	movs	r0, #100	; 0x64
1a00030c:	2100      	movs	r1, #0
1a00030e:	f001 f989 	bl	1a001624 <delay>
      
      /* Si pasaron 10 segundos comienza a funcionar el programa que copia las
         acciones en BOTON al LED. Mientras espera titila el LED.  */
      
      timeCount++;      
1a000312:	3401      	adds	r4, #1
1a000314:	f145 0500 	adc.w	r5, r5, #0
      
      if( timeCount == 100 ){ // 100ms * 100 = 10s
1a000318:	2d00      	cmp	r5, #0
1a00031a:	bf08      	it	eq
1a00031c:	2c64      	cmpeq	r4, #100	; 0x64
1a00031e:	d00a      	beq.n	1a000336 <main+0x36>
            delay( 250 );
            
         }
      } else {
         // Intercambiar el valor de CIAA_BOARD_LED
         gpioToggle(CIAA_BOARD_LED);
1a000320:	202a      	movs	r0, #42	; 0x2a
1a000322:	f001 f8c6 	bl	1a0014b2 <gpioToggle>
      delay( 100 );
1a000326:	e7f0      	b.n	1a00030a <main+0xa>
               printf( "LED apagado.\r\n" );
1a000328:	480c      	ldr	r0, [pc, #48]	; (1a00035c <main+0x5c>)
1a00032a:	f001 fe15 	bl	1a001f58 <puts>
            delay( 250 );
1a00032e:	20fa      	movs	r0, #250	; 0xfa
1a000330:	2100      	movs	r1, #0
1a000332:	f001 f977 	bl	1a001624 <delay>
            buttonValue = gpioRead( CIAA_BOARD_BUTTON );
1a000336:	2024      	movs	r0, #36	; 0x24
1a000338:	f001 f887 	bl	1a00144a <gpioRead>
            gpioWrite( CIAA_BOARD_LED, buttonValue );
1a00033c:	fab0 f180 	clz	r1, r0
1a000340:	0949      	lsrs	r1, r1, #5
1a000342:	202a      	movs	r0, #42	; 0x2a
1a000344:	f001 f84c 	bl	1a0013e0 <gpioWrite>
            ledValue = gpioRead( CIAA_BOARD_LED );
1a000348:	202a      	movs	r0, #42	; 0x2a
1a00034a:	f001 f87e 	bl	1a00144a <gpioRead>
            if( ledValue == ON ) {
1a00034e:	2801      	cmp	r0, #1
1a000350:	d1ea      	bne.n	1a000328 <main+0x28>
               printf( "LED encendido.\r\n" );
1a000352:	4803      	ldr	r0, [pc, #12]	; (1a000360 <main+0x60>)
1a000354:	f001 fe00 	bl	1a001f58 <puts>
1a000358:	e7e9      	b.n	1a00032e <main+0x2e>
1a00035a:	bf00      	nop
1a00035c:	1a002260 	.word	0x1a002260
1a000360:	1a002250 	.word	0x1a002250

1a000364 <initialise_monitor_handles>:
}
1a000364:	4770      	bx	lr
1a000366:	Address 0x1a000366 is out of bounds.


1a000368 <Reset_Handler>:
void Reset_Handler(void) {
1a000368:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a00036a:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a00036c:	4b19      	ldr	r3, [pc, #100]	; (1a0003d4 <Reset_Handler+0x6c>)
1a00036e:	4a1a      	ldr	r2, [pc, #104]	; (1a0003d8 <Reset_Handler+0x70>)
1a000370:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a000372:	3304      	adds	r3, #4
1a000374:	4a19      	ldr	r2, [pc, #100]	; (1a0003dc <Reset_Handler+0x74>)
1a000376:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000378:	2300      	movs	r3, #0
1a00037a:	e005      	b.n	1a000388 <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a00037c:	4a18      	ldr	r2, [pc, #96]	; (1a0003e0 <Reset_Handler+0x78>)
1a00037e:	f04f 31ff 	mov.w	r1, #4294967295
1a000382:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000386:	3301      	adds	r3, #1
1a000388:	2b07      	cmp	r3, #7
1a00038a:	d9f7      	bls.n	1a00037c <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a00038c:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a00038e:	4b15      	ldr	r3, [pc, #84]	; (1a0003e4 <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a000390:	e007      	b.n	1a0003a2 <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a000392:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a000396:	689a      	ldr	r2, [r3, #8]
1a000398:	6859      	ldr	r1, [r3, #4]
1a00039a:	6818      	ldr	r0, [r3, #0]
1a00039c:	f7ff fef5 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a0003a0:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a0003a2:	4a11      	ldr	r2, [pc, #68]	; (1a0003e8 <Reset_Handler+0x80>)
1a0003a4:	4293      	cmp	r3, r2
1a0003a6:	d3f4      	bcc.n	1a000392 <Reset_Handler+0x2a>
1a0003a8:	e006      	b.n	1a0003b8 <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a0003aa:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a0003ac:	6859      	ldr	r1, [r3, #4]
1a0003ae:	f854 0b08 	ldr.w	r0, [r4], #8
1a0003b2:	f7ff fef9 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a0003b6:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a0003b8:	4a0c      	ldr	r2, [pc, #48]	; (1a0003ec <Reset_Handler+0x84>)
1a0003ba:	4293      	cmp	r3, r2
1a0003bc:	d3f5      	bcc.n	1a0003aa <Reset_Handler+0x42>
    SystemInit();
1a0003be:	f000 fef5 	bl	1a0011ac <SystemInit>
    __libc_init_array();
1a0003c2:	f001 fc83 	bl	1a001ccc <__libc_init_array>
    initialise_monitor_handles();
1a0003c6:	f7ff ffcd 	bl	1a000364 <initialise_monitor_handles>
    main();
1a0003ca:	f7ff ff99 	bl	1a000300 <main>
        __asm__ volatile("wfi");
1a0003ce:	bf30      	wfi
1a0003d0:	e7fd      	b.n	1a0003ce <Reset_Handler+0x66>
1a0003d2:	bf00      	nop
1a0003d4:	40053100 	.word	0x40053100
1a0003d8:	10df1000 	.word	0x10df1000
1a0003dc:	01dff7ff 	.word	0x01dff7ff
1a0003e0:	e000e280 	.word	0xe000e280
1a0003e4:	1a000114 	.word	0x1a000114
1a0003e8:	1a000150 	.word	0x1a000150
1a0003ec:	1a000178 	.word	0x1a000178

1a0003f0 <_fini>:
void _fini(void) {}
1a0003f0:	4770      	bx	lr

1a0003f2 <_init>:
void _init(void) {}
1a0003f2:	4770      	bx	lr

1a0003f4 <_close_r>:
   (void) __params__;
}

USED int _close_r(struct _reent *r, int fd) {
   UNUSED(fd);
   SET_ERR(EBADF);
1a0003f4:	2309      	movs	r3, #9
1a0003f6:	6003      	str	r3, [r0, #0]
   return -1;
}
1a0003f8:	f04f 30ff 	mov.w	r0, #4294967295
1a0003fc:	4770      	bx	lr

1a0003fe <_fstat_r>:
}

USED int _fstat_r(struct _reent *r, int fd, struct stat *st) {
   UNUSED(fd);
   UNUSED(st);
   SET_ERR(ENOSYS);
1a0003fe:	2358      	movs	r3, #88	; 0x58
1a000400:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000402:	f04f 30ff 	mov.w	r0, #4294967295
1a000406:	4770      	bx	lr

1a000408 <_isatty_r>:
   UNUSED(r);
   return 1;
}

USED int _isatty_r(struct _reent *r, int fd) {
   switch (fd) {
1a000408:	2902      	cmp	r1, #2
1a00040a:	d904      	bls.n	1a000416 <_isatty_r+0xe>
   case 0:
   case 1:
   case 2:
       return 1;
   default:
       SET_ERR(EBADF);
1a00040c:	2309      	movs	r3, #9
1a00040e:	6003      	str	r3, [r0, #0]
       return -1;
1a000410:	f04f 30ff 	mov.w	r0, #4294967295
1a000414:	4770      	bx	lr
       return 1;
1a000416:	2001      	movs	r0, #1
   }
}
1a000418:	4770      	bx	lr

1a00041a <_lseek_r>:

USED _off_t _lseek_r(struct _reent *r, int fd, _off_t off, int w) {
   UNUSED(fd);
   UNUSED(off);
   UNUSED(w);
   SET_ERR(ENOSYS);
1a00041a:	2358      	movs	r3, #88	; 0x58
1a00041c:	6003      	str	r3, [r0, #0]
   return -1;
}
1a00041e:	f04f 30ff 	mov.w	r0, #4294967295
1a000422:	4770      	bx	lr

1a000424 <_read_r>:
   }
}
*/
USED _ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
  size_t i = 0;
  switch (fd) {
1a000424:	2902      	cmp	r1, #2
1a000426:	d81f      	bhi.n	1a000468 <_read_r+0x44>
USED _ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
1a000428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00042c:	461d      	mov	r5, r3
1a00042e:	4617      	mov	r7, r2
1a000430:	4606      	mov	r6, r0
  size_t i = 0;
1a000432:	2400      	movs	r4, #0
  case 0:
  case 1:
  case 2:
      while( i < n ){
1a000434:	42ac      	cmp	r4, r5
1a000436:	d211      	bcs.n	1a00045c <_read_r+0x38>
         int c = __stdio_getchar();
1a000438:	f000 f987 	bl	1a00074a <__stdio_getchar>
         if( c != -1 ){
1a00043c:	f1b0 3fff 	cmp.w	r0, #4294967295
1a000440:	d0f8      	beq.n	1a000434 <_read_r+0x10>
            ((char*) b)[i++] = (char) c;
1a000442:	f104 0801 	add.w	r8, r4, #1
1a000446:	5538      	strb	r0, [r7, r4]
            if( c == '\r' || c == '\n' ){
1a000448:	280d      	cmp	r0, #13
1a00044a:	d003      	beq.n	1a000454 <_read_r+0x30>
1a00044c:	280a      	cmp	r0, #10
1a00044e:	d001      	beq.n	1a000454 <_read_r+0x30>
            ((char*) b)[i++] = (char) c;
1a000450:	4644      	mov	r4, r8
1a000452:	e7ef      	b.n	1a000434 <_read_r+0x10>
               // read anotherone to prevent \r\n
               (void) __stdio_getchar();
1a000454:	f000 f979 	bl	1a00074a <__stdio_getchar>
               return i;
1a000458:	4640      	mov	r0, r8
1a00045a:	e003      	b.n	1a000464 <_read_r+0x40>
            }
         }
      }
      SET_ERR(ENODEV);
1a00045c:	2313      	movs	r3, #19
1a00045e:	6033      	str	r3, [r6, #0]
      return -1;
1a000460:	f04f 30ff 	mov.w	r0, #4294967295
  default:
      SET_ERR(ENODEV);
      return -1;
  }
}
1a000464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_ERR(ENODEV);
1a000468:	2313      	movs	r3, #19
1a00046a:	6003      	str	r3, [r0, #0]
      return -1;
1a00046c:	f04f 30ff 	mov.w	r0, #4294967295
}
1a000470:	4770      	bx	lr

1a000472 <_write_r>:
   return -1;
}

USED _ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
   size_t i;
   switch (fd) {
1a000472:	2902      	cmp	r1, #2
1a000474:	d80c      	bhi.n	1a000490 <_write_r+0x1e>
USED _ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
1a000476:	b570      	push	{r4, r5, r6, lr}
1a000478:	461d      	mov	r5, r3
1a00047a:	4616      	mov	r6, r2
   case 0:
   case 1:
   case 2:
       for (i = 0; i < n; i++)
1a00047c:	2400      	movs	r4, #0
1a00047e:	42ac      	cmp	r4, r5
1a000480:	d204      	bcs.n	1a00048c <_write_r+0x1a>
           __stdio_putchar(((char*) b)[i]);
1a000482:	5d30      	ldrb	r0, [r6, r4]
1a000484:	f000 f95c 	bl	1a000740 <__stdio_putchar>
       for (i = 0; i < n; i++)
1a000488:	3401      	adds	r4, #1
1a00048a:	e7f8      	b.n	1a00047e <_write_r+0xc>
       return n;
1a00048c:	4628      	mov	r0, r5
   default:
       SET_ERR(ENODEV);
       return -1;
   }
}
1a00048e:	bd70      	pop	{r4, r5, r6, pc}
       SET_ERR(ENODEV);
1a000490:	2313      	movs	r3, #19
1a000492:	6003      	str	r3, [r0, #0]
       return -1;
1a000494:	f04f 30ff 	mov.w	r0, #4294967295
}
1a000498:	4770      	bx	lr
1a00049a:	Address 0x1a00049a is out of bounds.


1a00049c <_sbrk_r>:

USED void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a00049c:	4b05      	ldr	r3, [pc, #20]	; (1a0004b4 <_sbrk_r+0x18>)
1a00049e:	681b      	ldr	r3, [r3, #0]
1a0004a0:	b123      	cbz	r3, 1a0004ac <_sbrk_r+0x10>
       heap_end = &_pvHeapStart;
   }
   prev_heap_end = heap_end;
1a0004a2:	4b04      	ldr	r3, [pc, #16]	; (1a0004b4 <_sbrk_r+0x18>)
1a0004a4:	6818      	ldr	r0, [r3, #0]
   heap_end += incr;
1a0004a6:	4401      	add	r1, r0
1a0004a8:	6019      	str	r1, [r3, #0]
   return prev_heap_end;
}
1a0004aa:	4770      	bx	lr
       heap_end = &_pvHeapStart;
1a0004ac:	4b01      	ldr	r3, [pc, #4]	; (1a0004b4 <_sbrk_r+0x18>)
1a0004ae:	4a02      	ldr	r2, [pc, #8]	; (1a0004b8 <_sbrk_r+0x1c>)
1a0004b0:	601a      	str	r2, [r3, #0]
1a0004b2:	e7f6      	b.n	1a0004a2 <_sbrk_r+0x6>
1a0004b4:	100000b0 	.word	0x100000b0
1a0004b8:	100000ec 	.word	0x100000ec

1a0004bc <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a0004bc:	2300      	movs	r3, #0
1a0004be:	2b1c      	cmp	r3, #28
1a0004c0:	d812      	bhi.n	1a0004e8 <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a0004c2:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a0004c4:	4a09      	ldr	r2, [pc, #36]	; (1a0004ec <Board_SetupMuxing+0x30>)
1a0004c6:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a0004ca:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a0004ce:	784a      	ldrb	r2, [r1, #1]
1a0004d0:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0004d2:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a0004d6:	4906      	ldr	r1, [pc, #24]	; (1a0004f0 <Board_SetupMuxing+0x34>)
1a0004d8:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a0004dc:	3301      	adds	r3, #1
1a0004de:	2b1c      	cmp	r3, #28
1a0004e0:	d9f0      	bls.n	1a0004c4 <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a0004e2:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0004e6:	4770      	bx	lr
1a0004e8:	4770      	bx	lr
1a0004ea:	bf00      	nop
1a0004ec:	1a002274 	.word	0x1a002274
1a0004f0:	40086000 	.word	0x40086000

1a0004f4 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a0004f4:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a0004f6:	4a17      	ldr	r2, [pc, #92]	; (1a000554 <Board_SetupClocking+0x60>)
1a0004f8:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a0004fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a000500:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000504:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a000508:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a00050c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a000510:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000514:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a000518:	2201      	movs	r2, #1
1a00051a:	490f      	ldr	r1, [pc, #60]	; (1a000558 <Board_SetupClocking+0x64>)
1a00051c:	2006      	movs	r0, #6
1a00051e:	f000 fa1b 	bl	1a000958 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a000522:	2400      	movs	r4, #0
1a000524:	b14c      	cbz	r4, 1a00053a <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a000526:	4b0b      	ldr	r3, [pc, #44]	; (1a000554 <Board_SetupClocking+0x60>)
1a000528:	685a      	ldr	r2, [r3, #4]
1a00052a:	f022 020c 	bic.w	r2, r2, #12
1a00052e:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a000530:	685a      	ldr	r2, [r3, #4]
1a000532:	f042 0203 	orr.w	r2, r2, #3
1a000536:	605a      	str	r2, [r3, #4]
}
1a000538:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a00053a:	4808      	ldr	r0, [pc, #32]	; (1a00055c <Board_SetupClocking+0x68>)
1a00053c:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a000540:	2301      	movs	r3, #1
1a000542:	788a      	ldrb	r2, [r1, #2]
1a000544:	7849      	ldrb	r1, [r1, #1]
1a000546:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a00054a:	f000 fcdd 	bl	1a000f08 <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a00054e:	3401      	adds	r4, #1
1a000550:	e7e8      	b.n	1a000524 <Board_SetupClocking+0x30>
1a000552:	bf00      	nop
1a000554:	40043000 	.word	0x40043000
1a000558:	0c28cb00 	.word	0x0c28cb00
1a00055c:	1a002270 	.word	0x1a002270

1a000560 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a000560:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a000562:	f7ff ffab 	bl	1a0004bc <Board_SetupMuxing>
    Board_SetupClocking();
1a000566:	f7ff ffc5 	bl	1a0004f4 <Board_SetupClocking>
}
1a00056a:	bd08      	pop	{r3, pc}

1a00056c <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a00056c:	2200      	movs	r2, #0
1a00056e:	2a05      	cmp	r2, #5
1a000570:	d819      	bhi.n	1a0005a6 <Board_LED_Init+0x3a>
{
1a000572:	b470      	push	{r4, r5, r6}
      const struct gpio_t *io = &GpioLeds[i];
      Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a000574:	490c      	ldr	r1, [pc, #48]	; (1a0005a8 <Board_LED_Init+0x3c>)
1a000576:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a00057a:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a00057e:	784c      	ldrb	r4, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a000580:	4b0a      	ldr	r3, [pc, #40]	; (1a0005ac <Board_LED_Init+0x40>)
1a000582:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a000586:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a00058a:	2001      	movs	r0, #1
1a00058c:	40a0      	lsls	r0, r4
1a00058e:	4301      	orrs	r1, r0
1a000590:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a000594:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a000598:	2100      	movs	r1, #0
1a00059a:	5519      	strb	r1, [r3, r4]
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a00059c:	3201      	adds	r2, #1
1a00059e:	2a05      	cmp	r2, #5
1a0005a0:	d9e8      	bls.n	1a000574 <Board_LED_Init+0x8>
      Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
   }
}
1a0005a2:	bc70      	pop	{r4, r5, r6}
1a0005a4:	4770      	bx	lr
1a0005a6:	4770      	bx	lr
1a0005a8:	1a0022f4 	.word	0x1a0022f4
1a0005ac:	400f4000 	.word	0x400f4000

1a0005b0 <Board_TEC_Init>:


static void Board_TEC_Init()
{
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a0005b0:	2300      	movs	r3, #0
1a0005b2:	2b03      	cmp	r3, #3
1a0005b4:	d816      	bhi.n	1a0005e4 <Board_TEC_Init+0x34>
{
1a0005b6:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioButtons[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a0005b8:	490b      	ldr	r1, [pc, #44]	; (1a0005e8 <Board_TEC_Init+0x38>)
1a0005ba:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a0005be:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a0005c2:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a0005c4:	4c09      	ldr	r4, [pc, #36]	; (1a0005ec <Board_TEC_Init+0x3c>)
1a0005c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a0005ca:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a0005ce:	2001      	movs	r0, #1
1a0005d0:	40a8      	lsls	r0, r5
1a0005d2:	ea21 0100 	bic.w	r1, r1, r0
1a0005d6:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a0005da:	3301      	adds	r3, #1
1a0005dc:	2b03      	cmp	r3, #3
1a0005de:	d9eb      	bls.n	1a0005b8 <Board_TEC_Init+0x8>
   }
}
1a0005e0:	bc30      	pop	{r4, r5}
1a0005e2:	4770      	bx	lr
1a0005e4:	4770      	bx	lr
1a0005e6:	bf00      	nop
1a0005e8:	1a0022ec 	.word	0x1a0022ec
1a0005ec:	400f4000 	.word	0x400f4000

1a0005f0 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a0005f0:	2300      	movs	r3, #0
1a0005f2:	2b08      	cmp	r3, #8
1a0005f4:	d816      	bhi.n	1a000624 <Board_GPIO_Init+0x34>
{
1a0005f6:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioPorts[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a0005f8:	490b      	ldr	r1, [pc, #44]	; (1a000628 <Board_GPIO_Init+0x38>)
1a0005fa:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a0005fe:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a000602:	784d      	ldrb	r5, [r1, #1]
1a000604:	4c09      	ldr	r4, [pc, #36]	; (1a00062c <Board_GPIO_Init+0x3c>)
1a000606:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a00060a:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a00060e:	2001      	movs	r0, #1
1a000610:	40a8      	lsls	r0, r5
1a000612:	ea21 0100 	bic.w	r1, r1, r0
1a000616:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a00061a:	3301      	adds	r3, #1
1a00061c:	2b08      	cmp	r3, #8
1a00061e:	d9eb      	bls.n	1a0005f8 <Board_GPIO_Init+0x8>
   }
}
1a000620:	bc30      	pop	{r4, r5}
1a000622:	4770      	bx	lr
1a000624:	4770      	bx	lr
1a000626:	bf00      	nop
1a000628:	1a002300 	.word	0x1a002300
1a00062c:	400f4000 	.word	0x400f4000

1a000630 <Board_ADC_Init>:
   Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a000630:	b510      	push	{r4, lr}
1a000632:	b082      	sub	sp, #8
   ADC_CLOCK_SETUP_T cs;

   Chip_ADC_Init(LPC_ADC0, &cs);
1a000634:	4c08      	ldr	r4, [pc, #32]	; (1a000658 <Board_ADC_Init+0x28>)
1a000636:	4669      	mov	r1, sp
1a000638:	4620      	mov	r0, r4
1a00063a:	f000 f94d 	bl	1a0008d8 <Chip_ADC_Init>
   Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a00063e:	4a07      	ldr	r2, [pc, #28]	; (1a00065c <Board_ADC_Init+0x2c>)
1a000640:	4669      	mov	r1, sp
1a000642:	4620      	mov	r0, r4
1a000644:	f000 f968 	bl	1a000918 <Chip_ADC_SetSampleRate>
   Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a000648:	2200      	movs	r2, #0
1a00064a:	4669      	mov	r1, sp
1a00064c:	4620      	mov	r0, r4
1a00064e:	f000 f97c 	bl	1a00094a <Chip_ADC_SetResolution>
}
1a000652:	b002      	add	sp, #8
1a000654:	bd10      	pop	{r4, pc}
1a000656:	bf00      	nop
1a000658:	400e3000 	.word	0x400e3000
1a00065c:	00061a80 	.word	0x00061a80

1a000660 <Board_SPI_Init>:
{
1a000660:	b510      	push	{r4, lr}
   Chip_SSP_Init(LPC_SSP1);
1a000662:	4c0b      	ldr	r4, [pc, #44]	; (1a000690 <Board_SPI_Init+0x30>)
1a000664:	4620      	mov	r0, r4
1a000666:	f000 f8b7 	bl	1a0007d8 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a00066a:	6863      	ldr	r3, [r4, #4]
1a00066c:	f023 0304 	bic.w	r3, r3, #4
1a000670:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a000672:	6823      	ldr	r3, [r4, #0]
1a000674:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a000678:	f043 0307 	orr.w	r3, r3, #7
1a00067c:	6023      	str	r3, [r4, #0]
   Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a00067e:	4905      	ldr	r1, [pc, #20]	; (1a000694 <Board_SPI_Init+0x34>)
1a000680:	4620      	mov	r0, r4
1a000682:	f000 f88a 	bl	1a00079a <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a000686:	6863      	ldr	r3, [r4, #4]
1a000688:	f043 0302 	orr.w	r3, r3, #2
1a00068c:	6063      	str	r3, [r4, #4]
}
1a00068e:	bd10      	pop	{r4, pc}
1a000690:	400c5000 	.word	0x400c5000
1a000694:	000186a0 	.word	0x000186a0

1a000698 <Board_I2C_Init>:
{
1a000698:	b508      	push	{r3, lr}
   Chip_I2C_Init(I2C0);
1a00069a:	2000      	movs	r0, #0
1a00069c:	f000 f8c8 	bl	1a000830 <Chip_I2C_Init>
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a0006a0:	4b04      	ldr	r3, [pc, #16]	; (1a0006b4 <Board_I2C_Init+0x1c>)
1a0006a2:	f640 0208 	movw	r2, #2056	; 0x808
1a0006a6:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
   Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a0006aa:	4903      	ldr	r1, [pc, #12]	; (1a0006b8 <Board_I2C_Init+0x20>)
1a0006ac:	2000      	movs	r0, #0
1a0006ae:	f000 f8d1 	bl	1a000854 <Chip_I2C_SetClockRate>
}
1a0006b2:	bd08      	pop	{r3, pc}
1a0006b4:	40086000 	.word	0x40086000
1a0006b8:	000f4240 	.word	0x000f4240

1a0006bc <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a0006bc:	b510      	push	{r4, lr}
   Chip_UART_Init(DEBUG_UART);
1a0006be:	4c07      	ldr	r4, [pc, #28]	; (1a0006dc <Board_Debug_Init+0x20>)
1a0006c0:	4620      	mov	r0, r4
1a0006c2:	f000 fcdb 	bl	1a00107c <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a0006c6:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a0006ca:	4620      	mov	r0, r4
1a0006cc:	f000 fd00 	bl	1a0010d0 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a0006d0:	2303      	movs	r3, #3
1a0006d2:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a0006d4:	2301      	movs	r3, #1
1a0006d6:	65e3      	str	r3, [r4, #92]	; 0x5c
   Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
   Chip_UART_TXEnable(DEBUG_UART);
}
1a0006d8:	bd10      	pop	{r4, pc}
1a0006da:	bf00      	nop
1a0006dc:	400c1000 	.word	0x400c1000

1a0006e0 <Board_UARTPutChar>:
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a0006e0:	4b03      	ldr	r3, [pc, #12]	; (1a0006f0 <Board_UARTPutChar+0x10>)
1a0006e2:	695b      	ldr	r3, [r3, #20]


void Board_UARTPutChar(char ch)
{
   while ( !(Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_THRE));
1a0006e4:	f013 0f20 	tst.w	r3, #32
1a0006e8:	d0fa      	beq.n	1a0006e0 <Board_UARTPutChar>
	pUART->THR = (uint32_t) data;
1a0006ea:	4b01      	ldr	r3, [pc, #4]	; (1a0006f0 <Board_UARTPutChar+0x10>)
1a0006ec:	6018      	str	r0, [r3, #0]
   Chip_UART_SendByte(DEBUG_UART, (uint8_t) ch);
}
1a0006ee:	4770      	bx	lr
1a0006f0:	400c1000 	.word	0x400c1000

1a0006f4 <Board_UARTGetChar>:
	return pUART->LSR;
1a0006f4:	4b05      	ldr	r3, [pc, #20]	; (1a00070c <Board_UARTGetChar+0x18>)
1a0006f6:	695b      	ldr	r3, [r3, #20]


int Board_UARTGetChar(void)
{
   if (Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_RDR) {
1a0006f8:	f013 0f01 	tst.w	r3, #1
1a0006fc:	d003      	beq.n	1a000706 <Board_UARTGetChar+0x12>
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a0006fe:	4b03      	ldr	r3, [pc, #12]	; (1a00070c <Board_UARTGetChar+0x18>)
1a000700:	6818      	ldr	r0, [r3, #0]
      return (int) Chip_UART_ReadByte(DEBUG_UART);
1a000702:	b2c0      	uxtb	r0, r0
1a000704:	4770      	bx	lr
   }
   return EOF;
1a000706:	f04f 30ff 	mov.w	r0, #4294967295
}
1a00070a:	4770      	bx	lr
1a00070c:	400c1000 	.word	0x400c1000

1a000710 <Board_Init>:
   Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a000710:	b508      	push	{r3, lr}
   DEBUGINIT();
1a000712:	f7ff ffd3 	bl	1a0006bc <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a000716:	4809      	ldr	r0, [pc, #36]	; (1a00073c <Board_Init+0x2c>)
1a000718:	f000 f8b8 	bl	1a00088c <Chip_GPIO_Init>

   Board_GPIO_Init();
1a00071c:	f7ff ff68 	bl	1a0005f0 <Board_GPIO_Init>
   Board_ADC_Init();
1a000720:	f7ff ff86 	bl	1a000630 <Board_ADC_Init>
   Board_SPI_Init();
1a000724:	f7ff ff9c 	bl	1a000660 <Board_SPI_Init>
   Board_I2C_Init();
1a000728:	f7ff ffb6 	bl	1a000698 <Board_I2C_Init>

   Board_LED_Init();
1a00072c:	f7ff ff1e 	bl	1a00056c <Board_LED_Init>
   Board_TEC_Init();
1a000730:	f7ff ff3e 	bl	1a0005b0 <Board_TEC_Init>
#ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
#endif

   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate(); // @Eric
1a000734:	f000 f9bc 	bl	1a000ab0 <SystemCoreClockUpdate>
}
1a000738:	bd08      	pop	{r3, pc}
1a00073a:	bf00      	nop
1a00073c:	400f4000 	.word	0x400f4000

1a000740 <__stdio_putchar>:
   curADCChannel = 0xFF;
   return data;
}

void __stdio_putchar(int c)
{
1a000740:	b508      	push	{r3, lr}
   Board_UARTPutChar(c);
1a000742:	b2c0      	uxtb	r0, r0
1a000744:	f7ff ffcc 	bl	1a0006e0 <Board_UARTPutChar>
}
1a000748:	bd08      	pop	{r3, pc}

1a00074a <__stdio_getchar>:

int __stdio_getchar()
{
1a00074a:	b508      	push	{r3, lr}
   return Board_UARTGetChar();;
1a00074c:	f7ff ffd2 	bl	1a0006f4 <Board_UARTGetChar>
}
1a000750:	bd08      	pop	{r3, pc}

1a000752 <__stdio_init>:

void __stdio_init()
{
1a000752:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a000754:	f7ff ffb2 	bl	1a0006bc <Board_Debug_Init>
1a000758:	bd08      	pop	{r3, pc}
1a00075a:	Address 0x1a00075a is out of bounds.


1a00075c <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a00075c:	4b03      	ldr	r3, [pc, #12]	; (1a00076c <Chip_SSP_GetClockIndex+0x10>)
1a00075e:	4298      	cmp	r0, r3
1a000760:	d001      	beq.n	1a000766 <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a000762:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a000764:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a000766:	20a5      	movs	r0, #165	; 0xa5
1a000768:	4770      	bx	lr
1a00076a:	bf00      	nop
1a00076c:	400c5000 	.word	0x400c5000

1a000770 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a000770:	4b04      	ldr	r3, [pc, #16]	; (1a000784 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a000772:	4298      	cmp	r0, r3
1a000774:	d002      	beq.n	1a00077c <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a000776:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a00077a:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a00077c:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a000780:	4770      	bx	lr
1a000782:	bf00      	nop
1a000784:	400c5000 	.word	0x400c5000

1a000788 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a000788:	6803      	ldr	r3, [r0, #0]
1a00078a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a00078e:	0209      	lsls	r1, r1, #8
1a000790:	b289      	uxth	r1, r1
1a000792:	4319      	orrs	r1, r3
1a000794:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a000796:	6102      	str	r2, [r0, #16]
}
1a000798:	4770      	bx	lr

1a00079a <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a00079a:	b570      	push	{r4, r5, r6, lr}
1a00079c:	4606      	mov	r6, r0
1a00079e:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a0007a0:	f7ff ffe6 	bl	1a000770 <Chip_SSP_GetPeriphClockIndex>
1a0007a4:	f000 fc2e 	bl	1a001004 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a0007a8:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a0007aa:	f04f 33ff 	mov.w	r3, #4294967295
	cr0_div = 0;
1a0007ae:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a0007b0:	e000      	b.n	1a0007b4 <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a0007b2:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a0007b4:	42ab      	cmp	r3, r5
1a0007b6:	d90b      	bls.n	1a0007d0 <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a0007b8:	1c4c      	adds	r4, r1, #1
1a0007ba:	fb02 f304 	mul.w	r3, r2, r4
1a0007be:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a0007c2:	429d      	cmp	r5, r3
1a0007c4:	d2f6      	bcs.n	1a0007b4 <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a0007c6:	2cff      	cmp	r4, #255	; 0xff
1a0007c8:	d9f3      	bls.n	1a0007b2 <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a0007ca:	3202      	adds	r2, #2
				cr0_div = 0;
1a0007cc:	2100      	movs	r1, #0
1a0007ce:	e7f1      	b.n	1a0007b4 <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a0007d0:	4630      	mov	r0, r6
1a0007d2:	f7ff ffd9 	bl	1a000788 <Chip_SSP_SetClockRate>
}
1a0007d6:	bd70      	pop	{r4, r5, r6, pc}

1a0007d8 <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a0007d8:	b510      	push	{r4, lr}
1a0007da:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a0007dc:	f7ff ffbe 	bl	1a00075c <Chip_SSP_GetClockIndex>
1a0007e0:	f000 fbf6 	bl	1a000fd0 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a0007e4:	4620      	mov	r0, r4
1a0007e6:	f7ff ffc3 	bl	1a000770 <Chip_SSP_GetPeriphClockIndex>
1a0007ea:	f000 fbf1 	bl	1a000fd0 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a0007ee:	6863      	ldr	r3, [r4, #4]
1a0007f0:	f023 0304 	bic.w	r3, r3, #4
1a0007f4:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a0007f6:	6823      	ldr	r3, [r4, #0]
1a0007f8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a0007fc:	f043 0307 	orr.w	r3, r3, #7
1a000800:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a000802:	4902      	ldr	r1, [pc, #8]	; (1a00080c <Chip_SSP_Init+0x34>)
1a000804:	4620      	mov	r0, r4
1a000806:	f7ff ffc8 	bl	1a00079a <Chip_SSP_SetBitRate>
}
1a00080a:	bd10      	pop	{r4, pc}
1a00080c:	000186a0 	.word	0x000186a0

1a000810 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a000810:	2901      	cmp	r1, #1
1a000812:	d109      	bne.n	1a000828 <Chip_I2C_EventHandler+0x18>
		return;
	}

	stat = &iic->mXfer->status;
1a000814:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a000818:	0082      	lsls	r2, r0, #2
1a00081a:	4b04      	ldr	r3, [pc, #16]	; (1a00082c <Chip_I2C_EventHandler+0x1c>)
1a00081c:	4413      	add	r3, r2
1a00081e:	691a      	ldr	r2, [r3, #16]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a000820:	7d13      	ldrb	r3, [r2, #20]
1a000822:	b2db      	uxtb	r3, r3
1a000824:	2b04      	cmp	r3, #4
1a000826:	d0fb      	beq.n	1a000820 <Chip_I2C_EventHandler+0x10>
}
1a000828:	4770      	bx	lr
1a00082a:	bf00      	nop
1a00082c:	10000000 	.word	0x10000000

1a000830 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a000830:	b570      	push	{r4, r5, r6, lr}
1a000832:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a000834:	4e06      	ldr	r6, [pc, #24]	; (1a000850 <Chip_I2C_Init+0x20>)
1a000836:	00c4      	lsls	r4, r0, #3
1a000838:	1a22      	subs	r2, r4, r0
1a00083a:	0093      	lsls	r3, r2, #2
1a00083c:	4433      	add	r3, r6
1a00083e:	8898      	ldrh	r0, [r3, #4]
1a000840:	f000 fbc6 	bl	1a000fd0 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a000844:	1b64      	subs	r4, r4, r5
1a000846:	00a3      	lsls	r3, r4, #2
1a000848:	58f3      	ldr	r3, [r6, r3]
1a00084a:	226c      	movs	r2, #108	; 0x6c
1a00084c:	619a      	str	r2, [r3, #24]
}
1a00084e:	bd70      	pop	{r4, r5, r6, pc}
1a000850:	10000000 	.word	0x10000000

1a000854 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a000854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000858:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a00085a:	4e0b      	ldr	r6, [pc, #44]	; (1a000888 <Chip_I2C_SetClockRate+0x34>)
1a00085c:	00c5      	lsls	r5, r0, #3
1a00085e:	1a2b      	subs	r3, r5, r0
1a000860:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a000864:	eb06 0308 	add.w	r3, r6, r8
1a000868:	8898      	ldrh	r0, [r3, #4]
1a00086a:	f000 fbcb 	bl	1a001004 <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a00086e:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a000872:	f856 3008 	ldr.w	r3, [r6, r8]
1a000876:	0842      	lsrs	r2, r0, #1
1a000878:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a00087a:	f856 3008 	ldr.w	r3, [r6, r8]
1a00087e:	691a      	ldr	r2, [r3, #16]
1a000880:	1a80      	subs	r0, r0, r2
1a000882:	6158      	str	r0, [r3, #20]
}
1a000884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a000888:	10000000 	.word	0x10000000

1a00088c <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a00088c:	4770      	bx	lr
1a00088e:	Address 0x1a00088e is out of bounds.


1a000890 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a000890:	4b03      	ldr	r3, [pc, #12]	; (1a0008a0 <Chip_ADC_GetClockIndex+0x10>)
1a000892:	4298      	cmp	r0, r3
1a000894:	d001      	beq.n	1a00089a <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a000896:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a000898:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a00089a:	2004      	movs	r0, #4
1a00089c:	4770      	bx	lr
1a00089e:	bf00      	nop
1a0008a0:	400e4000 	.word	0x400e4000

1a0008a4 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a0008a4:	b570      	push	{r4, r5, r6, lr}
1a0008a6:	460d      	mov	r5, r1
1a0008a8:	4614      	mov	r4, r2
1a0008aa:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a0008ac:	f7ff fff0 	bl	1a000890 <Chip_ADC_GetClockIndex>
1a0008b0:	f000 fba8 	bl	1a001004 <Chip_Clock_GetRate>
	if (burstMode) {
1a0008b4:	b155      	cbz	r5, 1a0008cc <getClkDiv+0x28>
		fullAdcRate = adcRate * clks;
1a0008b6:	fb04 f406 	mul.w	r4, r4, r6
	else {
		fullAdcRate = adcRate * getFullConvClk();
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a0008ba:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a0008be:	0064      	lsls	r4, r4, #1
1a0008c0:	fbb0 f0f4 	udiv	r0, r0, r4
1a0008c4:	b2c0      	uxtb	r0, r0
1a0008c6:	3801      	subs	r0, #1
	return div;
}
1a0008c8:	b2c0      	uxtb	r0, r0
1a0008ca:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * getFullConvClk();
1a0008cc:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a0008d0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
1a0008d4:	e7f1      	b.n	1a0008ba <getClkDiv+0x16>
1a0008d6:	Address 0x1a0008d6 is out of bounds.


1a0008d8 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a0008d8:	b538      	push	{r3, r4, r5, lr}
1a0008da:	4605      	mov	r5, r0
1a0008dc:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a0008de:	f7ff ffd7 	bl	1a000890 <Chip_ADC_GetClockIndex>
1a0008e2:	2301      	movs	r3, #1
1a0008e4:	461a      	mov	r2, r3
1a0008e6:	4619      	mov	r1, r3
1a0008e8:	f000 fb54 	bl	1a000f94 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a0008ec:	2100      	movs	r1, #0
1a0008ee:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a0008f0:	4a08      	ldr	r2, [pc, #32]	; (1a000914 <Chip_ADC_Init+0x3c>)
1a0008f2:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a0008f4:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a0008f6:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a0008f8:	230b      	movs	r3, #11
1a0008fa:	4628      	mov	r0, r5
1a0008fc:	f7ff ffd2 	bl	1a0008a4 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a000900:	0200      	lsls	r0, r0, #8
1a000902:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a000906:	7920      	ldrb	r0, [r4, #4]
1a000908:	0440      	lsls	r0, r0, #17
1a00090a:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a00090e:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a000910:	6028      	str	r0, [r5, #0]
}
1a000912:	bd38      	pop	{r3, r4, r5, pc}
1a000914:	00061a80 	.word	0x00061a80

1a000918 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a000918:	b570      	push	{r4, r5, r6, lr}
1a00091a:	4605      	mov	r5, r0
1a00091c:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a00091e:	6804      	ldr	r4, [r0, #0]
1a000920:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a000924:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a000928:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a00092a:	790b      	ldrb	r3, [r1, #4]
1a00092c:	f1c3 030b 	rsb	r3, r3, #11
1a000930:	b2db      	uxtb	r3, r3
1a000932:	7949      	ldrb	r1, [r1, #5]
1a000934:	f7ff ffb6 	bl	1a0008a4 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a000938:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a00093c:	7933      	ldrb	r3, [r6, #4]
1a00093e:	045b      	lsls	r3, r3, #17
1a000940:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
1a000944:	4303      	orrs	r3, r0
	pADC->CR = cr;
1a000946:	602b      	str	r3, [r5, #0]
}
1a000948:	bd70      	pop	{r4, r5, r6, pc}

1a00094a <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a00094a:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a00094c:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a00094e:	680a      	ldr	r2, [r1, #0]
1a000950:	f7ff ffe2 	bl	1a000918 <Chip_ADC_SetSampleRate>
}
1a000954:	bd08      	pop	{r3, pc}
1a000956:	Address 0x1a000956 is out of bounds.


1a000958 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a000958:	b570      	push	{r4, r5, r6, lr}
1a00095a:	b08a      	sub	sp, #40	; 0x28
1a00095c:	4605      	mov	r5, r0
1a00095e:	460e      	mov	r6, r1
1a000960:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 50000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a000962:	f24c 3350 	movw	r3, #50000	; 0xc350
1a000966:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a000968:	2806      	cmp	r0, #6
1a00096a:	d018      	beq.n	1a00099e <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a00096c:	2300      	movs	r3, #0
1a00096e:	2201      	movs	r2, #1
1a000970:	4629      	mov	r1, r5
1a000972:	2004      	movs	r0, #4
1a000974:	f000 fac8 	bl	1a000f08 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a000978:	4a4a      	ldr	r2, [pc, #296]	; (1a000aa4 <Chip_SetupCoreClock+0x14c>)
1a00097a:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a00097c:	f043 0301 	orr.w	r3, r3, #1
1a000980:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a000982:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a000986:	a901      	add	r1, sp, #4
1a000988:	4630      	mov	r0, r6
1a00098a:	f000 fa35 	bl	1a000df8 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a00098e:	4b46      	ldr	r3, [pc, #280]	; (1a000aa8 <Chip_SetupCoreClock+0x150>)
1a000990:	429e      	cmp	r6, r3
1a000992:	d916      	bls.n	1a0009c2 <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a000994:	9b01      	ldr	r3, [sp, #4]
1a000996:	f013 0f40 	tst.w	r3, #64	; 0x40
1a00099a:	d003      	beq.n	1a0009a4 <Chip_SetupCoreClock+0x4c>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
1a00099c:	e7fe      	b.n	1a00099c <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a00099e:	f000 f98d 	bl	1a000cbc <Chip_Clock_EnableCrystal>
1a0009a2:	e7e3      	b.n	1a00096c <Chip_SetupCoreClock+0x14>
		} else if (ppll.ctrl & (1 << 7)){
1a0009a4:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0009a8:	d005      	beq.n	1a0009b6 <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a0009aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0009ae:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a0009b0:	2500      	movs	r5, #0
			direct = 1;
1a0009b2:	2601      	movs	r6, #1
1a0009b4:	e007      	b.n	1a0009c6 <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a0009b6:	9b04      	ldr	r3, [sp, #16]
1a0009b8:	3301      	adds	r3, #1
1a0009ba:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a0009bc:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a0009be:	2600      	movs	r6, #0
1a0009c0:	e001      	b.n	1a0009c6 <Chip_SetupCoreClock+0x6e>
1a0009c2:	2500      	movs	r5, #0
1a0009c4:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a0009c6:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a0009ca:	9b01      	ldr	r3, [sp, #4]
1a0009cc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a0009d0:	9a05      	ldr	r2, [sp, #20]
1a0009d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0009d6:	9a03      	ldr	r2, [sp, #12]
1a0009d8:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a0009dc:	9a04      	ldr	r2, [sp, #16]
1a0009de:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0009e2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0009e6:	4a2f      	ldr	r2, [pc, #188]	; (1a000aa4 <Chip_SetupCoreClock+0x14c>)
1a0009e8:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a0009ea:	4b2e      	ldr	r3, [pc, #184]	; (1a000aa4 <Chip_SetupCoreClock+0x14c>)
1a0009ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a0009ee:	f013 0f01 	tst.w	r3, #1
1a0009f2:	d0fa      	beq.n	1a0009ea <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a0009f4:	2300      	movs	r3, #0
1a0009f6:	2201      	movs	r2, #1
1a0009f8:	2109      	movs	r1, #9
1a0009fa:	2004      	movs	r0, #4
1a0009fc:	f000 fa84 	bl	1a000f08 <Chip_Clock_SetBaseClock>

	if (direct) {
1a000a00:	b306      	cbz	r6, 1a000a44 <Chip_SetupCoreClock+0xec>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a000a02:	f24c 3350 	movw	r3, #50000	; 0xc350
1a000a06:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a000a08:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a000a0a:	1e5a      	subs	r2, r3, #1
1a000a0c:	9209      	str	r2, [sp, #36]	; 0x24
1a000a0e:	2b00      	cmp	r3, #0
1a000a10:	d1fa      	bne.n	1a000a08 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a000a12:	9b01      	ldr	r3, [sp, #4]
1a000a14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a000a18:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a000a1a:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a000a1e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a000a22:	9a05      	ldr	r2, [sp, #20]
1a000a24:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a000a28:	9a03      	ldr	r2, [sp, #12]
1a000a2a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a000a2e:	9a04      	ldr	r2, [sp, #16]
1a000a30:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a000a34:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a000a38:	4a1a      	ldr	r2, [pc, #104]	; (1a000aa4 <Chip_SetupCoreClock+0x14c>)
1a000a3a:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a000a3c:	2c00      	cmp	r4, #0
1a000a3e:	d12e      	bne.n	1a000a9e <Chip_SetupCoreClock+0x146>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a000a40:	b00a      	add	sp, #40	; 0x28
1a000a42:	bd70      	pop	{r4, r5, r6, pc}
	} else if (pdivide) {
1a000a44:	2d00      	cmp	r5, #0
1a000a46:	d0f9      	beq.n	1a000a3c <Chip_SetupCoreClock+0xe4>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a000a48:	f24c 3350 	movw	r3, #50000	; 0xc350
1a000a4c:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a000a4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a000a50:	1e5a      	subs	r2, r3, #1
1a000a52:	9209      	str	r2, [sp, #36]	; 0x24
1a000a54:	2b00      	cmp	r3, #0
1a000a56:	d1fa      	bne.n	1a000a4e <Chip_SetupCoreClock+0xf6>
		ppll.psel--;
1a000a58:	9b04      	ldr	r3, [sp, #16]
1a000a5a:	1e5a      	subs	r2, r3, #1
1a000a5c:	9204      	str	r2, [sp, #16]
1a000a5e:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a000a62:	9b01      	ldr	r3, [sp, #4]
1a000a64:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a000a68:	9905      	ldr	r1, [sp, #20]
1a000a6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a000a6e:	9903      	ldr	r1, [sp, #12]
1a000a70:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a000a74:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a000a78:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a000a7c:	4a09      	ldr	r2, [pc, #36]	; (1a000aa4 <Chip_SetupCoreClock+0x14c>)
1a000a7e:	6453      	str	r3, [r2, #68]	; 0x44
1a000a80:	e7dc      	b.n	1a000a3c <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a000a82:	480a      	ldr	r0, [pc, #40]	; (1a000aac <Chip_SetupCoreClock+0x154>)
1a000a84:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a000a88:	78cb      	ldrb	r3, [r1, #3]
1a000a8a:	788a      	ldrb	r2, [r1, #2]
1a000a8c:	7849      	ldrb	r1, [r1, #1]
1a000a8e:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a000a92:	f000 fa39 	bl	1a000f08 <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a000a96:	3401      	adds	r4, #1
1a000a98:	2c11      	cmp	r4, #17
1a000a9a:	d9f2      	bls.n	1a000a82 <Chip_SetupCoreClock+0x12a>
1a000a9c:	e7d0      	b.n	1a000a40 <Chip_SetupCoreClock+0xe8>
1a000a9e:	2400      	movs	r4, #0
1a000aa0:	e7fa      	b.n	1a000a98 <Chip_SetupCoreClock+0x140>
1a000aa2:	bf00      	nop
1a000aa4:	40050000 	.word	0x40050000
1a000aa8:	068e7780 	.word	0x068e7780
1a000aac:	1a002318 	.word	0x1a002318

1a000ab0 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a000ab0:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a000ab2:	2069      	movs	r0, #105	; 0x69
1a000ab4:	f000 faa6 	bl	1a001004 <Chip_Clock_GetRate>
1a000ab8:	4b01      	ldr	r3, [pc, #4]	; (1a000ac0 <SystemCoreClockUpdate+0x10>)
1a000aba:	6018      	str	r0, [r3, #0]
}
1a000abc:	bd08      	pop	{r3, pc}
1a000abe:	bf00      	nop
1a000ac0:	100000d8 	.word	0x100000d8

1a000ac4 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a000ac4:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a000ac6:	680b      	ldr	r3, [r1, #0]
1a000ac8:	f013 0f80 	tst.w	r3, #128	; 0x80
1a000acc:	d002      	beq.n	1a000ad4 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a000ace:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a000ad2:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a000ad4:	4607      	mov	r7, r0
1a000ad6:	2501      	movs	r5, #1
1a000ad8:	e03a      	b.n	1a000b50 <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a000ada:	694b      	ldr	r3, [r1, #20]
1a000adc:	fb03 f302 	mul.w	r3, r3, r2
1a000ae0:	fbb3 f3f5 	udiv	r3, r3, r5
1a000ae4:	e01c      	b.n	1a000b20 <pll_calc_divs+0x5c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a000ae6:	461c      	mov	r4, r3
	if (val < 0)
1a000ae8:	ebb0 0c04 	subs.w	ip, r0, r4
1a000aec:	d427      	bmi.n	1a000b3e <pll_calc_divs+0x7a>
				} else {
					fout = fcco >> (p + 1);
				}

				if (ABS(freq - fout) < prev) {
1a000aee:	4567      	cmp	r7, ip
1a000af0:	d906      	bls.n	1a000b00 <pll_calc_divs+0x3c>
					ppll->nsel = n;
1a000af2:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a000af4:	1c77      	adds	r7, r6, #1
1a000af6:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a000af8:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a000afa:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a000afc:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a000afe:	4667      	mov	r7, ip
			for (m = 1; m <= 256; m++) {
1a000b00:	3201      	adds	r2, #1
1a000b02:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a000b06:	dc1d      	bgt.n	1a000b44 <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 6)) {
1a000b08:	680c      	ldr	r4, [r1, #0]
1a000b0a:	f014 0f40 	tst.w	r4, #64	; 0x40
1a000b0e:	d0e4      	beq.n	1a000ada <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a000b10:	1c73      	adds	r3, r6, #1
1a000b12:	fa02 fc03 	lsl.w	ip, r2, r3
1a000b16:	694b      	ldr	r3, [r1, #20]
1a000b18:	fb03 f30c 	mul.w	r3, r3, ip
1a000b1c:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a000b20:	f8df c038 	ldr.w	ip, [pc, #56]	; 1a000b5c <pll_calc_divs+0x98>
1a000b24:	4563      	cmp	r3, ip
1a000b26:	d9eb      	bls.n	1a000b00 <pll_calc_divs+0x3c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a000b28:	f8df c034 	ldr.w	ip, [pc, #52]	; 1a000b60 <pll_calc_divs+0x9c>
1a000b2c:	4563      	cmp	r3, ip
1a000b2e:	d809      	bhi.n	1a000b44 <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 7)) {
1a000b30:	f014 0f80 	tst.w	r4, #128	; 0x80
1a000b34:	d1d7      	bne.n	1a000ae6 <pll_calc_divs+0x22>
					fout = fcco >> (p + 1);
1a000b36:	1c74      	adds	r4, r6, #1
1a000b38:	fa23 f404 	lsr.w	r4, r3, r4
1a000b3c:	e7d4      	b.n	1a000ae8 <pll_calc_divs+0x24>
		return -val;
1a000b3e:	f1cc 0c00 	rsb	ip, ip, #0
1a000b42:	e7d4      	b.n	1a000aee <pll_calc_divs+0x2a>
		for (p = 0; p < 4; p ++) {
1a000b44:	3601      	adds	r6, #1
1a000b46:	2e03      	cmp	r6, #3
1a000b48:	dc01      	bgt.n	1a000b4e <pll_calc_divs+0x8a>
			for (m = 1; m <= 256; m++) {
1a000b4a:	2201      	movs	r2, #1
1a000b4c:	e7d9      	b.n	1a000b02 <pll_calc_divs+0x3e>
	for (n = 1; n <= 4; n++) {
1a000b4e:	3501      	adds	r5, #1
1a000b50:	2d04      	cmp	r5, #4
1a000b52:	dc01      	bgt.n	1a000b58 <pll_calc_divs+0x94>
		for (p = 0; p < 4; p ++) {
1a000b54:	2600      	movs	r6, #0
1a000b56:	e7f6      	b.n	1a000b46 <pll_calc_divs+0x82>
				}
			}
		}
	}
}
1a000b58:	bcf0      	pop	{r4, r5, r6, r7}
1a000b5a:	4770      	bx	lr
1a000b5c:	094c5eff 	.word	0x094c5eff
1a000b60:	1312d000 	.word	0x1312d000

1a000b64 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a000b64:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000b66:	b099      	sub	sp, #100	; 0x64
1a000b68:	4605      	mov	r5, r0
1a000b6a:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a000b6c:	225c      	movs	r2, #92	; 0x5c
1a000b6e:	2100      	movs	r1, #0
1a000b70:	a801      	add	r0, sp, #4
1a000b72:	f001 f8d2 	bl	1a001d1a <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a000b76:	2380      	movs	r3, #128	; 0x80
1a000b78:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a000b7a:	6963      	ldr	r3, [r4, #20]
1a000b7c:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a000b7e:	7923      	ldrb	r3, [r4, #4]
1a000b80:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a000b84:	4669      	mov	r1, sp
1a000b86:	4628      	mov	r0, r5
1a000b88:	f7ff ff9c 	bl	1a000ac4 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a000b8c:	9b06      	ldr	r3, [sp, #24]
1a000b8e:	42ab      	cmp	r3, r5
1a000b90:	d027      	beq.n	1a000be2 <pll_get_frac+0x7e>
	if (val < 0)
1a000b92:	1aeb      	subs	r3, r5, r3
1a000b94:	d42e      	bmi.n	1a000bf4 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a000b96:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a000b98:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a000b9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a000b9e:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a000ba0:	6963      	ldr	r3, [r4, #20]
1a000ba2:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a000ba4:	7923      	ldrb	r3, [r4, #4]
1a000ba6:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a000baa:	a910      	add	r1, sp, #64	; 0x40
1a000bac:	4628      	mov	r0, r5
1a000bae:	f7ff ff89 	bl	1a000ac4 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a000bb2:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a000bb4:	42ab      	cmp	r3, r5
1a000bb6:	d01f      	beq.n	1a000bf8 <pll_get_frac+0x94>
	if (val < 0)
1a000bb8:	1aeb      	subs	r3, r5, r3
1a000bba:	d425      	bmi.n	1a000c08 <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a000bbc:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a000bbe:	4b2b      	ldr	r3, [pc, #172]	; (1a000c6c <pll_get_frac+0x108>)
1a000bc0:	429d      	cmp	r5, r3
1a000bc2:	d923      	bls.n	1a000c0c <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a000bc4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a000bc6:	1aed      	subs	r5, r5, r3
1a000bc8:	d433      	bmi.n	1a000c32 <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a000bca:	42ae      	cmp	r6, r5
1a000bcc:	dc3b      	bgt.n	1a000c46 <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a000bce:	42be      	cmp	r6, r7
1a000bd0:	dc31      	bgt.n	1a000c36 <pll_get_frac+0xd2>
			*ppll = pll[0];
1a000bd2:	466d      	mov	r5, sp
1a000bd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000bd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000bd8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000bdc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000be0:	e006      	b.n	1a000bf0 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a000be2:	466d      	mov	r5, sp
1a000be4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000be6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000be8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000bec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a000bf0:	b019      	add	sp, #100	; 0x64
1a000bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a000bf4:	425b      	negs	r3, r3
1a000bf6:	e7ce      	b.n	1a000b96 <pll_get_frac+0x32>
		*ppll = pll[2];
1a000bf8:	ad10      	add	r5, sp, #64	; 0x40
1a000bfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000bfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000bfe:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000c02:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a000c06:	e7f3      	b.n	1a000bf0 <pll_get_frac+0x8c>
		return -val;
1a000c08:	425b      	negs	r3, r3
1a000c0a:	e7d7      	b.n	1a000bbc <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a000c0c:	2340      	movs	r3, #64	; 0x40
1a000c0e:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a000c10:	6963      	ldr	r3, [r4, #20]
1a000c12:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a000c14:	a908      	add	r1, sp, #32
1a000c16:	4628      	mov	r0, r5
1a000c18:	f7ff ff54 	bl	1a000ac4 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a000c1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a000c1e:	42ab      	cmp	r3, r5
1a000c20:	d1d0      	bne.n	1a000bc4 <pll_get_frac+0x60>
			*ppll = pll[1];
1a000c22:	ad08      	add	r5, sp, #32
1a000c24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000c26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000c28:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000c2c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a000c30:	e7de      	b.n	1a000bf0 <pll_get_frac+0x8c>
		return -val;
1a000c32:	426d      	negs	r5, r5
1a000c34:	e7c9      	b.n	1a000bca <pll_get_frac+0x66>
			*ppll = pll[2];
1a000c36:	ad10      	add	r5, sp, #64	; 0x40
1a000c38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000c3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000c3c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000c40:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000c44:	e7d4      	b.n	1a000bf0 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a000c46:	42af      	cmp	r7, r5
1a000c48:	db07      	blt.n	1a000c5a <pll_get_frac+0xf6>
			*ppll = pll[1];
1a000c4a:	ad08      	add	r5, sp, #32
1a000c4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000c4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000c50:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000c54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000c58:	e7ca      	b.n	1a000bf0 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a000c5a:	ad10      	add	r5, sp, #64	; 0x40
1a000c5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000c5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000c60:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000c64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000c68:	e7c2      	b.n	1a000bf0 <pll_get_frac+0x8c>
1a000c6a:	bf00      	nop
1a000c6c:	068e7780 	.word	0x068e7780

1a000c70 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a000c70:	b430      	push	{r4, r5}
1a000c72:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a000c74:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a000c76:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a000c78:	e000      	b.n	1a000c7c <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a000c7a:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a000c7c:	281c      	cmp	r0, #28
1a000c7e:	d118      	bne.n	1a000cb2 <Chip_Clock_FindBaseClock+0x42>
1a000c80:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a000c84:	0051      	lsls	r1, r2, #1
1a000c86:	4a0c      	ldr	r2, [pc, #48]	; (1a000cb8 <Chip_Clock_FindBaseClock+0x48>)
1a000c88:	440a      	add	r2, r1
1a000c8a:	7914      	ldrb	r4, [r2, #4]
1a000c8c:	4284      	cmp	r4, r0
1a000c8e:	d010      	beq.n	1a000cb2 <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a000c90:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a000c94:	004a      	lsls	r2, r1, #1
1a000c96:	4908      	ldr	r1, [pc, #32]	; (1a000cb8 <Chip_Clock_FindBaseClock+0x48>)
1a000c98:	5a8a      	ldrh	r2, [r1, r2]
1a000c9a:	42aa      	cmp	r2, r5
1a000c9c:	d8ed      	bhi.n	1a000c7a <Chip_Clock_FindBaseClock+0xa>
1a000c9e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a000ca2:	0051      	lsls	r1, r2, #1
1a000ca4:	4a04      	ldr	r2, [pc, #16]	; (1a000cb8 <Chip_Clock_FindBaseClock+0x48>)
1a000ca6:	440a      	add	r2, r1
1a000ca8:	8852      	ldrh	r2, [r2, #2]
1a000caa:	42aa      	cmp	r2, r5
1a000cac:	d3e5      	bcc.n	1a000c7a <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a000cae:	4620      	mov	r0, r4
1a000cb0:	e7e4      	b.n	1a000c7c <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a000cb2:	bc30      	pop	{r4, r5}
1a000cb4:	4770      	bx	lr
1a000cb6:	bf00      	nop
1a000cb8:	1a00236c 	.word	0x1a00236c

1a000cbc <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a000cbc:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a000cbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a000cc2:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a000cc4:	4a0d      	ldr	r2, [pc, #52]	; (1a000cfc <Chip_Clock_EnableCrystal+0x40>)
1a000cc6:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a000cc8:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a000ccc:	6992      	ldr	r2, [r2, #24]
1a000cce:	428a      	cmp	r2, r1
1a000cd0:	d001      	beq.n	1a000cd6 <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a000cd2:	4a0a      	ldr	r2, [pc, #40]	; (1a000cfc <Chip_Clock_EnableCrystal+0x40>)
1a000cd4:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a000cd6:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a000cda:	4a09      	ldr	r2, [pc, #36]	; (1a000d00 <Chip_Clock_EnableCrystal+0x44>)
1a000cdc:	6811      	ldr	r1, [r2, #0]
1a000cde:	4a09      	ldr	r2, [pc, #36]	; (1a000d04 <Chip_Clock_EnableCrystal+0x48>)
1a000ce0:	4291      	cmp	r1, r2
1a000ce2:	d901      	bls.n	1a000ce8 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a000ce4:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a000ce8:	4a04      	ldr	r2, [pc, #16]	; (1a000cfc <Chip_Clock_EnableCrystal+0x40>)
1a000cea:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a000cec:	9b01      	ldr	r3, [sp, #4]
1a000cee:	1e5a      	subs	r2, r3, #1
1a000cf0:	9201      	str	r2, [sp, #4]
1a000cf2:	2b00      	cmp	r3, #0
1a000cf4:	d1fa      	bne.n	1a000cec <Chip_Clock_EnableCrystal+0x30>
}
1a000cf6:	b002      	add	sp, #8
1a000cf8:	4770      	bx	lr
1a000cfa:	bf00      	nop
1a000cfc:	40050000 	.word	0x40050000
1a000d00:	1a002314 	.word	0x1a002314
1a000d04:	01312cff 	.word	0x01312cff

1a000d08 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a000d08:	3012      	adds	r0, #18
1a000d0a:	4b05      	ldr	r3, [pc, #20]	; (1a000d20 <Chip_Clock_GetDividerSource+0x18>)
1a000d0c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a000d10:	f010 0f01 	tst.w	r0, #1
1a000d14:	d102      	bne.n	1a000d1c <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a000d16:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a000d1a:	4770      	bx	lr
		return CLKINPUT_PD;
1a000d1c:	2011      	movs	r0, #17
}
1a000d1e:	4770      	bx	lr
1a000d20:	40050000 	.word	0x40050000

1a000d24 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a000d24:	f100 0212 	add.w	r2, r0, #18
1a000d28:	4b03      	ldr	r3, [pc, #12]	; (1a000d38 <Chip_Clock_GetDividerDivisor+0x14>)
1a000d2a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a000d2e:	4b03      	ldr	r3, [pc, #12]	; (1a000d3c <Chip_Clock_GetDividerDivisor+0x18>)
1a000d30:	5c18      	ldrb	r0, [r3, r0]
}
1a000d32:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a000d36:	4770      	bx	lr
1a000d38:	40050000 	.word	0x40050000
1a000d3c:	1a002364 	.word	0x1a002364

1a000d40 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a000d40:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a000d42:	2810      	cmp	r0, #16
1a000d44:	d80a      	bhi.n	1a000d5c <Chip_Clock_GetClockInputHz+0x1c>
1a000d46:	e8df f000 	tbb	[pc, r0]
1a000d4a:	0b44      	.short	0x0b44
1a000d4c:	0921180d 	.word	0x0921180d
1a000d50:	2d2a2724 	.word	0x2d2a2724
1a000d54:	34300909 	.word	0x34300909
1a000d58:	3c38      	.short	0x3c38
1a000d5a:	40          	.byte	0x40
1a000d5b:	00          	.byte	0x00
	uint32_t rate = 0;
1a000d5c:	2000      	movs	r0, #0
1a000d5e:	e03a      	b.n	1a000dd6 <Chip_Clock_GetClockInputHz+0x96>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a000d60:	481e      	ldr	r0, [pc, #120]	; (1a000ddc <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a000d62:	e038      	b.n	1a000dd6 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a000d64:	4b1e      	ldr	r3, [pc, #120]	; (1a000de0 <Chip_Clock_GetClockInputHz+0xa0>)
1a000d66:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a000d6a:	f003 0307 	and.w	r3, r3, #7
1a000d6e:	2b04      	cmp	r3, #4
1a000d70:	d001      	beq.n	1a000d76 <Chip_Clock_GetClockInputHz+0x36>
			/* MII mode requires 25MHz clock */
			rate = 25000000;
1a000d72:	481c      	ldr	r0, [pc, #112]	; (1a000de4 <Chip_Clock_GetClockInputHz+0xa4>)
1a000d74:	e02f      	b.n	1a000dd6 <Chip_Clock_GetClockInputHz+0x96>
	uint32_t rate = 0;
1a000d76:	2000      	movs	r0, #0
1a000d78:	e02d      	b.n	1a000dd6 <Chip_Clock_GetClockInputHz+0x96>
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a000d7a:	4b19      	ldr	r3, [pc, #100]	; (1a000de0 <Chip_Clock_GetClockInputHz+0xa0>)
1a000d7c:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a000d80:	f003 0307 	and.w	r3, r3, #7
1a000d84:	2b04      	cmp	r3, #4
1a000d86:	d027      	beq.n	1a000dd8 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a000d88:	4816      	ldr	r0, [pc, #88]	; (1a000de4 <Chip_Clock_GetClockInputHz+0xa4>)
1a000d8a:	e024      	b.n	1a000dd6 <Chip_Clock_GetClockInputHz+0x96>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a000d8c:	4b16      	ldr	r3, [pc, #88]	; (1a000de8 <Chip_Clock_GetClockInputHz+0xa8>)
1a000d8e:	6818      	ldr	r0, [r3, #0]
		break;
1a000d90:	e021      	b.n	1a000dd6 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a000d92:	4b16      	ldr	r3, [pc, #88]	; (1a000dec <Chip_Clock_GetClockInputHz+0xac>)
1a000d94:	6818      	ldr	r0, [r3, #0]
		break;
1a000d96:	e01e      	b.n	1a000dd6 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a000d98:	4b15      	ldr	r3, [pc, #84]	; (1a000df0 <Chip_Clock_GetClockInputHz+0xb0>)
1a000d9a:	6818      	ldr	r0, [r3, #0]
		break;
1a000d9c:	e01b      	b.n	1a000dd6 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a000d9e:	4b14      	ldr	r3, [pc, #80]	; (1a000df0 <Chip_Clock_GetClockInputHz+0xb0>)
1a000da0:	6858      	ldr	r0, [r3, #4]
		break;
1a000da2:	e018      	b.n	1a000dd6 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a000da4:	f000 f868 	bl	1a000e78 <Chip_Clock_GetMainPLLHz>
		break;
1a000da8:	e015      	b.n	1a000dd6 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a000daa:	2100      	movs	r1, #0
1a000dac:	f000 f89a 	bl	1a000ee4 <Chip_Clock_GetDivRate>
		break;
1a000db0:	e011      	b.n	1a000dd6 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a000db2:	2101      	movs	r1, #1
1a000db4:	f000 f896 	bl	1a000ee4 <Chip_Clock_GetDivRate>
		break;
1a000db8:	e00d      	b.n	1a000dd6 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a000dba:	2102      	movs	r1, #2
1a000dbc:	f000 f892 	bl	1a000ee4 <Chip_Clock_GetDivRate>
		break;
1a000dc0:	e009      	b.n	1a000dd6 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a000dc2:	2103      	movs	r1, #3
1a000dc4:	f000 f88e 	bl	1a000ee4 <Chip_Clock_GetDivRate>
		break;
1a000dc8:	e005      	b.n	1a000dd6 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a000dca:	2104      	movs	r1, #4
1a000dcc:	f000 f88a 	bl	1a000ee4 <Chip_Clock_GetDivRate>
		break;
1a000dd0:	e001      	b.n	1a000dd6 <Chip_Clock_GetClockInputHz+0x96>
		rate = CRYSTAL_32K_FREQ_IN;
1a000dd2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a000dd6:	bd08      	pop	{r3, pc}
			rate = 50000000; /* RMII uses 50 MHz */
1a000dd8:	4806      	ldr	r0, [pc, #24]	; (1a000df4 <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a000dda:	e7fc      	b.n	1a000dd6 <Chip_Clock_GetClockInputHz+0x96>
1a000ddc:	00b71b00 	.word	0x00b71b00
1a000de0:	40043000 	.word	0x40043000
1a000de4:	017d7840 	.word	0x017d7840
1a000de8:	1a0022e8 	.word	0x1a0022e8
1a000dec:	1a002314 	.word	0x1a002314
1a000df0:	100000b4 	.word	0x100000b4
1a000df4:	02faf080 	.word	0x02faf080

1a000df8 <Chip_Clock_CalcMainPLLValue>:
{
1a000df8:	b538      	push	{r3, r4, r5, lr}
1a000dfa:	4605      	mov	r5, r0
1a000dfc:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a000dfe:	7908      	ldrb	r0, [r1, #4]
1a000e00:	f7ff ff9e 	bl	1a000d40 <Chip_Clock_GetClockInputHz>
1a000e04:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a000e06:	4b19      	ldr	r3, [pc, #100]	; (1a000e6c <Chip_Clock_CalcMainPLLValue+0x74>)
1a000e08:	442b      	add	r3, r5
1a000e0a:	4a19      	ldr	r2, [pc, #100]	; (1a000e70 <Chip_Clock_CalcMainPLLValue+0x78>)
1a000e0c:	4293      	cmp	r3, r2
1a000e0e:	d821      	bhi.n	1a000e54 <Chip_Clock_CalcMainPLLValue+0x5c>
1a000e10:	b318      	cbz	r0, 1a000e5a <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a000e12:	2380      	movs	r3, #128	; 0x80
1a000e14:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a000e16:	2300      	movs	r3, #0
1a000e18:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a000e1a:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a000e1c:	fbb5 f3f0 	udiv	r3, r5, r0
1a000e20:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a000e22:	4a14      	ldr	r2, [pc, #80]	; (1a000e74 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a000e24:	4295      	cmp	r5, r2
1a000e26:	d903      	bls.n	1a000e30 <Chip_Clock_CalcMainPLLValue+0x38>
1a000e28:	fb03 f000 	mul.w	r0, r3, r0
1a000e2c:	42a8      	cmp	r0, r5
1a000e2e:	d007      	beq.n	1a000e40 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a000e30:	4621      	mov	r1, r4
1a000e32:	4628      	mov	r0, r5
1a000e34:	f7ff fe96 	bl	1a000b64 <pll_get_frac>
		if (!ppll->nsel) {
1a000e38:	68a3      	ldr	r3, [r4, #8]
1a000e3a:	b18b      	cbz	r3, 1a000e60 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a000e3c:	3b01      	subs	r3, #1
1a000e3e:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a000e40:	6923      	ldr	r3, [r4, #16]
1a000e42:	b183      	cbz	r3, 1a000e66 <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a000e44:	68e2      	ldr	r2, [r4, #12]
1a000e46:	b10a      	cbz	r2, 1a000e4c <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a000e48:	3a01      	subs	r2, #1
1a000e4a:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a000e4c:	3b01      	subs	r3, #1
1a000e4e:	6123      	str	r3, [r4, #16]
	return 0;
1a000e50:	2000      	movs	r0, #0
}
1a000e52:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a000e54:	f04f 30ff 	mov.w	r0, #4294967295
1a000e58:	e7fb      	b.n	1a000e52 <Chip_Clock_CalcMainPLLValue+0x5a>
1a000e5a:	f04f 30ff 	mov.w	r0, #4294967295
1a000e5e:	e7f8      	b.n	1a000e52 <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a000e60:	f04f 30ff 	mov.w	r0, #4294967295
1a000e64:	e7f5      	b.n	1a000e52 <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a000e66:	f04f 30ff 	mov.w	r0, #4294967295
1a000e6a:	e7f2      	b.n	1a000e52 <Chip_Clock_CalcMainPLLValue+0x5a>
1a000e6c:	ff6b3a10 	.word	0xff6b3a10
1a000e70:	0b940510 	.word	0x0b940510
1a000e74:	094c5eff 	.word	0x094c5eff

1a000e78 <Chip_Clock_GetMainPLLHz>:
{
1a000e78:	b530      	push	{r4, r5, lr}
1a000e7a:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a000e7c:	4d17      	ldr	r5, [pc, #92]	; (1a000edc <Chip_Clock_GetMainPLLHz+0x64>)
1a000e7e:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a000e80:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a000e84:	f7ff ff5c 	bl	1a000d40 <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a000e88:	4b15      	ldr	r3, [pc, #84]	; (1a000ee0 <Chip_Clock_GetMainPLLHz+0x68>)
1a000e8a:	681b      	ldr	r3, [r3, #0]
1a000e8c:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a000e8e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a000e90:	f013 0f01 	tst.w	r3, #1
1a000e94:	d020      	beq.n	1a000ed8 <Chip_Clock_GetMainPLLHz+0x60>
	msel = (PLLReg >> 16) & 0xFF;
1a000e96:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a000e9a:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a000e9e:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a000ea2:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a000ea6:	3301      	adds	r3, #1
	n = nsel + 1;
1a000ea8:	3201      	adds	r2, #1
	p = ptab[psel];
1a000eaa:	f10d 0c08 	add.w	ip, sp, #8
1a000eae:	4461      	add	r1, ip
1a000eb0:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a000eb4:	f014 0f80 	tst.w	r4, #128	; 0x80
1a000eb8:	d108      	bne.n	1a000ecc <Chip_Clock_GetMainPLLHz+0x54>
1a000eba:	b93d      	cbnz	r5, 1a000ecc <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a000ebc:	0049      	lsls	r1, r1, #1
1a000ebe:	fbb3 f3f1 	udiv	r3, r3, r1
1a000ec2:	fbb0 f0f2 	udiv	r0, r0, r2
1a000ec6:	fb00 f003 	mul.w	r0, r0, r3
1a000eca:	e003      	b.n	1a000ed4 <Chip_Clock_GetMainPLLHz+0x5c>
		return m * (freq / n);
1a000ecc:	fbb0 f0f2 	udiv	r0, r0, r2
1a000ed0:	fb03 f000 	mul.w	r0, r3, r0
}
1a000ed4:	b003      	add	sp, #12
1a000ed6:	bd30      	pop	{r4, r5, pc}
		return 0;
1a000ed8:	2000      	movs	r0, #0
1a000eda:	e7fb      	b.n	1a000ed4 <Chip_Clock_GetMainPLLHz+0x5c>
1a000edc:	40050000 	.word	0x40050000
1a000ee0:	1a002360 	.word	0x1a002360

1a000ee4 <Chip_Clock_GetDivRate>:
{
1a000ee4:	b538      	push	{r3, r4, r5, lr}
1a000ee6:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a000ee8:	4608      	mov	r0, r1
1a000eea:	f7ff ff0d 	bl	1a000d08 <Chip_Clock_GetDividerSource>
1a000eee:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a000ef0:	4620      	mov	r0, r4
1a000ef2:	f7ff ff17 	bl	1a000d24 <Chip_Clock_GetDividerDivisor>
1a000ef6:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a000ef8:	4628      	mov	r0, r5
1a000efa:	f7ff ff21 	bl	1a000d40 <Chip_Clock_GetClockInputHz>
1a000efe:	3401      	adds	r4, #1
}
1a000f00:	fbb0 f0f4 	udiv	r0, r0, r4
1a000f04:	bd38      	pop	{r3, r4, r5, pc}
1a000f06:	Address 0x1a000f06 is out of bounds.


1a000f08 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a000f08:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a000f0a:	f100 0416 	add.w	r4, r0, #22
1a000f0e:	00a4      	lsls	r4, r4, #2
1a000f10:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a000f14:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a000f18:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a000f1a:	281b      	cmp	r0, #27
1a000f1c:	d813      	bhi.n	1a000f46 <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a000f1e:	2911      	cmp	r1, #17
1a000f20:	d01a      	beq.n	1a000f58 <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a000f22:	4d0e      	ldr	r5, [pc, #56]	; (1a000f5c <Chip_Clock_SetBaseClock+0x54>)
1a000f24:	4025      	ands	r5, r4

			if (autoblocken) {
1a000f26:	b10a      	cbz	r2, 1a000f2c <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a000f28:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a000f2c:	b10b      	cbz	r3, 1a000f32 <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a000f2e:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a000f32:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a000f36:	3016      	adds	r0, #22
1a000f38:	0080      	lsls	r0, r0, #2
1a000f3a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a000f3e:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a000f42:	6045      	str	r5, [r0, #4]
1a000f44:	e008      	b.n	1a000f58 <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a000f46:	f044 0401 	orr.w	r4, r4, #1
1a000f4a:	3016      	adds	r0, #22
1a000f4c:	0080      	lsls	r0, r0, #2
1a000f4e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a000f52:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a000f56:	6044      	str	r4, [r0, #4]
	}
}
1a000f58:	bc30      	pop	{r4, r5}
1a000f5a:	4770      	bx	lr
1a000f5c:	e0fff7fe 	.word	0xe0fff7fe

1a000f60 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a000f60:	281b      	cmp	r0, #27
1a000f62:	d80c      	bhi.n	1a000f7e <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a000f64:	3016      	adds	r0, #22
1a000f66:	0080      	lsls	r0, r0, #2
1a000f68:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a000f6c:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a000f70:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a000f72:	f010 0f01 	tst.w	r0, #1
1a000f76:	d104      	bne.n	1a000f82 <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a000f78:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a000f7c:	4770      	bx	lr
		return CLKINPUT_PD;
1a000f7e:	2011      	movs	r0, #17
1a000f80:	4770      	bx	lr
		return CLKINPUT_PD;
1a000f82:	2011      	movs	r0, #17
}
1a000f84:	4770      	bx	lr

1a000f86 <Chip_Clock_GetBaseClocktHz>:
{
1a000f86:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a000f88:	f7ff ffea 	bl	1a000f60 <Chip_Clock_GetBaseClock>
1a000f8c:	f7ff fed8 	bl	1a000d40 <Chip_Clock_GetClockInputHz>
}
1a000f90:	bd08      	pop	{r3, pc}
1a000f92:	Address 0x1a000f92 is out of bounds.


1a000f94 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a000f94:	b971      	cbnz	r1, 1a000fb4 <Chip_Clock_EnableOpts+0x20>
	uint32_t reg = 1;
1a000f96:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a000f98:	b10a      	cbz	r2, 1a000f9e <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a000f9a:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a000f9e:	2b02      	cmp	r3, #2
1a000fa0:	d00a      	beq.n	1a000fb8 <Chip_Clock_EnableOpts+0x24>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a000fa2:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a000fa6:	d30a      	bcc.n	1a000fbe <Chip_Clock_EnableOpts+0x2a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a000fa8:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a000fac:	4b06      	ldr	r3, [pc, #24]	; (1a000fc8 <Chip_Clock_EnableOpts+0x34>)
1a000fae:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a000fb2:	4770      	bx	lr
		reg |= (1 << 1);
1a000fb4:	2103      	movs	r1, #3
1a000fb6:	e7ef      	b.n	1a000f98 <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a000fb8:	f041 0120 	orr.w	r1, r1, #32
1a000fbc:	e7f1      	b.n	1a000fa2 <Chip_Clock_EnableOpts+0xe>
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a000fbe:	3020      	adds	r0, #32
1a000fc0:	4b02      	ldr	r3, [pc, #8]	; (1a000fcc <Chip_Clock_EnableOpts+0x38>)
1a000fc2:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a000fc6:	4770      	bx	lr
1a000fc8:	40052000 	.word	0x40052000
1a000fcc:	40051000 	.word	0x40051000

1a000fd0 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a000fd0:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a000fd4:	d309      	bcc.n	1a000fea <Chip_Clock_Enable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a000fd6:	4a09      	ldr	r2, [pc, #36]	; (1a000ffc <Chip_Clock_Enable+0x2c>)
1a000fd8:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a000fdc:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a000fe0:	f043 0301 	orr.w	r3, r3, #1
1a000fe4:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a000fe8:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a000fea:	4a05      	ldr	r2, [pc, #20]	; (1a001000 <Chip_Clock_Enable+0x30>)
1a000fec:	3020      	adds	r0, #32
1a000fee:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a000ff2:	f043 0301 	orr.w	r3, r3, #1
1a000ff6:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a000ffa:	4770      	bx	lr
1a000ffc:	40052000 	.word	0x40052000
1a001000:	40051000 	.word	0x40051000

1a001004 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a001004:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a001006:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a00100a:	d309      	bcc.n	1a001020 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a00100c:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a001010:	4a0d      	ldr	r2, [pc, #52]	; (1a001048 <Chip_Clock_GetRate+0x44>)
1a001012:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a001016:	f014 0f01 	tst.w	r4, #1
1a00101a:	d107      	bne.n	1a00102c <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a00101c:	2000      	movs	r0, #0
	}

	return rate;
}
1a00101e:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a001020:	f100 0320 	add.w	r3, r0, #32
1a001024:	4a09      	ldr	r2, [pc, #36]	; (1a00104c <Chip_Clock_GetRate+0x48>)
1a001026:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a00102a:	e7f4      	b.n	1a001016 <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a00102c:	f7ff fe20 	bl	1a000c70 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a001030:	f7ff ffa9 	bl	1a000f86 <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a001034:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a001038:	d103      	bne.n	1a001042 <Chip_Clock_GetRate+0x3e>
			div = 1;
1a00103a:	2301      	movs	r3, #1
		rate = rate / div;
1a00103c:	fbb0 f0f3 	udiv	r0, r0, r3
1a001040:	e7ed      	b.n	1a00101e <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a001042:	2302      	movs	r3, #2
1a001044:	e7fa      	b.n	1a00103c <Chip_Clock_GetRate+0x38>
1a001046:	bf00      	nop
1a001048:	40052000 	.word	0x40052000
1a00104c:	40051000 	.word	0x40051000

1a001050 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a001050:	4b09      	ldr	r3, [pc, #36]	; (1a001078 <Chip_UART_GetIndex+0x28>)
1a001052:	4298      	cmp	r0, r3
1a001054:	d009      	beq.n	1a00106a <Chip_UART_GetIndex+0x1a>
1a001056:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a00105a:	4298      	cmp	r0, r3
1a00105c:	d007      	beq.n	1a00106e <Chip_UART_GetIndex+0x1e>
1a00105e:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a001062:	4298      	cmp	r0, r3
1a001064:	d005      	beq.n	1a001072 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a001066:	2000      	movs	r0, #0
1a001068:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a00106a:	2002      	movs	r0, #2
1a00106c:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a00106e:	2003      	movs	r0, #3
1a001070:	4770      	bx	lr
			return 1;
1a001072:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a001074:	4770      	bx	lr
1a001076:	bf00      	nop
1a001078:	400c1000 	.word	0x400c1000

1a00107c <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a00107c:	b530      	push	{r4, r5, lr}
1a00107e:	b083      	sub	sp, #12
1a001080:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a001082:	f7ff ffe5 	bl	1a001050 <Chip_UART_GetIndex>
1a001086:	2301      	movs	r3, #1
1a001088:	461a      	mov	r2, r3
1a00108a:	4619      	mov	r1, r3
1a00108c:	4d0e      	ldr	r5, [pc, #56]	; (1a0010c8 <Chip_UART_Init+0x4c>)
1a00108e:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a001092:	f7ff ff7f 	bl	1a000f94 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a001096:	2307      	movs	r3, #7
1a001098:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a00109a:	2300      	movs	r3, #0
1a00109c:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a00109e:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a0010a0:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a0010a2:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a0010a4:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a0010a6:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a0010a8:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a0010aa:	4b08      	ldr	r3, [pc, #32]	; (1a0010cc <Chip_UART_Init+0x50>)
1a0010ac:	429c      	cmp	r4, r3
1a0010ae:	d006      	beq.n	1a0010be <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a0010b0:	2303      	movs	r3, #3
1a0010b2:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a0010b4:	2310      	movs	r3, #16
1a0010b6:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a0010b8:	9b01      	ldr	r3, [sp, #4]
}
1a0010ba:	b003      	add	sp, #12
1a0010bc:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a0010be:	2300      	movs	r3, #0
1a0010c0:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a0010c2:	69a3      	ldr	r3, [r4, #24]
1a0010c4:	9301      	str	r3, [sp, #4]
1a0010c6:	e7f3      	b.n	1a0010b0 <Chip_UART_Init+0x34>
1a0010c8:	1a0023e0 	.word	0x1a0023e0
1a0010cc:	40082000 	.word	0x40082000

1a0010d0 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a0010d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0010d4:	b083      	sub	sp, #12
1a0010d6:	9001      	str	r0, [sp, #4]
1a0010d8:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a0010da:	f7ff ffb9 	bl	1a001050 <Chip_UART_GetIndex>
1a0010de:	4b32      	ldr	r3, [pc, #200]	; (1a0011a8 <Chip_UART_SetBaudFDR+0xd8>)
1a0010e0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a0010e4:	f7ff ff8e 	bl	1a001004 <Chip_Clock_GetRate>
1a0010e8:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a0010ea:	f04f 37ff 	mov.w	r7, #4294967295

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a0010ee:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a0010f0:	f04f 0b00 	mov.w	fp, #0
1a0010f4:	46a2      	mov	sl, r4
1a0010f6:	46d9      	mov	r9, fp
	for (m = 1; odiff && m < 16; m++) {
1a0010f8:	e02a      	b.n	1a001150 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a0010fa:	4242      	negs	r2, r0
				div ++;
1a0010fc:	1c4b      	adds	r3, r1, #1
1a0010fe:	e017      	b.n	1a001130 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a001100:	b30a      	cbz	r2, 1a001146 <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a001102:	4617      	mov	r7, r2
			sd = d;
1a001104:	46ab      	mov	fp, r5
			sm = m;
1a001106:	46a2      	mov	sl, r4
			sdiv = div;
1a001108:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a00110a:	3501      	adds	r5, #1
1a00110c:	42ac      	cmp	r4, r5
1a00110e:	d91e      	bls.n	1a00114e <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a001110:	0933      	lsrs	r3, r6, #4
1a001112:	0730      	lsls	r0, r6, #28
1a001114:	fba4 0100 	umull	r0, r1, r4, r0
1a001118:	fb04 1103 	mla	r1, r4, r3, r1
1a00111c:	1962      	adds	r2, r4, r5
1a00111e:	fb08 f202 	mul.w	r2, r8, r2
1a001122:	2300      	movs	r3, #0
1a001124:	f000 fa9a 	bl	1a00165c <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a001128:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a00112a:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a00112c:	2800      	cmp	r0, #0
1a00112e:	dbe4      	blt.n	1a0010fa <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a001130:	4297      	cmp	r7, r2
1a001132:	d3ea      	bcc.n	1a00110a <Chip_UART_SetBaudFDR+0x3a>
1a001134:	2b00      	cmp	r3, #0
1a001136:	d0e8      	beq.n	1a00110a <Chip_UART_SetBaudFDR+0x3a>
1a001138:	0c19      	lsrs	r1, r3, #16
1a00113a:	d1e6      	bne.n	1a00110a <Chip_UART_SetBaudFDR+0x3a>
1a00113c:	2b02      	cmp	r3, #2
1a00113e:	d8df      	bhi.n	1a001100 <Chip_UART_SetBaudFDR+0x30>
1a001140:	2d00      	cmp	r5, #0
1a001142:	d0dd      	beq.n	1a001100 <Chip_UART_SetBaudFDR+0x30>
1a001144:	e7e1      	b.n	1a00110a <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a001146:	4617      	mov	r7, r2
			sd = d;
1a001148:	46ab      	mov	fp, r5
			sm = m;
1a00114a:	46a2      	mov	sl, r4
			sdiv = div;
1a00114c:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a00114e:	3401      	adds	r4, #1
1a001150:	b11f      	cbz	r7, 1a00115a <Chip_UART_SetBaudFDR+0x8a>
1a001152:	2c0f      	cmp	r4, #15
1a001154:	d801      	bhi.n	1a00115a <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a001156:	2500      	movs	r5, #0
1a001158:	e7d8      	b.n	1a00110c <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a00115a:	f1b9 0f00 	cmp.w	r9, #0
1a00115e:	d01e      	beq.n	1a00119e <Chip_UART_SetBaudFDR+0xce>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a001160:	9a01      	ldr	r2, [sp, #4]
1a001162:	4611      	mov	r1, r2
1a001164:	68d3      	ldr	r3, [r2, #12]
1a001166:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a00116a:	60d3      	str	r3, [r2, #12]
	pUART->DLL = (uint32_t) dll;
1a00116c:	fa5f f389 	uxtb.w	r3, r9
1a001170:	6013      	str	r3, [r2, #0]
	pUART->DLM = (uint32_t) dlm;
1a001172:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a001176:	6053      	str	r3, [r2, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a001178:	68d3      	ldr	r3, [r2, #12]
1a00117a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a00117e:	60d3      	str	r3, [r2, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a001180:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a001184:	b2db      	uxtb	r3, r3
1a001186:	f00b 020f 	and.w	r2, fp, #15
1a00118a:	4313      	orrs	r3, r2
1a00118c:	628b      	str	r3, [r1, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a00118e:	0933      	lsrs	r3, r6, #4
1a001190:	fb0a f303 	mul.w	r3, sl, r3
1a001194:	44da      	add	sl, fp
1a001196:	fb09 f90a 	mul.w	r9, r9, sl
1a00119a:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a00119e:	4648      	mov	r0, r9
1a0011a0:	b003      	add	sp, #12
1a0011a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0011a6:	bf00      	nop
1a0011a8:	1a0023d8 	.word	0x1a0023d8

1a0011ac <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a0011ac:	b508      	push	{r3, lr}
   extern void * const g_pfnVectors[];
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a0011ae:	4a0b      	ldr	r2, [pc, #44]	; (1a0011dc <SystemInit+0x30>)
1a0011b0:	4b0b      	ldr	r3, [pc, #44]	; (1a0011e0 <SystemInit+0x34>)
1a0011b2:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a0011b4:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a0011b8:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a0011ba:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a0011be:	2b20      	cmp	r3, #32
1a0011c0:	d004      	beq.n	1a0011cc <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit */
   Board_SystemInit();
1a0011c2:	f7ff f9cd 	bl	1a000560 <Board_SystemInit>
   Board_Init();
1a0011c6:	f7ff faa3 	bl	1a000710 <Board_Init>
}
1a0011ca:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a0011cc:	4a04      	ldr	r2, [pc, #16]	; (1a0011e0 <SystemInit+0x34>)
1a0011ce:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a0011d2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a0011d6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a0011da:	e7f2      	b.n	1a0011c2 <SystemInit+0x16>
1a0011dc:	1a000000 	.word	0x1a000000
1a0011e0:	e000ed00 	.word	0xe000ed00

1a0011e4 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a0011e4:	4b04      	ldr	r3, [pc, #16]	; (1a0011f8 <cyclesCounterInit+0x14>)
1a0011e6:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a0011e8:	4a04      	ldr	r2, [pc, #16]	; (1a0011fc <cyclesCounterInit+0x18>)
1a0011ea:	6813      	ldr	r3, [r2, #0]
1a0011ec:	f043 0301 	orr.w	r3, r3, #1
1a0011f0:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a0011f2:	2001      	movs	r0, #1
1a0011f4:	4770      	bx	lr
1a0011f6:	bf00      	nop
1a0011f8:	10000038 	.word	0x10000038
1a0011fc:	e0001000 	.word	0xe0001000

1a001200 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a001200:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a001202:	4d0b      	ldr	r5, [pc, #44]	; (1a001230 <gpioObtainPinInit+0x30>)
1a001204:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a001208:	182c      	adds	r4, r5, r0
1a00120a:	5628      	ldrsb	r0, [r5, r0]
1a00120c:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a00120e:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a001212:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a001214:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a001218:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a00121a:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a00121e:	9b02      	ldr	r3, [sp, #8]
1a001220:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a001222:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a001226:	9b03      	ldr	r3, [sp, #12]
1a001228:	701a      	strb	r2, [r3, #0]
}
1a00122a:	bc30      	pop	{r4, r5}
1a00122c:	4770      	bx	lr
1a00122e:	bf00      	nop
1a001230:	1a0023e8 	.word	0x1a0023e8

1a001234 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
   if( pin == VCC ){
1a001234:	f110 0f02 	cmn.w	r0, #2
1a001238:	f000 80c7 	beq.w	1a0013ca <gpioInit+0x196>
	  return FALSE;
   }
   if( pin == GND ){
1a00123c:	f1b0 3fff 	cmp.w	r0, #4294967295
1a001240:	f000 80c5 	beq.w	1a0013ce <gpioInit+0x19a>
{
1a001244:	b570      	push	{r4, r5, r6, lr}
1a001246:	b084      	sub	sp, #16
1a001248:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a00124a:	2300      	movs	r3, #0
1a00124c:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a001250:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a001254:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a001258:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a00125c:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a001260:	f10d 030b 	add.w	r3, sp, #11
1a001264:	9301      	str	r3, [sp, #4]
1a001266:	ab03      	add	r3, sp, #12
1a001268:	9300      	str	r3, [sp, #0]
1a00126a:	f10d 030d 	add.w	r3, sp, #13
1a00126e:	f10d 020e 	add.w	r2, sp, #14
1a001272:	f10d 010f 	add.w	r1, sp, #15
1a001276:	f7ff ffc3 	bl	1a001200 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a00127a:	2c05      	cmp	r4, #5
1a00127c:	f200 80a9 	bhi.w	1a0013d2 <gpioInit+0x19e>
1a001280:	e8df f004 	tbb	[pc, r4]
1a001284:	45278109 	.word	0x45278109
1a001288:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a00128a:	4853      	ldr	r0, [pc, #332]	; (1a0013d8 <gpioInit+0x1a4>)
1a00128c:	f7ff fafe 	bl	1a00088c <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a001290:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a001292:	b004      	add	sp, #16
1a001294:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a001296:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00129a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00129e:	f89d 200d 	ldrb.w	r2, [sp, #13]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0012a2:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a0012a6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0012aa:	494c      	ldr	r1, [pc, #304]	; (1a0013dc <gpioInit+0x1a8>)
1a0012ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0012b0:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0012b4:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0012b8:	2001      	movs	r0, #1
1a0012ba:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a0012be:	4c46      	ldr	r4, [pc, #280]	; (1a0013d8 <gpioInit+0x1a4>)
1a0012c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0012c4:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0012c8:	ea22 0201 	bic.w	r2, r2, r1
1a0012cc:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0012d0:	e7df      	b.n	1a001292 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a0012d2:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0012d6:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0012da:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0012de:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a0012e2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0012e6:	493d      	ldr	r1, [pc, #244]	; (1a0013dc <gpioInit+0x1a8>)
1a0012e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0012ec:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0012f0:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0012f4:	2001      	movs	r0, #1
1a0012f6:	fa00 f102 	lsl.w	r1, r0, r2
1a0012fa:	4c37      	ldr	r4, [pc, #220]	; (1a0013d8 <gpioInit+0x1a4>)
1a0012fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001300:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001304:	ea22 0201 	bic.w	r2, r2, r1
1a001308:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a00130c:	e7c1      	b.n	1a001292 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a00130e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001312:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001316:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00131a:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a00131e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001322:	492e      	ldr	r1, [pc, #184]	; (1a0013dc <gpioInit+0x1a8>)
1a001324:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001328:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00132c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001330:	2001      	movs	r0, #1
1a001332:	fa00 f102 	lsl.w	r1, r0, r2
1a001336:	4c28      	ldr	r4, [pc, #160]	; (1a0013d8 <gpioInit+0x1a4>)
1a001338:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a00133c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001340:	ea22 0201 	bic.w	r2, r2, r1
1a001344:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001348:	e7a3      	b.n	1a001292 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a00134a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00134e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001352:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001356:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a00135a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00135e:	491f      	ldr	r1, [pc, #124]	; (1a0013dc <gpioInit+0x1a8>)
1a001360:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001364:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001368:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a00136c:	2001      	movs	r0, #1
1a00136e:	fa00 f102 	lsl.w	r1, r0, r2
1a001372:	4c19      	ldr	r4, [pc, #100]	; (1a0013d8 <gpioInit+0x1a4>)
1a001374:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001378:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a00137c:	ea22 0201 	bic.w	r2, r2, r1
1a001380:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001384:	e785      	b.n	1a001292 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a001386:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00138a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00138e:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001392:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a001396:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00139a:	4910      	ldr	r1, [pc, #64]	; (1a0013dc <gpioInit+0x1a8>)
1a00139c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a0013a0:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a0013a4:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0013a8:	2001      	movs	r0, #1
1a0013aa:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a0013ae:	4b0a      	ldr	r3, [pc, #40]	; (1a0013d8 <gpioInit+0x1a4>)
1a0013b0:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a0013b4:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a0013b8:	4331      	orrs	r1, r6
1a0013ba:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a0013be:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a0013c0:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a0013c4:	2100      	movs	r1, #0
1a0013c6:	5499      	strb	r1, [r3, r2]
1a0013c8:	e763      	b.n	1a001292 <gpioInit+0x5e>
	  return FALSE;
1a0013ca:	2000      	movs	r0, #0
1a0013cc:	4770      	bx	lr
	  return FALSE;
1a0013ce:	2000      	movs	r0, #0
}
1a0013d0:	4770      	bx	lr
      ret_val = 0;
1a0013d2:	2000      	movs	r0, #0
1a0013d4:	e75d      	b.n	1a001292 <gpioInit+0x5e>
1a0013d6:	bf00      	nop
1a0013d8:	400f4000 	.word	0x400f4000
1a0013dc:	40086000 	.word	0x40086000

1a0013e0 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
   if( pin == VCC ){
1a0013e0:	f110 0f02 	cmn.w	r0, #2
1a0013e4:	d02d      	beq.n	1a001442 <gpioWrite+0x62>
	  return FALSE;
   }
   if( pin == GND ){
1a0013e6:	f1b0 3fff 	cmp.w	r0, #4294967295
1a0013ea:	d02c      	beq.n	1a001446 <gpioWrite+0x66>
{
1a0013ec:	b510      	push	{r4, lr}
1a0013ee:	b084      	sub	sp, #16
1a0013f0:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a0013f2:	2300      	movs	r3, #0
1a0013f4:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a0013f8:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0013fc:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a001400:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a001404:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a001408:	f10d 030b 	add.w	r3, sp, #11
1a00140c:	9301      	str	r3, [sp, #4]
1a00140e:	ab03      	add	r3, sp, #12
1a001410:	9300      	str	r3, [sp, #0]
1a001412:	f10d 030d 	add.w	r3, sp, #13
1a001416:	f10d 020e 	add.w	r2, sp, #14
1a00141a:	f10d 010f 	add.w	r1, sp, #15
1a00141e:	f7ff feef 	bl	1a001200 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a001422:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001426:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a00142a:	1c21      	adds	r1, r4, #0
1a00142c:	bf18      	it	ne
1a00142e:	2101      	movne	r1, #1
1a001430:	015b      	lsls	r3, r3, #5
1a001432:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a001436:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a00143a:	5499      	strb	r1, [r3, r2]

   return ret_val;
1a00143c:	2001      	movs	r0, #1
}
1a00143e:	b004      	add	sp, #16
1a001440:	bd10      	pop	{r4, pc}
	  return FALSE;
1a001442:	2000      	movs	r0, #0
1a001444:	4770      	bx	lr
	  return FALSE;
1a001446:	2000      	movs	r0, #0
}
1a001448:	4770      	bx	lr

1a00144a <gpioRead>:
}


bool_t gpioRead( gpioMap_t pin )
{
   if( pin == VCC ){
1a00144a:	f110 0f02 	cmn.w	r0, #2
1a00144e:	d02c      	beq.n	1a0014aa <gpioRead+0x60>
      return TRUE;
   }
   if( pin == GND ){
1a001450:	f1b0 3fff 	cmp.w	r0, #4294967295
1a001454:	d02b      	beq.n	1a0014ae <gpioRead+0x64>
{
1a001456:	b500      	push	{lr}
1a001458:	b085      	sub	sp, #20
      return FALSE;
   }

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a00145a:	2300      	movs	r3, #0
1a00145c:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a001460:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a001464:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a001468:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a00146c:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a001470:	f10d 030b 	add.w	r3, sp, #11
1a001474:	9301      	str	r3, [sp, #4]
1a001476:	ab03      	add	r3, sp, #12
1a001478:	9300      	str	r3, [sp, #0]
1a00147a:	f10d 030d 	add.w	r3, sp, #13
1a00147e:	f10d 020e 	add.w	r2, sp, #14
1a001482:	f10d 010f 	add.w	r1, sp, #15
1a001486:	f7ff febb 	bl	1a001200 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a00148a:	f99d 300c 	ldrsb.w	r3, [sp, #12]
1a00148e:	f89d 200b 	ldrb.w	r2, [sp, #11]
	return (bool) pGPIO->B[port][pin];
1a001492:	015b      	lsls	r3, r3, #5
1a001494:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a001498:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a00149c:	5c98      	ldrb	r0, [r3, r2]
1a00149e:	3000      	adds	r0, #0
1a0014a0:	bf18      	it	ne
1a0014a2:	2001      	movne	r0, #1

   return ret_val;
}
1a0014a4:	b005      	add	sp, #20
1a0014a6:	f85d fb04 	ldr.w	pc, [sp], #4
      return TRUE;
1a0014aa:	2001      	movs	r0, #1
1a0014ac:	4770      	bx	lr
      return FALSE;
1a0014ae:	2000      	movs	r0, #0
}
1a0014b0:	4770      	bx	lr

1a0014b2 <gpioToggle>:
{
1a0014b2:	b510      	push	{r4, lr}
1a0014b4:	4604      	mov	r4, r0
   return gpioWrite( pin, !gpioRead(pin) );
1a0014b6:	f7ff ffc8 	bl	1a00144a <gpioRead>
1a0014ba:	fab0 f180 	clz	r1, r0
1a0014be:	0949      	lsrs	r1, r1, #5
1a0014c0:	4620      	mov	r0, r4
1a0014c2:	f7ff ff8d 	bl	1a0013e0 <gpioWrite>
}
1a0014c6:	bd10      	pop	{r4, pc}

1a0014c8 <tickRead>:
   #ifdef USE_FREERTOS
      return xTaskGetTickCount();
   #else
      return tickCounter;
   #endif
}
1a0014c8:	4b01      	ldr	r3, [pc, #4]	; (1a0014d0 <tickRead+0x8>)
1a0014ca:	e9d3 0100 	ldrd	r0, r1, [r3]
1a0014ce:	4770      	bx	lr
1a0014d0:	100000c0 	.word	0x100000c0

1a0014d4 <tickPowerSet>:
void tickPowerSet( bool_t power )
{
   #ifdef USE_FREERTOS
      uartWriteString( UART_USB, "Use of tickPowerSet() in a program with freeRTOS has no effect\r\n" );
   #else
      if( power ) {
1a0014d4:	b118      	cbz	r0, 1a0014de <tickPowerSet+0xa>
         // Enable SysTick IRQ and SysTick Timer
         SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
1a0014d6:	4b04      	ldr	r3, [pc, #16]	; (1a0014e8 <tickPowerSet+0x14>)
1a0014d8:	2207      	movs	r2, #7
1a0014da:	601a      	str	r2, [r3, #0]
1a0014dc:	4770      	bx	lr
                         SysTick_CTRL_TICKINT_Msk   |
                         SysTick_CTRL_ENABLE_Msk;
      } else {
         // Disable SysTick IRQ and SysTick Timer
         SysTick->CTRL = 0x0000000;
1a0014de:	4b02      	ldr	r3, [pc, #8]	; (1a0014e8 <tickPowerSet+0x14>)
1a0014e0:	2200      	movs	r2, #0
1a0014e2:	601a      	str	r2, [r3, #0]
      }
   #endif
}
1a0014e4:	4770      	bx	lr
1a0014e6:	bf00      	nop
1a0014e8:	e000e010 	.word	0xe000e010

1a0014ec <tickInit>:
{
1a0014ec:	b538      	push	{r3, r4, r5, lr}
      if( tickRateMSvalue == 0 ) {
1a0014ee:	ea50 0401 	orrs.w	r4, r0, r1
1a0014f2:	d02a      	beq.n	1a00154a <tickInit+0x5e>
         if( (tickRateMSvalue >= 1) && (tickRateMSvalue <= 50) ) {
1a0014f4:	f110 32ff 	adds.w	r2, r0, #4294967295
1a0014f8:	f141 33ff 	adc.w	r3, r1, #4294967295
1a0014fc:	2b00      	cmp	r3, #0
1a0014fe:	bf08      	it	eq
1a001500:	2a32      	cmpeq	r2, #50	; 0x32
1a001502:	d227      	bcs.n	1a001554 <tickInit+0x68>
            tickRateMS = tickRateMSvalue;
1a001504:	4b14      	ldr	r3, [pc, #80]	; (1a001558 <tickInit+0x6c>)
1a001506:	e9c3 0100 	strd	r0, r1, [r3]
            SysTick_Config( SystemCoreClock * tickRateMSvalue / 1000 );
1a00150a:	4b14      	ldr	r3, [pc, #80]	; (1a00155c <tickInit+0x70>)
1a00150c:	681b      	ldr	r3, [r3, #0]
1a00150e:	fba3 4500 	umull	r4, r5, r3, r0
1a001512:	fb03 5501 	mla	r5, r3, r1, r5
1a001516:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a00151a:	2300      	movs	r3, #0
1a00151c:	4620      	mov	r0, r4
1a00151e:	4629      	mov	r1, r5
1a001520:	f000 f89c 	bl	1a00165c <__aeabi_uldivmod>
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
1a001524:	3801      	subs	r0, #1
1a001526:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
1a00152a:	d209      	bcs.n	1a001540 <tickInit+0x54>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
1a00152c:	4b0c      	ldr	r3, [pc, #48]	; (1a001560 <tickInit+0x74>)
1a00152e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a001530:	4a0c      	ldr	r2, [pc, #48]	; (1a001564 <tickInit+0x78>)
1a001532:	21e0      	movs	r1, #224	; 0xe0
1a001534:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
1a001538:	2200      	movs	r2, #0
1a00153a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a00153c:	2207      	movs	r2, #7
1a00153e:	601a      	str	r2, [r3, #0]
            tickPowerSet( ON );
1a001540:	2001      	movs	r0, #1
1a001542:	f7ff ffc7 	bl	1a0014d4 <tickPowerSet>
      bool_t ret_val = 1;
1a001546:	2001      	movs	r0, #1
}
1a001548:	bd38      	pop	{r3, r4, r5, pc}
         tickPowerSet( OFF );
1a00154a:	2000      	movs	r0, #0
1a00154c:	f7ff ffc2 	bl	1a0014d4 <tickPowerSet>
         ret_val = 0;
1a001550:	2000      	movs	r0, #0
1a001552:	e7f9      	b.n	1a001548 <tickInit+0x5c>
            ret_val = 0;
1a001554:	2000      	movs	r0, #0
1a001556:	e7f7      	b.n	1a001548 <tickInit+0x5c>
1a001558:	10000040 	.word	0x10000040
1a00155c:	100000d8 	.word	0x100000d8
1a001560:	e000e010 	.word	0xe000e010
1a001564:	e000ed00 	.word	0xe000ed00

1a001568 <SysTick_Handler>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a001568:	b508      	push	{r3, lr}
   // Increment Tick counters
   tickCounter++;
1a00156a:	4a07      	ldr	r2, [pc, #28]	; (1a001588 <SysTick_Handler+0x20>)
1a00156c:	6813      	ldr	r3, [r2, #0]
1a00156e:	6851      	ldr	r1, [r2, #4]
1a001570:	3301      	adds	r3, #1
1a001572:	f141 0100 	adc.w	r1, r1, #0
1a001576:	6013      	str	r3, [r2, #0]
1a001578:	6051      	str	r1, [r2, #4]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a00157a:	4b04      	ldr	r3, [pc, #16]	; (1a00158c <SysTick_Handler+0x24>)
1a00157c:	681b      	ldr	r3, [r3, #0]
1a00157e:	b113      	cbz	r3, 1a001586 <SysTick_Handler+0x1e>
      (* tickHookFunction )( callBackFuncParams );
1a001580:	4a03      	ldr	r2, [pc, #12]	; (1a001590 <SysTick_Handler+0x28>)
1a001582:	6810      	ldr	r0, [r2, #0]
1a001584:	4798      	blx	r3
   }
}
1a001586:	bd08      	pop	{r3, pc}
1a001588:	100000c0 	.word	0x100000c0
1a00158c:	100000c8 	.word	0x100000c8
1a001590:	100000bc 	.word	0x100000bc

1a001594 <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a001594:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a001596:	4b04      	ldr	r3, [pc, #16]	; (1a0015a8 <USB0_IRQHandler+0x14>)
1a001598:	681b      	ldr	r3, [r3, #0]
1a00159a:	681b      	ldr	r3, [r3, #0]
1a00159c:	68db      	ldr	r3, [r3, #12]
1a00159e:	4a03      	ldr	r2, [pc, #12]	; (1a0015ac <USB0_IRQHandler+0x18>)
1a0015a0:	6810      	ldr	r0, [r2, #0]
1a0015a2:	4798      	blx	r3
}
1a0015a4:	bd08      	pop	{r3, pc}
1a0015a6:	bf00      	nop
1a0015a8:	100000dc 	.word	0x100000dc
1a0015ac:	100000cc 	.word	0x100000cc

1a0015b0 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a0015b0:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a0015b2:	f7ff fa7d 	bl	1a000ab0 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a0015b6:	4b1a      	ldr	r3, [pc, #104]	; (1a001620 <boardInit+0x70>)
1a0015b8:	6818      	ldr	r0, [r3, #0]
1a0015ba:	f7ff fe13 	bl	1a0011e4 <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms (si no se usa freeRTOS)
   #ifndef USE_FREERTOS
      tickInit( 1 );
1a0015be:	2001      	movs	r0, #1
1a0015c0:	2100      	movs	r1, #0
1a0015c2:	f7ff ff93 	bl	1a0014ec <tickInit>
      //#error CIAA-NXP

   #elif BOARD==edu_ciaa_nxp

      // Inicializar GPIOs
      gpioInit( 0, GPIO_ENABLE );
1a0015c6:	2105      	movs	r1, #5
1a0015c8:	2000      	movs	r0, #0
1a0015ca:	f7ff fe33 	bl	1a001234 <gpioInit>

      // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
      gpioInit( TEC1, GPIO_INPUT );
1a0015ce:	2100      	movs	r1, #0
1a0015d0:	2024      	movs	r0, #36	; 0x24
1a0015d2:	f7ff fe2f 	bl	1a001234 <gpioInit>
      gpioInit( TEC2, GPIO_INPUT );
1a0015d6:	2100      	movs	r1, #0
1a0015d8:	2025      	movs	r0, #37	; 0x25
1a0015da:	f7ff fe2b 	bl	1a001234 <gpioInit>
      gpioInit( TEC3, GPIO_INPUT );
1a0015de:	2100      	movs	r1, #0
1a0015e0:	2026      	movs	r0, #38	; 0x26
1a0015e2:	f7ff fe27 	bl	1a001234 <gpioInit>
      gpioInit( TEC4, GPIO_INPUT );
1a0015e6:	2100      	movs	r1, #0
1a0015e8:	2027      	movs	r0, #39	; 0x27
1a0015ea:	f7ff fe23 	bl	1a001234 <gpioInit>

      // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
      gpioInit( LEDR, GPIO_OUTPUT );
1a0015ee:	2101      	movs	r1, #1
1a0015f0:	2028      	movs	r0, #40	; 0x28
1a0015f2:	f7ff fe1f 	bl	1a001234 <gpioInit>
      gpioInit( LEDG, GPIO_OUTPUT );
1a0015f6:	2101      	movs	r1, #1
1a0015f8:	2029      	movs	r0, #41	; 0x29
1a0015fa:	f7ff fe1b 	bl	1a001234 <gpioInit>
      gpioInit( LEDB, GPIO_OUTPUT );
1a0015fe:	2101      	movs	r1, #1
1a001600:	202a      	movs	r0, #42	; 0x2a
1a001602:	f7ff fe17 	bl	1a001234 <gpioInit>
      gpioInit( LED1, GPIO_OUTPUT );
1a001606:	2101      	movs	r1, #1
1a001608:	202b      	movs	r0, #43	; 0x2b
1a00160a:	f7ff fe13 	bl	1a001234 <gpioInit>
      gpioInit( LED2, GPIO_OUTPUT );
1a00160e:	2101      	movs	r1, #1
1a001610:	202c      	movs	r0, #44	; 0x2c
1a001612:	f7ff fe0f 	bl	1a001234 <gpioInit>
      gpioInit( LED3, GPIO_OUTPUT );
1a001616:	2101      	movs	r1, #1
1a001618:	202d      	movs	r0, #45	; 0x2d
1a00161a:	f7ff fe0b 	bl	1a001234 <gpioInit>
   #else
      #error BOARD compile variable must be defined

   #endif

}
1a00161e:	bd08      	pop	{r3, pc}
1a001620:	100000d8 	.word	0x100000d8

1a001624 <delay>:
/* ---- Blocking Delay ---- */

// delay( 1, DELAY_US );

void delay( tick_t duration_ms )
{
1a001624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a001628:	4680      	mov	r8, r0
1a00162a:	4689      	mov	r9, r1
   tick_t startTime = tickRead();
1a00162c:	f7ff ff4c 	bl	1a0014c8 <tickRead>
1a001630:	4606      	mov	r6, r0
1a001632:	460f      	mov	r7, r1
   while ( (tick_t)(tickRead() - startTime) < duration_ms/tickRateMS );
1a001634:	f7ff ff48 	bl	1a0014c8 <tickRead>
1a001638:	1b84      	subs	r4, r0, r6
1a00163a:	eb61 0507 	sbc.w	r5, r1, r7
1a00163e:	4b06      	ldr	r3, [pc, #24]	; (1a001658 <delay+0x34>)
1a001640:	e9d3 2300 	ldrd	r2, r3, [r3]
1a001644:	4640      	mov	r0, r8
1a001646:	4649      	mov	r1, r9
1a001648:	f000 f808 	bl	1a00165c <__aeabi_uldivmod>
1a00164c:	428d      	cmp	r5, r1
1a00164e:	bf08      	it	eq
1a001650:	4284      	cmpeq	r4, r0
1a001652:	d3ef      	bcc.n	1a001634 <delay+0x10>
}
1a001654:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a001658:	10000040 	.word	0x10000040

1a00165c <__aeabi_uldivmod>:
1a00165c:	b953      	cbnz	r3, 1a001674 <__aeabi_uldivmod+0x18>
1a00165e:	b94a      	cbnz	r2, 1a001674 <__aeabi_uldivmod+0x18>
1a001660:	2900      	cmp	r1, #0
1a001662:	bf08      	it	eq
1a001664:	2800      	cmpeq	r0, #0
1a001666:	bf1c      	itt	ne
1a001668:	f04f 31ff 	movne.w	r1, #4294967295
1a00166c:	f04f 30ff 	movne.w	r0, #4294967295
1a001670:	f000 b974 	b.w	1a00195c <__aeabi_idiv0>
1a001674:	f1ad 0c08 	sub.w	ip, sp, #8
1a001678:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a00167c:	f000 f806 	bl	1a00168c <__udivmoddi4>
1a001680:	f8dd e004 	ldr.w	lr, [sp, #4]
1a001684:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a001688:	b004      	add	sp, #16
1a00168a:	4770      	bx	lr

1a00168c <__udivmoddi4>:
1a00168c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a001690:	9e08      	ldr	r6, [sp, #32]
1a001692:	4604      	mov	r4, r0
1a001694:	4688      	mov	r8, r1
1a001696:	2b00      	cmp	r3, #0
1a001698:	f040 8085 	bne.w	1a0017a6 <__udivmoddi4+0x11a>
1a00169c:	428a      	cmp	r2, r1
1a00169e:	4615      	mov	r5, r2
1a0016a0:	d948      	bls.n	1a001734 <__udivmoddi4+0xa8>
1a0016a2:	fab2 f282 	clz	r2, r2
1a0016a6:	b14a      	cbz	r2, 1a0016bc <__udivmoddi4+0x30>
1a0016a8:	f1c2 0720 	rsb	r7, r2, #32
1a0016ac:	fa01 f302 	lsl.w	r3, r1, r2
1a0016b0:	fa20 f707 	lsr.w	r7, r0, r7
1a0016b4:	4095      	lsls	r5, r2
1a0016b6:	ea47 0803 	orr.w	r8, r7, r3
1a0016ba:	4094      	lsls	r4, r2
1a0016bc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0016c0:	0c23      	lsrs	r3, r4, #16
1a0016c2:	fbb8 f7fe 	udiv	r7, r8, lr
1a0016c6:	fa1f fc85 	uxth.w	ip, r5
1a0016ca:	fb0e 8817 	mls	r8, lr, r7, r8
1a0016ce:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a0016d2:	fb07 f10c 	mul.w	r1, r7, ip
1a0016d6:	4299      	cmp	r1, r3
1a0016d8:	d909      	bls.n	1a0016ee <__udivmoddi4+0x62>
1a0016da:	18eb      	adds	r3, r5, r3
1a0016dc:	f107 30ff 	add.w	r0, r7, #4294967295
1a0016e0:	f080 80e3 	bcs.w	1a0018aa <__udivmoddi4+0x21e>
1a0016e4:	4299      	cmp	r1, r3
1a0016e6:	f240 80e0 	bls.w	1a0018aa <__udivmoddi4+0x21e>
1a0016ea:	3f02      	subs	r7, #2
1a0016ec:	442b      	add	r3, r5
1a0016ee:	1a5b      	subs	r3, r3, r1
1a0016f0:	b2a4      	uxth	r4, r4
1a0016f2:	fbb3 f0fe 	udiv	r0, r3, lr
1a0016f6:	fb0e 3310 	mls	r3, lr, r0, r3
1a0016fa:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a0016fe:	fb00 fc0c 	mul.w	ip, r0, ip
1a001702:	45a4      	cmp	ip, r4
1a001704:	d909      	bls.n	1a00171a <__udivmoddi4+0x8e>
1a001706:	192c      	adds	r4, r5, r4
1a001708:	f100 33ff 	add.w	r3, r0, #4294967295
1a00170c:	f080 80cb 	bcs.w	1a0018a6 <__udivmoddi4+0x21a>
1a001710:	45a4      	cmp	ip, r4
1a001712:	f240 80c8 	bls.w	1a0018a6 <__udivmoddi4+0x21a>
1a001716:	3802      	subs	r0, #2
1a001718:	442c      	add	r4, r5
1a00171a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a00171e:	eba4 040c 	sub.w	r4, r4, ip
1a001722:	2700      	movs	r7, #0
1a001724:	b11e      	cbz	r6, 1a00172e <__udivmoddi4+0xa2>
1a001726:	40d4      	lsrs	r4, r2
1a001728:	2300      	movs	r3, #0
1a00172a:	e9c6 4300 	strd	r4, r3, [r6]
1a00172e:	4639      	mov	r1, r7
1a001730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001734:	2a00      	cmp	r2, #0
1a001736:	d053      	beq.n	1a0017e0 <__udivmoddi4+0x154>
1a001738:	fab2 f282 	clz	r2, r2
1a00173c:	2a00      	cmp	r2, #0
1a00173e:	f040 80b6 	bne.w	1a0018ae <__udivmoddi4+0x222>
1a001742:	1b49      	subs	r1, r1, r5
1a001744:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a001748:	fa1f f885 	uxth.w	r8, r5
1a00174c:	2701      	movs	r7, #1
1a00174e:	fbb1 fcfe 	udiv	ip, r1, lr
1a001752:	0c23      	lsrs	r3, r4, #16
1a001754:	fb0e 111c 	mls	r1, lr, ip, r1
1a001758:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a00175c:	fb08 f10c 	mul.w	r1, r8, ip
1a001760:	4299      	cmp	r1, r3
1a001762:	d907      	bls.n	1a001774 <__udivmoddi4+0xe8>
1a001764:	18eb      	adds	r3, r5, r3
1a001766:	f10c 30ff 	add.w	r0, ip, #4294967295
1a00176a:	d202      	bcs.n	1a001772 <__udivmoddi4+0xe6>
1a00176c:	4299      	cmp	r1, r3
1a00176e:	f200 80ec 	bhi.w	1a00194a <__udivmoddi4+0x2be>
1a001772:	4684      	mov	ip, r0
1a001774:	1a59      	subs	r1, r3, r1
1a001776:	b2a3      	uxth	r3, r4
1a001778:	fbb1 f0fe 	udiv	r0, r1, lr
1a00177c:	fb0e 1410 	mls	r4, lr, r0, r1
1a001780:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a001784:	fb08 f800 	mul.w	r8, r8, r0
1a001788:	45a0      	cmp	r8, r4
1a00178a:	d907      	bls.n	1a00179c <__udivmoddi4+0x110>
1a00178c:	192c      	adds	r4, r5, r4
1a00178e:	f100 33ff 	add.w	r3, r0, #4294967295
1a001792:	d202      	bcs.n	1a00179a <__udivmoddi4+0x10e>
1a001794:	45a0      	cmp	r8, r4
1a001796:	f200 80dc 	bhi.w	1a001952 <__udivmoddi4+0x2c6>
1a00179a:	4618      	mov	r0, r3
1a00179c:	eba4 0408 	sub.w	r4, r4, r8
1a0017a0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a0017a4:	e7be      	b.n	1a001724 <__udivmoddi4+0x98>
1a0017a6:	428b      	cmp	r3, r1
1a0017a8:	d908      	bls.n	1a0017bc <__udivmoddi4+0x130>
1a0017aa:	2e00      	cmp	r6, #0
1a0017ac:	d078      	beq.n	1a0018a0 <__udivmoddi4+0x214>
1a0017ae:	2700      	movs	r7, #0
1a0017b0:	e9c6 0100 	strd	r0, r1, [r6]
1a0017b4:	4638      	mov	r0, r7
1a0017b6:	4639      	mov	r1, r7
1a0017b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0017bc:	fab3 f783 	clz	r7, r3
1a0017c0:	b97f      	cbnz	r7, 1a0017e2 <__udivmoddi4+0x156>
1a0017c2:	428b      	cmp	r3, r1
1a0017c4:	d302      	bcc.n	1a0017cc <__udivmoddi4+0x140>
1a0017c6:	4282      	cmp	r2, r0
1a0017c8:	f200 80bd 	bhi.w	1a001946 <__udivmoddi4+0x2ba>
1a0017cc:	1a84      	subs	r4, r0, r2
1a0017ce:	eb61 0303 	sbc.w	r3, r1, r3
1a0017d2:	2001      	movs	r0, #1
1a0017d4:	4698      	mov	r8, r3
1a0017d6:	2e00      	cmp	r6, #0
1a0017d8:	d0a9      	beq.n	1a00172e <__udivmoddi4+0xa2>
1a0017da:	e9c6 4800 	strd	r4, r8, [r6]
1a0017de:	e7a6      	b.n	1a00172e <__udivmoddi4+0xa2>
1a0017e0:	deff      	udf	#255	; 0xff
1a0017e2:	f1c7 0520 	rsb	r5, r7, #32
1a0017e6:	40bb      	lsls	r3, r7
1a0017e8:	fa22 fc05 	lsr.w	ip, r2, r5
1a0017ec:	ea4c 0c03 	orr.w	ip, ip, r3
1a0017f0:	fa01 f407 	lsl.w	r4, r1, r7
1a0017f4:	fa20 f805 	lsr.w	r8, r0, r5
1a0017f8:	fa21 f305 	lsr.w	r3, r1, r5
1a0017fc:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
1a001800:	ea48 0404 	orr.w	r4, r8, r4
1a001804:	fbb3 f9fe 	udiv	r9, r3, lr
1a001808:	0c21      	lsrs	r1, r4, #16
1a00180a:	fb0e 3319 	mls	r3, lr, r9, r3
1a00180e:	fa1f f88c 	uxth.w	r8, ip
1a001812:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
1a001816:	fb09 fa08 	mul.w	sl, r9, r8
1a00181a:	459a      	cmp	sl, r3
1a00181c:	fa02 f207 	lsl.w	r2, r2, r7
1a001820:	fa00 f107 	lsl.w	r1, r0, r7
1a001824:	d90b      	bls.n	1a00183e <__udivmoddi4+0x1b2>
1a001826:	eb1c 0303 	adds.w	r3, ip, r3
1a00182a:	f109 30ff 	add.w	r0, r9, #4294967295
1a00182e:	f080 8088 	bcs.w	1a001942 <__udivmoddi4+0x2b6>
1a001832:	459a      	cmp	sl, r3
1a001834:	f240 8085 	bls.w	1a001942 <__udivmoddi4+0x2b6>
1a001838:	f1a9 0902 	sub.w	r9, r9, #2
1a00183c:	4463      	add	r3, ip
1a00183e:	eba3 030a 	sub.w	r3, r3, sl
1a001842:	b2a4      	uxth	r4, r4
1a001844:	fbb3 f0fe 	udiv	r0, r3, lr
1a001848:	fb0e 3310 	mls	r3, lr, r0, r3
1a00184c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a001850:	fb00 f808 	mul.w	r8, r0, r8
1a001854:	45a0      	cmp	r8, r4
1a001856:	d908      	bls.n	1a00186a <__udivmoddi4+0x1de>
1a001858:	eb1c 0404 	adds.w	r4, ip, r4
1a00185c:	f100 33ff 	add.w	r3, r0, #4294967295
1a001860:	d26b      	bcs.n	1a00193a <__udivmoddi4+0x2ae>
1a001862:	45a0      	cmp	r8, r4
1a001864:	d969      	bls.n	1a00193a <__udivmoddi4+0x2ae>
1a001866:	3802      	subs	r0, #2
1a001868:	4464      	add	r4, ip
1a00186a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a00186e:	eba4 0408 	sub.w	r4, r4, r8
1a001872:	fba0 8902 	umull	r8, r9, r0, r2
1a001876:	454c      	cmp	r4, r9
1a001878:	46c6      	mov	lr, r8
1a00187a:	464b      	mov	r3, r9
1a00187c:	d354      	bcc.n	1a001928 <__udivmoddi4+0x29c>
1a00187e:	d051      	beq.n	1a001924 <__udivmoddi4+0x298>
1a001880:	2e00      	cmp	r6, #0
1a001882:	d069      	beq.n	1a001958 <__udivmoddi4+0x2cc>
1a001884:	ebb1 020e 	subs.w	r2, r1, lr
1a001888:	eb64 0403 	sbc.w	r4, r4, r3
1a00188c:	fa04 f505 	lsl.w	r5, r4, r5
1a001890:	fa22 f307 	lsr.w	r3, r2, r7
1a001894:	40fc      	lsrs	r4, r7
1a001896:	431d      	orrs	r5, r3
1a001898:	e9c6 5400 	strd	r5, r4, [r6]
1a00189c:	2700      	movs	r7, #0
1a00189e:	e746      	b.n	1a00172e <__udivmoddi4+0xa2>
1a0018a0:	4637      	mov	r7, r6
1a0018a2:	4630      	mov	r0, r6
1a0018a4:	e743      	b.n	1a00172e <__udivmoddi4+0xa2>
1a0018a6:	4618      	mov	r0, r3
1a0018a8:	e737      	b.n	1a00171a <__udivmoddi4+0x8e>
1a0018aa:	4607      	mov	r7, r0
1a0018ac:	e71f      	b.n	1a0016ee <__udivmoddi4+0x62>
1a0018ae:	f1c2 0320 	rsb	r3, r2, #32
1a0018b2:	fa20 f703 	lsr.w	r7, r0, r3
1a0018b6:	4095      	lsls	r5, r2
1a0018b8:	fa01 f002 	lsl.w	r0, r1, r2
1a0018bc:	fa21 f303 	lsr.w	r3, r1, r3
1a0018c0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0018c4:	4338      	orrs	r0, r7
1a0018c6:	0c01      	lsrs	r1, r0, #16
1a0018c8:	fbb3 f7fe 	udiv	r7, r3, lr
1a0018cc:	fa1f f885 	uxth.w	r8, r5
1a0018d0:	fb0e 3317 	mls	r3, lr, r7, r3
1a0018d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a0018d8:	fb07 f308 	mul.w	r3, r7, r8
1a0018dc:	428b      	cmp	r3, r1
1a0018de:	fa04 f402 	lsl.w	r4, r4, r2
1a0018e2:	d907      	bls.n	1a0018f4 <__udivmoddi4+0x268>
1a0018e4:	1869      	adds	r1, r5, r1
1a0018e6:	f107 3cff 	add.w	ip, r7, #4294967295
1a0018ea:	d228      	bcs.n	1a00193e <__udivmoddi4+0x2b2>
1a0018ec:	428b      	cmp	r3, r1
1a0018ee:	d926      	bls.n	1a00193e <__udivmoddi4+0x2b2>
1a0018f0:	3f02      	subs	r7, #2
1a0018f2:	4429      	add	r1, r5
1a0018f4:	1acb      	subs	r3, r1, r3
1a0018f6:	b281      	uxth	r1, r0
1a0018f8:	fbb3 f0fe 	udiv	r0, r3, lr
1a0018fc:	fb0e 3310 	mls	r3, lr, r0, r3
1a001900:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a001904:	fb00 f308 	mul.w	r3, r0, r8
1a001908:	428b      	cmp	r3, r1
1a00190a:	d907      	bls.n	1a00191c <__udivmoddi4+0x290>
1a00190c:	1869      	adds	r1, r5, r1
1a00190e:	f100 3cff 	add.w	ip, r0, #4294967295
1a001912:	d210      	bcs.n	1a001936 <__udivmoddi4+0x2aa>
1a001914:	428b      	cmp	r3, r1
1a001916:	d90e      	bls.n	1a001936 <__udivmoddi4+0x2aa>
1a001918:	3802      	subs	r0, #2
1a00191a:	4429      	add	r1, r5
1a00191c:	1ac9      	subs	r1, r1, r3
1a00191e:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a001922:	e714      	b.n	1a00174e <__udivmoddi4+0xc2>
1a001924:	4541      	cmp	r1, r8
1a001926:	d2ab      	bcs.n	1a001880 <__udivmoddi4+0x1f4>
1a001928:	ebb8 0e02 	subs.w	lr, r8, r2
1a00192c:	eb69 020c 	sbc.w	r2, r9, ip
1a001930:	3801      	subs	r0, #1
1a001932:	4613      	mov	r3, r2
1a001934:	e7a4      	b.n	1a001880 <__udivmoddi4+0x1f4>
1a001936:	4660      	mov	r0, ip
1a001938:	e7f0      	b.n	1a00191c <__udivmoddi4+0x290>
1a00193a:	4618      	mov	r0, r3
1a00193c:	e795      	b.n	1a00186a <__udivmoddi4+0x1de>
1a00193e:	4667      	mov	r7, ip
1a001940:	e7d8      	b.n	1a0018f4 <__udivmoddi4+0x268>
1a001942:	4681      	mov	r9, r0
1a001944:	e77b      	b.n	1a00183e <__udivmoddi4+0x1b2>
1a001946:	4638      	mov	r0, r7
1a001948:	e745      	b.n	1a0017d6 <__udivmoddi4+0x14a>
1a00194a:	f1ac 0c02 	sub.w	ip, ip, #2
1a00194e:	442b      	add	r3, r5
1a001950:	e710      	b.n	1a001774 <__udivmoddi4+0xe8>
1a001952:	3802      	subs	r0, #2
1a001954:	442c      	add	r4, r5
1a001956:	e721      	b.n	1a00179c <__udivmoddi4+0x110>
1a001958:	4637      	mov	r7, r6
1a00195a:	e6e8      	b.n	1a00172e <__udivmoddi4+0xa2>

1a00195c <__aeabi_idiv0>:
1a00195c:	4770      	bx	lr
1a00195e:	bf00      	nop

1a001960 <__sflush_r>:
1a001960:	898a      	ldrh	r2, [r1, #12]
1a001962:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a001966:	4605      	mov	r5, r0
1a001968:	0710      	lsls	r0, r2, #28
1a00196a:	460c      	mov	r4, r1
1a00196c:	d458      	bmi.n	1a001a20 <__sflush_r+0xc0>
1a00196e:	684b      	ldr	r3, [r1, #4]
1a001970:	2b00      	cmp	r3, #0
1a001972:	dc05      	bgt.n	1a001980 <__sflush_r+0x20>
1a001974:	6c0b      	ldr	r3, [r1, #64]	; 0x40
1a001976:	2b00      	cmp	r3, #0
1a001978:	dc02      	bgt.n	1a001980 <__sflush_r+0x20>
1a00197a:	2000      	movs	r0, #0
1a00197c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a001980:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a001982:	2e00      	cmp	r6, #0
1a001984:	d0f9      	beq.n	1a00197a <__sflush_r+0x1a>
1a001986:	2300      	movs	r3, #0
1a001988:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
1a00198c:	682f      	ldr	r7, [r5, #0]
1a00198e:	602b      	str	r3, [r5, #0]
1a001990:	d032      	beq.n	1a0019f8 <__sflush_r+0x98>
1a001992:	6d60      	ldr	r0, [r4, #84]	; 0x54
1a001994:	89a3      	ldrh	r3, [r4, #12]
1a001996:	075a      	lsls	r2, r3, #29
1a001998:	d505      	bpl.n	1a0019a6 <__sflush_r+0x46>
1a00199a:	6863      	ldr	r3, [r4, #4]
1a00199c:	1ac0      	subs	r0, r0, r3
1a00199e:	6b63      	ldr	r3, [r4, #52]	; 0x34
1a0019a0:	b10b      	cbz	r3, 1a0019a6 <__sflush_r+0x46>
1a0019a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a0019a4:	1ac0      	subs	r0, r0, r3
1a0019a6:	2300      	movs	r3, #0
1a0019a8:	4602      	mov	r2, r0
1a0019aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a0019ac:	6a21      	ldr	r1, [r4, #32]
1a0019ae:	4628      	mov	r0, r5
1a0019b0:	47b0      	blx	r6
1a0019b2:	1c43      	adds	r3, r0, #1
1a0019b4:	89a3      	ldrh	r3, [r4, #12]
1a0019b6:	d106      	bne.n	1a0019c6 <__sflush_r+0x66>
1a0019b8:	6829      	ldr	r1, [r5, #0]
1a0019ba:	291d      	cmp	r1, #29
1a0019bc:	d849      	bhi.n	1a001a52 <__sflush_r+0xf2>
1a0019be:	4a2a      	ldr	r2, [pc, #168]	; (1a001a68 <__sflush_r+0x108>)
1a0019c0:	40ca      	lsrs	r2, r1
1a0019c2:	07d6      	lsls	r6, r2, #31
1a0019c4:	d545      	bpl.n	1a001a52 <__sflush_r+0xf2>
1a0019c6:	2200      	movs	r2, #0
1a0019c8:	6062      	str	r2, [r4, #4]
1a0019ca:	04d9      	lsls	r1, r3, #19
1a0019cc:	6922      	ldr	r2, [r4, #16]
1a0019ce:	6022      	str	r2, [r4, #0]
1a0019d0:	d504      	bpl.n	1a0019dc <__sflush_r+0x7c>
1a0019d2:	1c42      	adds	r2, r0, #1
1a0019d4:	d101      	bne.n	1a0019da <__sflush_r+0x7a>
1a0019d6:	682b      	ldr	r3, [r5, #0]
1a0019d8:	b903      	cbnz	r3, 1a0019dc <__sflush_r+0x7c>
1a0019da:	6560      	str	r0, [r4, #84]	; 0x54
1a0019dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a0019de:	602f      	str	r7, [r5, #0]
1a0019e0:	2900      	cmp	r1, #0
1a0019e2:	d0ca      	beq.n	1a00197a <__sflush_r+0x1a>
1a0019e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a0019e8:	4299      	cmp	r1, r3
1a0019ea:	d002      	beq.n	1a0019f2 <__sflush_r+0x92>
1a0019ec:	4628      	mov	r0, r5
1a0019ee:	f000 f99d 	bl	1a001d2c <_free_r>
1a0019f2:	2000      	movs	r0, #0
1a0019f4:	6360      	str	r0, [r4, #52]	; 0x34
1a0019f6:	e7c1      	b.n	1a00197c <__sflush_r+0x1c>
1a0019f8:	6a21      	ldr	r1, [r4, #32]
1a0019fa:	2301      	movs	r3, #1
1a0019fc:	4628      	mov	r0, r5
1a0019fe:	47b0      	blx	r6
1a001a00:	1c41      	adds	r1, r0, #1
1a001a02:	d1c7      	bne.n	1a001994 <__sflush_r+0x34>
1a001a04:	682b      	ldr	r3, [r5, #0]
1a001a06:	2b00      	cmp	r3, #0
1a001a08:	d0c4      	beq.n	1a001994 <__sflush_r+0x34>
1a001a0a:	2b1d      	cmp	r3, #29
1a001a0c:	d001      	beq.n	1a001a12 <__sflush_r+0xb2>
1a001a0e:	2b16      	cmp	r3, #22
1a001a10:	d101      	bne.n	1a001a16 <__sflush_r+0xb6>
1a001a12:	602f      	str	r7, [r5, #0]
1a001a14:	e7b1      	b.n	1a00197a <__sflush_r+0x1a>
1a001a16:	89a3      	ldrh	r3, [r4, #12]
1a001a18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a001a1c:	81a3      	strh	r3, [r4, #12]
1a001a1e:	e7ad      	b.n	1a00197c <__sflush_r+0x1c>
1a001a20:	690f      	ldr	r7, [r1, #16]
1a001a22:	2f00      	cmp	r7, #0
1a001a24:	d0a9      	beq.n	1a00197a <__sflush_r+0x1a>
1a001a26:	0793      	lsls	r3, r2, #30
1a001a28:	680e      	ldr	r6, [r1, #0]
1a001a2a:	bf08      	it	eq
1a001a2c:	694b      	ldreq	r3, [r1, #20]
1a001a2e:	600f      	str	r7, [r1, #0]
1a001a30:	bf18      	it	ne
1a001a32:	2300      	movne	r3, #0
1a001a34:	eba6 0807 	sub.w	r8, r6, r7
1a001a38:	608b      	str	r3, [r1, #8]
1a001a3a:	f1b8 0f00 	cmp.w	r8, #0
1a001a3e:	dd9c      	ble.n	1a00197a <__sflush_r+0x1a>
1a001a40:	4643      	mov	r3, r8
1a001a42:	463a      	mov	r2, r7
1a001a44:	6a21      	ldr	r1, [r4, #32]
1a001a46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
1a001a48:	4628      	mov	r0, r5
1a001a4a:	47b0      	blx	r6
1a001a4c:	2800      	cmp	r0, #0
1a001a4e:	dc06      	bgt.n	1a001a5e <__sflush_r+0xfe>
1a001a50:	89a3      	ldrh	r3, [r4, #12]
1a001a52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a001a56:	81a3      	strh	r3, [r4, #12]
1a001a58:	f04f 30ff 	mov.w	r0, #4294967295
1a001a5c:	e78e      	b.n	1a00197c <__sflush_r+0x1c>
1a001a5e:	4407      	add	r7, r0
1a001a60:	eba8 0800 	sub.w	r8, r8, r0
1a001a64:	e7e9      	b.n	1a001a3a <__sflush_r+0xda>
1a001a66:	bf00      	nop
1a001a68:	20400001 	.word	0x20400001

1a001a6c <_fflush_r>:
1a001a6c:	b538      	push	{r3, r4, r5, lr}
1a001a6e:	690b      	ldr	r3, [r1, #16]
1a001a70:	4605      	mov	r5, r0
1a001a72:	460c      	mov	r4, r1
1a001a74:	b913      	cbnz	r3, 1a001a7c <_fflush_r+0x10>
1a001a76:	2500      	movs	r5, #0
1a001a78:	4628      	mov	r0, r5
1a001a7a:	bd38      	pop	{r3, r4, r5, pc}
1a001a7c:	b118      	cbz	r0, 1a001a86 <_fflush_r+0x1a>
1a001a7e:	6983      	ldr	r3, [r0, #24]
1a001a80:	b90b      	cbnz	r3, 1a001a86 <_fflush_r+0x1a>
1a001a82:	f000 f887 	bl	1a001b94 <__sinit>
1a001a86:	4b14      	ldr	r3, [pc, #80]	; (1a001ad8 <_fflush_r+0x6c>)
1a001a88:	429c      	cmp	r4, r3
1a001a8a:	d11b      	bne.n	1a001ac4 <_fflush_r+0x58>
1a001a8c:	686c      	ldr	r4, [r5, #4]
1a001a8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a001a92:	2b00      	cmp	r3, #0
1a001a94:	d0ef      	beq.n	1a001a76 <_fflush_r+0xa>
1a001a96:	6e62      	ldr	r2, [r4, #100]	; 0x64
1a001a98:	07d0      	lsls	r0, r2, #31
1a001a9a:	d404      	bmi.n	1a001aa6 <_fflush_r+0x3a>
1a001a9c:	0599      	lsls	r1, r3, #22
1a001a9e:	d402      	bmi.n	1a001aa6 <_fflush_r+0x3a>
1a001aa0:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a001aa2:	f000 f938 	bl	1a001d16 <__retarget_lock_acquire_recursive>
1a001aa6:	4628      	mov	r0, r5
1a001aa8:	4621      	mov	r1, r4
1a001aaa:	f7ff ff59 	bl	1a001960 <__sflush_r>
1a001aae:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a001ab0:	07da      	lsls	r2, r3, #31
1a001ab2:	4605      	mov	r5, r0
1a001ab4:	d4e0      	bmi.n	1a001a78 <_fflush_r+0xc>
1a001ab6:	89a3      	ldrh	r3, [r4, #12]
1a001ab8:	059b      	lsls	r3, r3, #22
1a001aba:	d4dd      	bmi.n	1a001a78 <_fflush_r+0xc>
1a001abc:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a001abe:	f000 f92b 	bl	1a001d18 <__retarget_lock_release_recursive>
1a001ac2:	e7d9      	b.n	1a001a78 <_fflush_r+0xc>
1a001ac4:	4b05      	ldr	r3, [pc, #20]	; (1a001adc <_fflush_r+0x70>)
1a001ac6:	429c      	cmp	r4, r3
1a001ac8:	d101      	bne.n	1a001ace <_fflush_r+0x62>
1a001aca:	68ac      	ldr	r4, [r5, #8]
1a001acc:	e7df      	b.n	1a001a8e <_fflush_r+0x22>
1a001ace:	4b04      	ldr	r3, [pc, #16]	; (1a001ae0 <_fflush_r+0x74>)
1a001ad0:	429c      	cmp	r4, r3
1a001ad2:	bf08      	it	eq
1a001ad4:	68ec      	ldreq	r4, [r5, #12]
1a001ad6:	e7da      	b.n	1a001a8e <_fflush_r+0x22>
1a001ad8:	1a0024f0 	.word	0x1a0024f0
1a001adc:	1a002510 	.word	0x1a002510
1a001ae0:	1a0024d0 	.word	0x1a0024d0

1a001ae4 <std>:
1a001ae4:	2300      	movs	r3, #0
1a001ae6:	b510      	push	{r4, lr}
1a001ae8:	4604      	mov	r4, r0
1a001aea:	e9c0 3300 	strd	r3, r3, [r0]
1a001aee:	6083      	str	r3, [r0, #8]
1a001af0:	8181      	strh	r1, [r0, #12]
1a001af2:	6643      	str	r3, [r0, #100]	; 0x64
1a001af4:	81c2      	strh	r2, [r0, #14]
1a001af6:	e9c0 3304 	strd	r3, r3, [r0, #16]
1a001afa:	6183      	str	r3, [r0, #24]
1a001afc:	4619      	mov	r1, r3
1a001afe:	2208      	movs	r2, #8
1a001b00:	305c      	adds	r0, #92	; 0x5c
1a001b02:	f000 f90a 	bl	1a001d1a <memset>
1a001b06:	4b05      	ldr	r3, [pc, #20]	; (1a001b1c <std+0x38>)
1a001b08:	6263      	str	r3, [r4, #36]	; 0x24
1a001b0a:	4b05      	ldr	r3, [pc, #20]	; (1a001b20 <std+0x3c>)
1a001b0c:	62a3      	str	r3, [r4, #40]	; 0x28
1a001b0e:	4b05      	ldr	r3, [pc, #20]	; (1a001b24 <std+0x40>)
1a001b10:	62e3      	str	r3, [r4, #44]	; 0x2c
1a001b12:	4b05      	ldr	r3, [pc, #20]	; (1a001b28 <std+0x44>)
1a001b14:	6224      	str	r4, [r4, #32]
1a001b16:	6323      	str	r3, [r4, #48]	; 0x30
1a001b18:	bd10      	pop	{r4, pc}
1a001b1a:	bf00      	nop
1a001b1c:	1a001f69 	.word	0x1a001f69
1a001b20:	1a001f8b 	.word	0x1a001f8b
1a001b24:	1a001fc3 	.word	0x1a001fc3
1a001b28:	1a001fe7 	.word	0x1a001fe7

1a001b2c <_cleanup_r>:
1a001b2c:	4901      	ldr	r1, [pc, #4]	; (1a001b34 <_cleanup_r+0x8>)
1a001b2e:	f000 b8af 	b.w	1a001c90 <_fwalk_reent>
1a001b32:	bf00      	nop
1a001b34:	1a001a6d 	.word	0x1a001a6d

1a001b38 <__sfmoreglue>:
1a001b38:	b570      	push	{r4, r5, r6, lr}
1a001b3a:	1e4a      	subs	r2, r1, #1
1a001b3c:	2568      	movs	r5, #104	; 0x68
1a001b3e:	4355      	muls	r5, r2
1a001b40:	460e      	mov	r6, r1
1a001b42:	f105 0174 	add.w	r1, r5, #116	; 0x74
1a001b46:	f000 f93f 	bl	1a001dc8 <_malloc_r>
1a001b4a:	4604      	mov	r4, r0
1a001b4c:	b140      	cbz	r0, 1a001b60 <__sfmoreglue+0x28>
1a001b4e:	2100      	movs	r1, #0
1a001b50:	e9c0 1600 	strd	r1, r6, [r0]
1a001b54:	300c      	adds	r0, #12
1a001b56:	60a0      	str	r0, [r4, #8]
1a001b58:	f105 0268 	add.w	r2, r5, #104	; 0x68
1a001b5c:	f000 f8dd 	bl	1a001d1a <memset>
1a001b60:	4620      	mov	r0, r4
1a001b62:	bd70      	pop	{r4, r5, r6, pc}

1a001b64 <__sfp_lock_acquire>:
1a001b64:	4801      	ldr	r0, [pc, #4]	; (1a001b6c <__sfp_lock_acquire+0x8>)
1a001b66:	f000 b8d6 	b.w	1a001d16 <__retarget_lock_acquire_recursive>
1a001b6a:	bf00      	nop
1a001b6c:	100000e8 	.word	0x100000e8

1a001b70 <__sfp_lock_release>:
1a001b70:	4801      	ldr	r0, [pc, #4]	; (1a001b78 <__sfp_lock_release+0x8>)
1a001b72:	f000 b8d1 	b.w	1a001d18 <__retarget_lock_release_recursive>
1a001b76:	bf00      	nop
1a001b78:	100000e8 	.word	0x100000e8

1a001b7c <__sinit_lock_acquire>:
1a001b7c:	4801      	ldr	r0, [pc, #4]	; (1a001b84 <__sinit_lock_acquire+0x8>)
1a001b7e:	f000 b8ca 	b.w	1a001d16 <__retarget_lock_acquire_recursive>
1a001b82:	bf00      	nop
1a001b84:	100000e3 	.word	0x100000e3

1a001b88 <__sinit_lock_release>:
1a001b88:	4801      	ldr	r0, [pc, #4]	; (1a001b90 <__sinit_lock_release+0x8>)
1a001b8a:	f000 b8c5 	b.w	1a001d18 <__retarget_lock_release_recursive>
1a001b8e:	bf00      	nop
1a001b90:	100000e3 	.word	0x100000e3

1a001b94 <__sinit>:
1a001b94:	b510      	push	{r4, lr}
1a001b96:	4604      	mov	r4, r0
1a001b98:	f7ff fff0 	bl	1a001b7c <__sinit_lock_acquire>
1a001b9c:	69a3      	ldr	r3, [r4, #24]
1a001b9e:	b11b      	cbz	r3, 1a001ba8 <__sinit+0x14>
1a001ba0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a001ba4:	f7ff bff0 	b.w	1a001b88 <__sinit_lock_release>
1a001ba8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
1a001bac:	6523      	str	r3, [r4, #80]	; 0x50
1a001bae:	4b13      	ldr	r3, [pc, #76]	; (1a001bfc <__sinit+0x68>)
1a001bb0:	4a13      	ldr	r2, [pc, #76]	; (1a001c00 <__sinit+0x6c>)
1a001bb2:	681b      	ldr	r3, [r3, #0]
1a001bb4:	62a2      	str	r2, [r4, #40]	; 0x28
1a001bb6:	42a3      	cmp	r3, r4
1a001bb8:	bf04      	itt	eq
1a001bba:	2301      	moveq	r3, #1
1a001bbc:	61a3      	streq	r3, [r4, #24]
1a001bbe:	4620      	mov	r0, r4
1a001bc0:	f000 f820 	bl	1a001c04 <__sfp>
1a001bc4:	6060      	str	r0, [r4, #4]
1a001bc6:	4620      	mov	r0, r4
1a001bc8:	f000 f81c 	bl	1a001c04 <__sfp>
1a001bcc:	60a0      	str	r0, [r4, #8]
1a001bce:	4620      	mov	r0, r4
1a001bd0:	f000 f818 	bl	1a001c04 <__sfp>
1a001bd4:	2200      	movs	r2, #0
1a001bd6:	60e0      	str	r0, [r4, #12]
1a001bd8:	2104      	movs	r1, #4
1a001bda:	6860      	ldr	r0, [r4, #4]
1a001bdc:	f7ff ff82 	bl	1a001ae4 <std>
1a001be0:	2201      	movs	r2, #1
1a001be2:	2109      	movs	r1, #9
1a001be4:	68a0      	ldr	r0, [r4, #8]
1a001be6:	f7ff ff7d 	bl	1a001ae4 <std>
1a001bea:	2202      	movs	r2, #2
1a001bec:	2112      	movs	r1, #18
1a001bee:	68e0      	ldr	r0, [r4, #12]
1a001bf0:	f7ff ff78 	bl	1a001ae4 <std>
1a001bf4:	2301      	movs	r3, #1
1a001bf6:	61a3      	str	r3, [r4, #24]
1a001bf8:	e7d2      	b.n	1a001ba0 <__sinit+0xc>
1a001bfa:	bf00      	nop
1a001bfc:	1a002530 	.word	0x1a002530
1a001c00:	1a001b2d 	.word	0x1a001b2d

1a001c04 <__sfp>:
1a001c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a001c06:	4607      	mov	r7, r0
1a001c08:	f7ff ffac 	bl	1a001b64 <__sfp_lock_acquire>
1a001c0c:	4b1e      	ldr	r3, [pc, #120]	; (1a001c88 <__sfp+0x84>)
1a001c0e:	681e      	ldr	r6, [r3, #0]
1a001c10:	69b3      	ldr	r3, [r6, #24]
1a001c12:	b913      	cbnz	r3, 1a001c1a <__sfp+0x16>
1a001c14:	4630      	mov	r0, r6
1a001c16:	f7ff ffbd 	bl	1a001b94 <__sinit>
1a001c1a:	3648      	adds	r6, #72	; 0x48
1a001c1c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
1a001c20:	3b01      	subs	r3, #1
1a001c22:	d503      	bpl.n	1a001c2c <__sfp+0x28>
1a001c24:	6833      	ldr	r3, [r6, #0]
1a001c26:	b30b      	cbz	r3, 1a001c6c <__sfp+0x68>
1a001c28:	6836      	ldr	r6, [r6, #0]
1a001c2a:	e7f7      	b.n	1a001c1c <__sfp+0x18>
1a001c2c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
1a001c30:	b9d5      	cbnz	r5, 1a001c68 <__sfp+0x64>
1a001c32:	4b16      	ldr	r3, [pc, #88]	; (1a001c8c <__sfp+0x88>)
1a001c34:	60e3      	str	r3, [r4, #12]
1a001c36:	f104 0058 	add.w	r0, r4, #88	; 0x58
1a001c3a:	6665      	str	r5, [r4, #100]	; 0x64
1a001c3c:	f000 f86a 	bl	1a001d14 <__retarget_lock_init_recursive>
1a001c40:	f7ff ff96 	bl	1a001b70 <__sfp_lock_release>
1a001c44:	6025      	str	r5, [r4, #0]
1a001c46:	e9c4 5501 	strd	r5, r5, [r4, #4]
1a001c4a:	e9c4 5504 	strd	r5, r5, [r4, #16]
1a001c4e:	61a5      	str	r5, [r4, #24]
1a001c50:	2208      	movs	r2, #8
1a001c52:	4629      	mov	r1, r5
1a001c54:	f104 005c 	add.w	r0, r4, #92	; 0x5c
1a001c58:	f000 f85f 	bl	1a001d1a <memset>
1a001c5c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
1a001c60:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
1a001c64:	4620      	mov	r0, r4
1a001c66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a001c68:	3468      	adds	r4, #104	; 0x68
1a001c6a:	e7d9      	b.n	1a001c20 <__sfp+0x1c>
1a001c6c:	2104      	movs	r1, #4
1a001c6e:	4638      	mov	r0, r7
1a001c70:	f7ff ff62 	bl	1a001b38 <__sfmoreglue>
1a001c74:	4604      	mov	r4, r0
1a001c76:	6030      	str	r0, [r6, #0]
1a001c78:	2800      	cmp	r0, #0
1a001c7a:	d1d5      	bne.n	1a001c28 <__sfp+0x24>
1a001c7c:	f7ff ff78 	bl	1a001b70 <__sfp_lock_release>
1a001c80:	230c      	movs	r3, #12
1a001c82:	603b      	str	r3, [r7, #0]
1a001c84:	e7ee      	b.n	1a001c64 <__sfp+0x60>
1a001c86:	bf00      	nop
1a001c88:	1a002530 	.word	0x1a002530
1a001c8c:	ffff0001 	.word	0xffff0001

1a001c90 <_fwalk_reent>:
1a001c90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a001c94:	4680      	mov	r8, r0
1a001c96:	4689      	mov	r9, r1
1a001c98:	f100 0448 	add.w	r4, r0, #72	; 0x48
1a001c9c:	2600      	movs	r6, #0
1a001c9e:	b914      	cbnz	r4, 1a001ca6 <_fwalk_reent+0x16>
1a001ca0:	4630      	mov	r0, r6
1a001ca2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a001ca6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
1a001caa:	3f01      	subs	r7, #1
1a001cac:	d501      	bpl.n	1a001cb2 <_fwalk_reent+0x22>
1a001cae:	6824      	ldr	r4, [r4, #0]
1a001cb0:	e7f5      	b.n	1a001c9e <_fwalk_reent+0xe>
1a001cb2:	89ab      	ldrh	r3, [r5, #12]
1a001cb4:	2b01      	cmp	r3, #1
1a001cb6:	d907      	bls.n	1a001cc8 <_fwalk_reent+0x38>
1a001cb8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
1a001cbc:	3301      	adds	r3, #1
1a001cbe:	d003      	beq.n	1a001cc8 <_fwalk_reent+0x38>
1a001cc0:	4629      	mov	r1, r5
1a001cc2:	4640      	mov	r0, r8
1a001cc4:	47c8      	blx	r9
1a001cc6:	4306      	orrs	r6, r0
1a001cc8:	3568      	adds	r5, #104	; 0x68
1a001cca:	e7ee      	b.n	1a001caa <_fwalk_reent+0x1a>

1a001ccc <__libc_init_array>:
1a001ccc:	b570      	push	{r4, r5, r6, lr}
1a001cce:	4d0d      	ldr	r5, [pc, #52]	; (1a001d04 <__libc_init_array+0x38>)
1a001cd0:	4c0d      	ldr	r4, [pc, #52]	; (1a001d08 <__libc_init_array+0x3c>)
1a001cd2:	1b64      	subs	r4, r4, r5
1a001cd4:	10a4      	asrs	r4, r4, #2
1a001cd6:	2600      	movs	r6, #0
1a001cd8:	42a6      	cmp	r6, r4
1a001cda:	d109      	bne.n	1a001cf0 <__libc_init_array+0x24>
1a001cdc:	4d0b      	ldr	r5, [pc, #44]	; (1a001d0c <__libc_init_array+0x40>)
1a001cde:	4c0c      	ldr	r4, [pc, #48]	; (1a001d10 <__libc_init_array+0x44>)
1a001ce0:	f7fe fb87 	bl	1a0003f2 <_init>
1a001ce4:	1b64      	subs	r4, r4, r5
1a001ce6:	10a4      	asrs	r4, r4, #2
1a001ce8:	2600      	movs	r6, #0
1a001cea:	42a6      	cmp	r6, r4
1a001cec:	d105      	bne.n	1a001cfa <__libc_init_array+0x2e>
1a001cee:	bd70      	pop	{r4, r5, r6, pc}
1a001cf0:	f855 3b04 	ldr.w	r3, [r5], #4
1a001cf4:	4798      	blx	r3
1a001cf6:	3601      	adds	r6, #1
1a001cf8:	e7ee      	b.n	1a001cd8 <__libc_init_array+0xc>
1a001cfa:	f855 3b04 	ldr.w	r3, [r5], #4
1a001cfe:	4798      	blx	r3
1a001d00:	3601      	adds	r6, #1
1a001d02:	e7f2      	b.n	1a001cea <__libc_init_array+0x1e>
1a001d04:	1a002534 	.word	0x1a002534
1a001d08:	1a002534 	.word	0x1a002534
1a001d0c:	1a002534 	.word	0x1a002534
1a001d10:	1a002538 	.word	0x1a002538

1a001d14 <__retarget_lock_init_recursive>:
1a001d14:	4770      	bx	lr

1a001d16 <__retarget_lock_acquire_recursive>:
1a001d16:	4770      	bx	lr

1a001d18 <__retarget_lock_release_recursive>:
1a001d18:	4770      	bx	lr

1a001d1a <memset>:
1a001d1a:	4402      	add	r2, r0
1a001d1c:	4603      	mov	r3, r0
1a001d1e:	4293      	cmp	r3, r2
1a001d20:	d100      	bne.n	1a001d24 <memset+0xa>
1a001d22:	4770      	bx	lr
1a001d24:	f803 1b01 	strb.w	r1, [r3], #1
1a001d28:	e7f9      	b.n	1a001d1e <memset+0x4>
1a001d2a:	Address 0x1a001d2a is out of bounds.


1a001d2c <_free_r>:
1a001d2c:	b538      	push	{r3, r4, r5, lr}
1a001d2e:	4605      	mov	r5, r0
1a001d30:	2900      	cmp	r1, #0
1a001d32:	d045      	beq.n	1a001dc0 <_free_r+0x94>
1a001d34:	f851 3c04 	ldr.w	r3, [r1, #-4]
1a001d38:	1f0c      	subs	r4, r1, #4
1a001d3a:	2b00      	cmp	r3, #0
1a001d3c:	bfb8      	it	lt
1a001d3e:	18e4      	addlt	r4, r4, r3
1a001d40:	f000 fa7a 	bl	1a002238 <__malloc_lock>
1a001d44:	4a1f      	ldr	r2, [pc, #124]	; (1a001dc4 <_free_r+0x98>)
1a001d46:	6813      	ldr	r3, [r2, #0]
1a001d48:	4610      	mov	r0, r2
1a001d4a:	b933      	cbnz	r3, 1a001d5a <_free_r+0x2e>
1a001d4c:	6063      	str	r3, [r4, #4]
1a001d4e:	6014      	str	r4, [r2, #0]
1a001d50:	4628      	mov	r0, r5
1a001d52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a001d56:	f000 ba75 	b.w	1a002244 <__malloc_unlock>
1a001d5a:	42a3      	cmp	r3, r4
1a001d5c:	d90c      	bls.n	1a001d78 <_free_r+0x4c>
1a001d5e:	6821      	ldr	r1, [r4, #0]
1a001d60:	1862      	adds	r2, r4, r1
1a001d62:	4293      	cmp	r3, r2
1a001d64:	bf04      	itt	eq
1a001d66:	681a      	ldreq	r2, [r3, #0]
1a001d68:	685b      	ldreq	r3, [r3, #4]
1a001d6a:	6063      	str	r3, [r4, #4]
1a001d6c:	bf04      	itt	eq
1a001d6e:	1852      	addeq	r2, r2, r1
1a001d70:	6022      	streq	r2, [r4, #0]
1a001d72:	6004      	str	r4, [r0, #0]
1a001d74:	e7ec      	b.n	1a001d50 <_free_r+0x24>
1a001d76:	4613      	mov	r3, r2
1a001d78:	685a      	ldr	r2, [r3, #4]
1a001d7a:	b10a      	cbz	r2, 1a001d80 <_free_r+0x54>
1a001d7c:	42a2      	cmp	r2, r4
1a001d7e:	d9fa      	bls.n	1a001d76 <_free_r+0x4a>
1a001d80:	6819      	ldr	r1, [r3, #0]
1a001d82:	1858      	adds	r0, r3, r1
1a001d84:	42a0      	cmp	r0, r4
1a001d86:	d10b      	bne.n	1a001da0 <_free_r+0x74>
1a001d88:	6820      	ldr	r0, [r4, #0]
1a001d8a:	4401      	add	r1, r0
1a001d8c:	1858      	adds	r0, r3, r1
1a001d8e:	4282      	cmp	r2, r0
1a001d90:	6019      	str	r1, [r3, #0]
1a001d92:	d1dd      	bne.n	1a001d50 <_free_r+0x24>
1a001d94:	6810      	ldr	r0, [r2, #0]
1a001d96:	6852      	ldr	r2, [r2, #4]
1a001d98:	605a      	str	r2, [r3, #4]
1a001d9a:	4401      	add	r1, r0
1a001d9c:	6019      	str	r1, [r3, #0]
1a001d9e:	e7d7      	b.n	1a001d50 <_free_r+0x24>
1a001da0:	d902      	bls.n	1a001da8 <_free_r+0x7c>
1a001da2:	230c      	movs	r3, #12
1a001da4:	602b      	str	r3, [r5, #0]
1a001da6:	e7d3      	b.n	1a001d50 <_free_r+0x24>
1a001da8:	6820      	ldr	r0, [r4, #0]
1a001daa:	1821      	adds	r1, r4, r0
1a001dac:	428a      	cmp	r2, r1
1a001dae:	bf04      	itt	eq
1a001db0:	6811      	ldreq	r1, [r2, #0]
1a001db2:	6852      	ldreq	r2, [r2, #4]
1a001db4:	6062      	str	r2, [r4, #4]
1a001db6:	bf04      	itt	eq
1a001db8:	1809      	addeq	r1, r1, r0
1a001dba:	6021      	streq	r1, [r4, #0]
1a001dbc:	605c      	str	r4, [r3, #4]
1a001dbe:	e7c7      	b.n	1a001d50 <_free_r+0x24>
1a001dc0:	bd38      	pop	{r3, r4, r5, pc}
1a001dc2:	bf00      	nop
1a001dc4:	100000d0 	.word	0x100000d0

1a001dc8 <_malloc_r>:
1a001dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a001dca:	1ccd      	adds	r5, r1, #3
1a001dcc:	f025 0503 	bic.w	r5, r5, #3
1a001dd0:	3508      	adds	r5, #8
1a001dd2:	2d0c      	cmp	r5, #12
1a001dd4:	bf38      	it	cc
1a001dd6:	250c      	movcc	r5, #12
1a001dd8:	2d00      	cmp	r5, #0
1a001dda:	4606      	mov	r6, r0
1a001ddc:	db01      	blt.n	1a001de2 <_malloc_r+0x1a>
1a001dde:	42a9      	cmp	r1, r5
1a001de0:	d903      	bls.n	1a001dea <_malloc_r+0x22>
1a001de2:	230c      	movs	r3, #12
1a001de4:	6033      	str	r3, [r6, #0]
1a001de6:	2000      	movs	r0, #0
1a001de8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a001dea:	f000 fa25 	bl	1a002238 <__malloc_lock>
1a001dee:	4921      	ldr	r1, [pc, #132]	; (1a001e74 <_malloc_r+0xac>)
1a001df0:	680a      	ldr	r2, [r1, #0]
1a001df2:	4614      	mov	r4, r2
1a001df4:	b99c      	cbnz	r4, 1a001e1e <_malloc_r+0x56>
1a001df6:	4f20      	ldr	r7, [pc, #128]	; (1a001e78 <_malloc_r+0xb0>)
1a001df8:	683b      	ldr	r3, [r7, #0]
1a001dfa:	b923      	cbnz	r3, 1a001e06 <_malloc_r+0x3e>
1a001dfc:	4621      	mov	r1, r4
1a001dfe:	4630      	mov	r0, r6
1a001e00:	f7fe fb4c 	bl	1a00049c <_sbrk_r>
1a001e04:	6038      	str	r0, [r7, #0]
1a001e06:	4629      	mov	r1, r5
1a001e08:	4630      	mov	r0, r6
1a001e0a:	f7fe fb47 	bl	1a00049c <_sbrk_r>
1a001e0e:	1c43      	adds	r3, r0, #1
1a001e10:	d123      	bne.n	1a001e5a <_malloc_r+0x92>
1a001e12:	230c      	movs	r3, #12
1a001e14:	6033      	str	r3, [r6, #0]
1a001e16:	4630      	mov	r0, r6
1a001e18:	f000 fa14 	bl	1a002244 <__malloc_unlock>
1a001e1c:	e7e3      	b.n	1a001de6 <_malloc_r+0x1e>
1a001e1e:	6823      	ldr	r3, [r4, #0]
1a001e20:	1b5b      	subs	r3, r3, r5
1a001e22:	d417      	bmi.n	1a001e54 <_malloc_r+0x8c>
1a001e24:	2b0b      	cmp	r3, #11
1a001e26:	d903      	bls.n	1a001e30 <_malloc_r+0x68>
1a001e28:	6023      	str	r3, [r4, #0]
1a001e2a:	441c      	add	r4, r3
1a001e2c:	6025      	str	r5, [r4, #0]
1a001e2e:	e004      	b.n	1a001e3a <_malloc_r+0x72>
1a001e30:	6863      	ldr	r3, [r4, #4]
1a001e32:	42a2      	cmp	r2, r4
1a001e34:	bf0c      	ite	eq
1a001e36:	600b      	streq	r3, [r1, #0]
1a001e38:	6053      	strne	r3, [r2, #4]
1a001e3a:	4630      	mov	r0, r6
1a001e3c:	f000 fa02 	bl	1a002244 <__malloc_unlock>
1a001e40:	f104 000b 	add.w	r0, r4, #11
1a001e44:	1d23      	adds	r3, r4, #4
1a001e46:	f020 0007 	bic.w	r0, r0, #7
1a001e4a:	1ac2      	subs	r2, r0, r3
1a001e4c:	d0cc      	beq.n	1a001de8 <_malloc_r+0x20>
1a001e4e:	1a1b      	subs	r3, r3, r0
1a001e50:	50a3      	str	r3, [r4, r2]
1a001e52:	e7c9      	b.n	1a001de8 <_malloc_r+0x20>
1a001e54:	4622      	mov	r2, r4
1a001e56:	6864      	ldr	r4, [r4, #4]
1a001e58:	e7cc      	b.n	1a001df4 <_malloc_r+0x2c>
1a001e5a:	1cc4      	adds	r4, r0, #3
1a001e5c:	f024 0403 	bic.w	r4, r4, #3
1a001e60:	42a0      	cmp	r0, r4
1a001e62:	d0e3      	beq.n	1a001e2c <_malloc_r+0x64>
1a001e64:	1a21      	subs	r1, r4, r0
1a001e66:	4630      	mov	r0, r6
1a001e68:	f7fe fb18 	bl	1a00049c <_sbrk_r>
1a001e6c:	3001      	adds	r0, #1
1a001e6e:	d1dd      	bne.n	1a001e2c <_malloc_r+0x64>
1a001e70:	e7cf      	b.n	1a001e12 <_malloc_r+0x4a>
1a001e72:	bf00      	nop
1a001e74:	100000d0 	.word	0x100000d0
1a001e78:	100000d4 	.word	0x100000d4

1a001e7c <_puts_r>:
1a001e7c:	b570      	push	{r4, r5, r6, lr}
1a001e7e:	460e      	mov	r6, r1
1a001e80:	4605      	mov	r5, r0
1a001e82:	b118      	cbz	r0, 1a001e8c <_puts_r+0x10>
1a001e84:	6983      	ldr	r3, [r0, #24]
1a001e86:	b90b      	cbnz	r3, 1a001e8c <_puts_r+0x10>
1a001e88:	f7ff fe84 	bl	1a001b94 <__sinit>
1a001e8c:	69ab      	ldr	r3, [r5, #24]
1a001e8e:	68ac      	ldr	r4, [r5, #8]
1a001e90:	b913      	cbnz	r3, 1a001e98 <_puts_r+0x1c>
1a001e92:	4628      	mov	r0, r5
1a001e94:	f7ff fe7e 	bl	1a001b94 <__sinit>
1a001e98:	4b2c      	ldr	r3, [pc, #176]	; (1a001f4c <_puts_r+0xd0>)
1a001e9a:	429c      	cmp	r4, r3
1a001e9c:	d120      	bne.n	1a001ee0 <_puts_r+0x64>
1a001e9e:	686c      	ldr	r4, [r5, #4]
1a001ea0:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a001ea2:	07db      	lsls	r3, r3, #31
1a001ea4:	d405      	bmi.n	1a001eb2 <_puts_r+0x36>
1a001ea6:	89a3      	ldrh	r3, [r4, #12]
1a001ea8:	0598      	lsls	r0, r3, #22
1a001eaa:	d402      	bmi.n	1a001eb2 <_puts_r+0x36>
1a001eac:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a001eae:	f7ff ff32 	bl	1a001d16 <__retarget_lock_acquire_recursive>
1a001eb2:	89a3      	ldrh	r3, [r4, #12]
1a001eb4:	0719      	lsls	r1, r3, #28
1a001eb6:	d51d      	bpl.n	1a001ef4 <_puts_r+0x78>
1a001eb8:	6923      	ldr	r3, [r4, #16]
1a001eba:	b1db      	cbz	r3, 1a001ef4 <_puts_r+0x78>
1a001ebc:	3e01      	subs	r6, #1
1a001ebe:	68a3      	ldr	r3, [r4, #8]
1a001ec0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
1a001ec4:	3b01      	subs	r3, #1
1a001ec6:	60a3      	str	r3, [r4, #8]
1a001ec8:	bb39      	cbnz	r1, 1a001f1a <_puts_r+0x9e>
1a001eca:	2b00      	cmp	r3, #0
1a001ecc:	da38      	bge.n	1a001f40 <_puts_r+0xc4>
1a001ece:	4622      	mov	r2, r4
1a001ed0:	210a      	movs	r1, #10
1a001ed2:	4628      	mov	r0, r5
1a001ed4:	f000 f88c 	bl	1a001ff0 <__swbuf_r>
1a001ed8:	3001      	adds	r0, #1
1a001eda:	d011      	beq.n	1a001f00 <_puts_r+0x84>
1a001edc:	250a      	movs	r5, #10
1a001ede:	e011      	b.n	1a001f04 <_puts_r+0x88>
1a001ee0:	4b1b      	ldr	r3, [pc, #108]	; (1a001f50 <_puts_r+0xd4>)
1a001ee2:	429c      	cmp	r4, r3
1a001ee4:	d101      	bne.n	1a001eea <_puts_r+0x6e>
1a001ee6:	68ac      	ldr	r4, [r5, #8]
1a001ee8:	e7da      	b.n	1a001ea0 <_puts_r+0x24>
1a001eea:	4b1a      	ldr	r3, [pc, #104]	; (1a001f54 <_puts_r+0xd8>)
1a001eec:	429c      	cmp	r4, r3
1a001eee:	bf08      	it	eq
1a001ef0:	68ec      	ldreq	r4, [r5, #12]
1a001ef2:	e7d5      	b.n	1a001ea0 <_puts_r+0x24>
1a001ef4:	4621      	mov	r1, r4
1a001ef6:	4628      	mov	r0, r5
1a001ef8:	f000 f8cc 	bl	1a002094 <__swsetup_r>
1a001efc:	2800      	cmp	r0, #0
1a001efe:	d0dd      	beq.n	1a001ebc <_puts_r+0x40>
1a001f00:	f04f 35ff 	mov.w	r5, #4294967295
1a001f04:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a001f06:	07da      	lsls	r2, r3, #31
1a001f08:	d405      	bmi.n	1a001f16 <_puts_r+0x9a>
1a001f0a:	89a3      	ldrh	r3, [r4, #12]
1a001f0c:	059b      	lsls	r3, r3, #22
1a001f0e:	d402      	bmi.n	1a001f16 <_puts_r+0x9a>
1a001f10:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a001f12:	f7ff ff01 	bl	1a001d18 <__retarget_lock_release_recursive>
1a001f16:	4628      	mov	r0, r5
1a001f18:	bd70      	pop	{r4, r5, r6, pc}
1a001f1a:	2b00      	cmp	r3, #0
1a001f1c:	da04      	bge.n	1a001f28 <_puts_r+0xac>
1a001f1e:	69a2      	ldr	r2, [r4, #24]
1a001f20:	429a      	cmp	r2, r3
1a001f22:	dc06      	bgt.n	1a001f32 <_puts_r+0xb6>
1a001f24:	290a      	cmp	r1, #10
1a001f26:	d004      	beq.n	1a001f32 <_puts_r+0xb6>
1a001f28:	6823      	ldr	r3, [r4, #0]
1a001f2a:	1c5a      	adds	r2, r3, #1
1a001f2c:	6022      	str	r2, [r4, #0]
1a001f2e:	7019      	strb	r1, [r3, #0]
1a001f30:	e7c5      	b.n	1a001ebe <_puts_r+0x42>
1a001f32:	4622      	mov	r2, r4
1a001f34:	4628      	mov	r0, r5
1a001f36:	f000 f85b 	bl	1a001ff0 <__swbuf_r>
1a001f3a:	3001      	adds	r0, #1
1a001f3c:	d1bf      	bne.n	1a001ebe <_puts_r+0x42>
1a001f3e:	e7df      	b.n	1a001f00 <_puts_r+0x84>
1a001f40:	6823      	ldr	r3, [r4, #0]
1a001f42:	250a      	movs	r5, #10
1a001f44:	1c5a      	adds	r2, r3, #1
1a001f46:	6022      	str	r2, [r4, #0]
1a001f48:	701d      	strb	r5, [r3, #0]
1a001f4a:	e7db      	b.n	1a001f04 <_puts_r+0x88>
1a001f4c:	1a0024f0 	.word	0x1a0024f0
1a001f50:	1a002510 	.word	0x1a002510
1a001f54:	1a0024d0 	.word	0x1a0024d0

1a001f58 <puts>:
1a001f58:	4b02      	ldr	r3, [pc, #8]	; (1a001f64 <puts+0xc>)
1a001f5a:	4601      	mov	r1, r0
1a001f5c:	6818      	ldr	r0, [r3, #0]
1a001f5e:	f7ff bf8d 	b.w	1a001e7c <_puts_r>
1a001f62:	bf00      	nop
1a001f64:	10000048 	.word	0x10000048

1a001f68 <__sread>:
1a001f68:	b510      	push	{r4, lr}
1a001f6a:	460c      	mov	r4, r1
1a001f6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a001f70:	f7fe fa58 	bl	1a000424 <_read_r>
1a001f74:	2800      	cmp	r0, #0
1a001f76:	bfab      	itete	ge
1a001f78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
1a001f7a:	89a3      	ldrhlt	r3, [r4, #12]
1a001f7c:	181b      	addge	r3, r3, r0
1a001f7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
1a001f82:	bfac      	ite	ge
1a001f84:	6563      	strge	r3, [r4, #84]	; 0x54
1a001f86:	81a3      	strhlt	r3, [r4, #12]
1a001f88:	bd10      	pop	{r4, pc}

1a001f8a <__swrite>:
1a001f8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a001f8e:	461f      	mov	r7, r3
1a001f90:	898b      	ldrh	r3, [r1, #12]
1a001f92:	05db      	lsls	r3, r3, #23
1a001f94:	4605      	mov	r5, r0
1a001f96:	460c      	mov	r4, r1
1a001f98:	4616      	mov	r6, r2
1a001f9a:	d505      	bpl.n	1a001fa8 <__swrite+0x1e>
1a001f9c:	2302      	movs	r3, #2
1a001f9e:	2200      	movs	r2, #0
1a001fa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a001fa4:	f7fe fa39 	bl	1a00041a <_lseek_r>
1a001fa8:	89a3      	ldrh	r3, [r4, #12]
1a001faa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a001fae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
1a001fb2:	81a3      	strh	r3, [r4, #12]
1a001fb4:	4632      	mov	r2, r6
1a001fb6:	463b      	mov	r3, r7
1a001fb8:	4628      	mov	r0, r5
1a001fba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a001fbe:	f7fe ba58 	b.w	1a000472 <_write_r>

1a001fc2 <__sseek>:
1a001fc2:	b510      	push	{r4, lr}
1a001fc4:	460c      	mov	r4, r1
1a001fc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a001fca:	f7fe fa26 	bl	1a00041a <_lseek_r>
1a001fce:	1c43      	adds	r3, r0, #1
1a001fd0:	89a3      	ldrh	r3, [r4, #12]
1a001fd2:	bf15      	itete	ne
1a001fd4:	6560      	strne	r0, [r4, #84]	; 0x54
1a001fd6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
1a001fda:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
1a001fde:	81a3      	strheq	r3, [r4, #12]
1a001fe0:	bf18      	it	ne
1a001fe2:	81a3      	strhne	r3, [r4, #12]
1a001fe4:	bd10      	pop	{r4, pc}

1a001fe6 <__sclose>:
1a001fe6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a001fea:	f7fe ba03 	b.w	1a0003f4 <_close_r>
1a001fee:	Address 0x1a001fee is out of bounds.


1a001ff0 <__swbuf_r>:
1a001ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a001ff2:	460e      	mov	r6, r1
1a001ff4:	4614      	mov	r4, r2
1a001ff6:	4605      	mov	r5, r0
1a001ff8:	b118      	cbz	r0, 1a002002 <__swbuf_r+0x12>
1a001ffa:	6983      	ldr	r3, [r0, #24]
1a001ffc:	b90b      	cbnz	r3, 1a002002 <__swbuf_r+0x12>
1a001ffe:	f7ff fdc9 	bl	1a001b94 <__sinit>
1a002002:	4b21      	ldr	r3, [pc, #132]	; (1a002088 <__swbuf_r+0x98>)
1a002004:	429c      	cmp	r4, r3
1a002006:	d12b      	bne.n	1a002060 <__swbuf_r+0x70>
1a002008:	686c      	ldr	r4, [r5, #4]
1a00200a:	69a3      	ldr	r3, [r4, #24]
1a00200c:	60a3      	str	r3, [r4, #8]
1a00200e:	89a3      	ldrh	r3, [r4, #12]
1a002010:	071a      	lsls	r2, r3, #28
1a002012:	d52f      	bpl.n	1a002074 <__swbuf_r+0x84>
1a002014:	6923      	ldr	r3, [r4, #16]
1a002016:	b36b      	cbz	r3, 1a002074 <__swbuf_r+0x84>
1a002018:	6923      	ldr	r3, [r4, #16]
1a00201a:	6820      	ldr	r0, [r4, #0]
1a00201c:	1ac0      	subs	r0, r0, r3
1a00201e:	6963      	ldr	r3, [r4, #20]
1a002020:	b2f6      	uxtb	r6, r6
1a002022:	4283      	cmp	r3, r0
1a002024:	4637      	mov	r7, r6
1a002026:	dc04      	bgt.n	1a002032 <__swbuf_r+0x42>
1a002028:	4621      	mov	r1, r4
1a00202a:	4628      	mov	r0, r5
1a00202c:	f7ff fd1e 	bl	1a001a6c <_fflush_r>
1a002030:	bb30      	cbnz	r0, 1a002080 <__swbuf_r+0x90>
1a002032:	68a3      	ldr	r3, [r4, #8]
1a002034:	3b01      	subs	r3, #1
1a002036:	60a3      	str	r3, [r4, #8]
1a002038:	6823      	ldr	r3, [r4, #0]
1a00203a:	1c5a      	adds	r2, r3, #1
1a00203c:	6022      	str	r2, [r4, #0]
1a00203e:	701e      	strb	r6, [r3, #0]
1a002040:	6963      	ldr	r3, [r4, #20]
1a002042:	3001      	adds	r0, #1
1a002044:	4283      	cmp	r3, r0
1a002046:	d004      	beq.n	1a002052 <__swbuf_r+0x62>
1a002048:	89a3      	ldrh	r3, [r4, #12]
1a00204a:	07db      	lsls	r3, r3, #31
1a00204c:	d506      	bpl.n	1a00205c <__swbuf_r+0x6c>
1a00204e:	2e0a      	cmp	r6, #10
1a002050:	d104      	bne.n	1a00205c <__swbuf_r+0x6c>
1a002052:	4621      	mov	r1, r4
1a002054:	4628      	mov	r0, r5
1a002056:	f7ff fd09 	bl	1a001a6c <_fflush_r>
1a00205a:	b988      	cbnz	r0, 1a002080 <__swbuf_r+0x90>
1a00205c:	4638      	mov	r0, r7
1a00205e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a002060:	4b0a      	ldr	r3, [pc, #40]	; (1a00208c <__swbuf_r+0x9c>)
1a002062:	429c      	cmp	r4, r3
1a002064:	d101      	bne.n	1a00206a <__swbuf_r+0x7a>
1a002066:	68ac      	ldr	r4, [r5, #8]
1a002068:	e7cf      	b.n	1a00200a <__swbuf_r+0x1a>
1a00206a:	4b09      	ldr	r3, [pc, #36]	; (1a002090 <__swbuf_r+0xa0>)
1a00206c:	429c      	cmp	r4, r3
1a00206e:	bf08      	it	eq
1a002070:	68ec      	ldreq	r4, [r5, #12]
1a002072:	e7ca      	b.n	1a00200a <__swbuf_r+0x1a>
1a002074:	4621      	mov	r1, r4
1a002076:	4628      	mov	r0, r5
1a002078:	f000 f80c 	bl	1a002094 <__swsetup_r>
1a00207c:	2800      	cmp	r0, #0
1a00207e:	d0cb      	beq.n	1a002018 <__swbuf_r+0x28>
1a002080:	f04f 37ff 	mov.w	r7, #4294967295
1a002084:	e7ea      	b.n	1a00205c <__swbuf_r+0x6c>
1a002086:	bf00      	nop
1a002088:	1a0024f0 	.word	0x1a0024f0
1a00208c:	1a002510 	.word	0x1a002510
1a002090:	1a0024d0 	.word	0x1a0024d0

1a002094 <__swsetup_r>:
1a002094:	4b32      	ldr	r3, [pc, #200]	; (1a002160 <__swsetup_r+0xcc>)
1a002096:	b570      	push	{r4, r5, r6, lr}
1a002098:	681d      	ldr	r5, [r3, #0]
1a00209a:	4606      	mov	r6, r0
1a00209c:	460c      	mov	r4, r1
1a00209e:	b125      	cbz	r5, 1a0020aa <__swsetup_r+0x16>
1a0020a0:	69ab      	ldr	r3, [r5, #24]
1a0020a2:	b913      	cbnz	r3, 1a0020aa <__swsetup_r+0x16>
1a0020a4:	4628      	mov	r0, r5
1a0020a6:	f7ff fd75 	bl	1a001b94 <__sinit>
1a0020aa:	4b2e      	ldr	r3, [pc, #184]	; (1a002164 <__swsetup_r+0xd0>)
1a0020ac:	429c      	cmp	r4, r3
1a0020ae:	d10f      	bne.n	1a0020d0 <__swsetup_r+0x3c>
1a0020b0:	686c      	ldr	r4, [r5, #4]
1a0020b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0020b6:	b29a      	uxth	r2, r3
1a0020b8:	0715      	lsls	r5, r2, #28
1a0020ba:	d42c      	bmi.n	1a002116 <__swsetup_r+0x82>
1a0020bc:	06d0      	lsls	r0, r2, #27
1a0020be:	d411      	bmi.n	1a0020e4 <__swsetup_r+0x50>
1a0020c0:	2209      	movs	r2, #9
1a0020c2:	6032      	str	r2, [r6, #0]
1a0020c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a0020c8:	81a3      	strh	r3, [r4, #12]
1a0020ca:	f04f 30ff 	mov.w	r0, #4294967295
1a0020ce:	e03e      	b.n	1a00214e <__swsetup_r+0xba>
1a0020d0:	4b25      	ldr	r3, [pc, #148]	; (1a002168 <__swsetup_r+0xd4>)
1a0020d2:	429c      	cmp	r4, r3
1a0020d4:	d101      	bne.n	1a0020da <__swsetup_r+0x46>
1a0020d6:	68ac      	ldr	r4, [r5, #8]
1a0020d8:	e7eb      	b.n	1a0020b2 <__swsetup_r+0x1e>
1a0020da:	4b24      	ldr	r3, [pc, #144]	; (1a00216c <__swsetup_r+0xd8>)
1a0020dc:	429c      	cmp	r4, r3
1a0020de:	bf08      	it	eq
1a0020e0:	68ec      	ldreq	r4, [r5, #12]
1a0020e2:	e7e6      	b.n	1a0020b2 <__swsetup_r+0x1e>
1a0020e4:	0751      	lsls	r1, r2, #29
1a0020e6:	d512      	bpl.n	1a00210e <__swsetup_r+0x7a>
1a0020e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a0020ea:	b141      	cbz	r1, 1a0020fe <__swsetup_r+0x6a>
1a0020ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a0020f0:	4299      	cmp	r1, r3
1a0020f2:	d002      	beq.n	1a0020fa <__swsetup_r+0x66>
1a0020f4:	4630      	mov	r0, r6
1a0020f6:	f7ff fe19 	bl	1a001d2c <_free_r>
1a0020fa:	2300      	movs	r3, #0
1a0020fc:	6363      	str	r3, [r4, #52]	; 0x34
1a0020fe:	89a3      	ldrh	r3, [r4, #12]
1a002100:	f023 0324 	bic.w	r3, r3, #36	; 0x24
1a002104:	81a3      	strh	r3, [r4, #12]
1a002106:	2300      	movs	r3, #0
1a002108:	6063      	str	r3, [r4, #4]
1a00210a:	6923      	ldr	r3, [r4, #16]
1a00210c:	6023      	str	r3, [r4, #0]
1a00210e:	89a3      	ldrh	r3, [r4, #12]
1a002110:	f043 0308 	orr.w	r3, r3, #8
1a002114:	81a3      	strh	r3, [r4, #12]
1a002116:	6923      	ldr	r3, [r4, #16]
1a002118:	b94b      	cbnz	r3, 1a00212e <__swsetup_r+0x9a>
1a00211a:	89a3      	ldrh	r3, [r4, #12]
1a00211c:	f403 7320 	and.w	r3, r3, #640	; 0x280
1a002120:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a002124:	d003      	beq.n	1a00212e <__swsetup_r+0x9a>
1a002126:	4621      	mov	r1, r4
1a002128:	4630      	mov	r0, r6
1a00212a:	f000 f845 	bl	1a0021b8 <__smakebuf_r>
1a00212e:	89a2      	ldrh	r2, [r4, #12]
1a002130:	f012 0301 	ands.w	r3, r2, #1
1a002134:	d00c      	beq.n	1a002150 <__swsetup_r+0xbc>
1a002136:	2300      	movs	r3, #0
1a002138:	60a3      	str	r3, [r4, #8]
1a00213a:	6963      	ldr	r3, [r4, #20]
1a00213c:	425b      	negs	r3, r3
1a00213e:	61a3      	str	r3, [r4, #24]
1a002140:	6923      	ldr	r3, [r4, #16]
1a002142:	b953      	cbnz	r3, 1a00215a <__swsetup_r+0xc6>
1a002144:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a002148:	f013 0080 	ands.w	r0, r3, #128	; 0x80
1a00214c:	d1ba      	bne.n	1a0020c4 <__swsetup_r+0x30>
1a00214e:	bd70      	pop	{r4, r5, r6, pc}
1a002150:	0792      	lsls	r2, r2, #30
1a002152:	bf58      	it	pl
1a002154:	6963      	ldrpl	r3, [r4, #20]
1a002156:	60a3      	str	r3, [r4, #8]
1a002158:	e7f2      	b.n	1a002140 <__swsetup_r+0xac>
1a00215a:	2000      	movs	r0, #0
1a00215c:	e7f7      	b.n	1a00214e <__swsetup_r+0xba>
1a00215e:	bf00      	nop
1a002160:	10000048 	.word	0x10000048
1a002164:	1a0024f0 	.word	0x1a0024f0
1a002168:	1a002510 	.word	0x1a002510
1a00216c:	1a0024d0 	.word	0x1a0024d0

1a002170 <__swhatbuf_r>:
1a002170:	b570      	push	{r4, r5, r6, lr}
1a002172:	460e      	mov	r6, r1
1a002174:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a002178:	2900      	cmp	r1, #0
1a00217a:	b096      	sub	sp, #88	; 0x58
1a00217c:	4614      	mov	r4, r2
1a00217e:	461d      	mov	r5, r3
1a002180:	da07      	bge.n	1a002192 <__swhatbuf_r+0x22>
1a002182:	2300      	movs	r3, #0
1a002184:	602b      	str	r3, [r5, #0]
1a002186:	89b3      	ldrh	r3, [r6, #12]
1a002188:	061a      	lsls	r2, r3, #24
1a00218a:	d410      	bmi.n	1a0021ae <__swhatbuf_r+0x3e>
1a00218c:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a002190:	e00e      	b.n	1a0021b0 <__swhatbuf_r+0x40>
1a002192:	466a      	mov	r2, sp
1a002194:	f7fe f933 	bl	1a0003fe <_fstat_r>
1a002198:	2800      	cmp	r0, #0
1a00219a:	dbf2      	blt.n	1a002182 <__swhatbuf_r+0x12>
1a00219c:	9a01      	ldr	r2, [sp, #4]
1a00219e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
1a0021a2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
1a0021a6:	425a      	negs	r2, r3
1a0021a8:	415a      	adcs	r2, r3
1a0021aa:	602a      	str	r2, [r5, #0]
1a0021ac:	e7ee      	b.n	1a00218c <__swhatbuf_r+0x1c>
1a0021ae:	2340      	movs	r3, #64	; 0x40
1a0021b0:	2000      	movs	r0, #0
1a0021b2:	6023      	str	r3, [r4, #0]
1a0021b4:	b016      	add	sp, #88	; 0x58
1a0021b6:	bd70      	pop	{r4, r5, r6, pc}

1a0021b8 <__smakebuf_r>:
1a0021b8:	898b      	ldrh	r3, [r1, #12]
1a0021ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
1a0021bc:	079d      	lsls	r5, r3, #30
1a0021be:	4606      	mov	r6, r0
1a0021c0:	460c      	mov	r4, r1
1a0021c2:	d507      	bpl.n	1a0021d4 <__smakebuf_r+0x1c>
1a0021c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
1a0021c8:	6023      	str	r3, [r4, #0]
1a0021ca:	6123      	str	r3, [r4, #16]
1a0021cc:	2301      	movs	r3, #1
1a0021ce:	6163      	str	r3, [r4, #20]
1a0021d0:	b002      	add	sp, #8
1a0021d2:	bd70      	pop	{r4, r5, r6, pc}
1a0021d4:	ab01      	add	r3, sp, #4
1a0021d6:	466a      	mov	r2, sp
1a0021d8:	f7ff ffca 	bl	1a002170 <__swhatbuf_r>
1a0021dc:	9900      	ldr	r1, [sp, #0]
1a0021de:	4605      	mov	r5, r0
1a0021e0:	4630      	mov	r0, r6
1a0021e2:	f7ff fdf1 	bl	1a001dc8 <_malloc_r>
1a0021e6:	b948      	cbnz	r0, 1a0021fc <__smakebuf_r+0x44>
1a0021e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0021ec:	059a      	lsls	r2, r3, #22
1a0021ee:	d4ef      	bmi.n	1a0021d0 <__smakebuf_r+0x18>
1a0021f0:	f023 0303 	bic.w	r3, r3, #3
1a0021f4:	f043 0302 	orr.w	r3, r3, #2
1a0021f8:	81a3      	strh	r3, [r4, #12]
1a0021fa:	e7e3      	b.n	1a0021c4 <__smakebuf_r+0xc>
1a0021fc:	4b0d      	ldr	r3, [pc, #52]	; (1a002234 <__smakebuf_r+0x7c>)
1a0021fe:	62b3      	str	r3, [r6, #40]	; 0x28
1a002200:	89a3      	ldrh	r3, [r4, #12]
1a002202:	6020      	str	r0, [r4, #0]
1a002204:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a002208:	81a3      	strh	r3, [r4, #12]
1a00220a:	9b00      	ldr	r3, [sp, #0]
1a00220c:	6163      	str	r3, [r4, #20]
1a00220e:	9b01      	ldr	r3, [sp, #4]
1a002210:	6120      	str	r0, [r4, #16]
1a002212:	b15b      	cbz	r3, 1a00222c <__smakebuf_r+0x74>
1a002214:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a002218:	4630      	mov	r0, r6
1a00221a:	f7fe f8f5 	bl	1a000408 <_isatty_r>
1a00221e:	b128      	cbz	r0, 1a00222c <__smakebuf_r+0x74>
1a002220:	89a3      	ldrh	r3, [r4, #12]
1a002222:	f023 0303 	bic.w	r3, r3, #3
1a002226:	f043 0301 	orr.w	r3, r3, #1
1a00222a:	81a3      	strh	r3, [r4, #12]
1a00222c:	89a3      	ldrh	r3, [r4, #12]
1a00222e:	431d      	orrs	r5, r3
1a002230:	81a5      	strh	r5, [r4, #12]
1a002232:	e7cd      	b.n	1a0021d0 <__smakebuf_r+0x18>
1a002234:	1a001b2d 	.word	0x1a001b2d

1a002238 <__malloc_lock>:
1a002238:	4801      	ldr	r0, [pc, #4]	; (1a002240 <__malloc_lock+0x8>)
1a00223a:	f7ff bd6c 	b.w	1a001d16 <__retarget_lock_acquire_recursive>
1a00223e:	bf00      	nop
1a002240:	100000e4 	.word	0x100000e4

1a002244 <__malloc_unlock>:
1a002244:	4801      	ldr	r0, [pc, #4]	; (1a00224c <__malloc_unlock+0x8>)
1a002246:	f7ff bd67 	b.w	1a001d18 <__retarget_lock_release_recursive>
1a00224a:	bf00      	nop
1a00224c:	100000e4 	.word	0x100000e4
1a002250:	2044454c 	.word	0x2044454c
1a002254:	65636e65 	.word	0x65636e65
1a002258:	6469646e 	.word	0x6469646e
1a00225c:	000d2e6f 	.word	0x000d2e6f
1a002260:	2044454c 	.word	0x2044454c
1a002264:	67617061 	.word	0x67617061
1a002268:	2e6f6461 	.word	0x2e6f6461
1a00226c:	ffff000d 	.word	0xffff000d

1a002270 <InitClkStates>:
1a002270:	01010f01                                ....

1a002274 <pinmuxing>:
1a002274:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a002284:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a002294:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a0022a4:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a0022b4:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a0022c4:	00d50301 00d50401 00160107 00560207     ..............V.
1a0022d4:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a0022e4:	00570206                                ..W.

1a0022e8 <ExtRateIn>:
1a0022e8:	00000000                                ....

1a0022ec <GpioButtons>:
1a0022ec:	08000400 09010900                       ........

1a0022f4 <GpioLeds>:
1a0022f4:	01050005 0e000205 0c010b01              ............

1a002300 <GpioPorts>:
1a002300:	03030003 0f050403 05031005 07030603     ................
1a002310:	ffff0802                                ....

1a002314 <OscRateIn>:
1a002314:	00b71b00                                ....

1a002318 <InitClkStates>:
1a002318:	00010100 00010909 0001090a 01010701     ................
1a002328:	00010902 00010906 0101090c 0001090d     ................
1a002338:	0001090e 0001090f 00010910 00010911     ................
1a002348:	00010912 00010913 00011114 00011119     ................
1a002358:	0001111a 0001111b 08040201 0f0f0f03     ................
1a002368:	000000ff                                ....

1a00236c <periph_to_base>:
1a00236c:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a00237c:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a00238c:	000100e0 01000100 01200003 00060120     .......... . ...
1a00239c:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a0023ac:	01820013 00120182 01a201a2 01c20011     ................
1a0023bc:	001001c2 01e201e2 0202000f 000e0202     ................
1a0023cc:	02220222 0223000d 001c0223              "."...#.#...

1a0023d8 <UART_BClock>:
1a0023d8:	01a201c2 01620182                       ......b.

1a0023e0 <UART_PClock>:
1a0023e0:	00820081 00a200a1                       ........

1a0023e8 <gpioPinsInit>:
1a0023e8:	02000104 00050701 05010d03 04080100     ................
1a0023f8:	02020002 02000304 00000403 04070002     ................
1a002408:	030c0300 09050402 05040103 04030208     ................
1a002418:	04020305 06040504 0802000c 03000b06     ................
1a002428:	00090607 07060503 060f0504 03030004     ................
1a002438:	02000404 00050404 06040502 04060200     ................
1a002448:	0c050408 05040a04 0003010e 14010a00     ................
1a002458:	010f0000 0d000012 00001101 0010010c     ................
1a002468:	07070300 000f0300 01000001 00000000     ................
1a002478:	000a0600 08060603 06100504 04030005     ................
1a002488:	03000106 04090400 04010d05 010b0000     ................
1a002498:	0200000f 00000001 00010104 02010800     ................
1a0024a8:	01090000 09010006 05040002 04010200     ................
1a0024b8:	02020105 02020504 0e00000a 01000b02     ................
1a0024c8:	000c020b ffff0c01                       ........

1a0024d0 <__sf_fake_stderr>:
	...

1a0024f0 <__sf_fake_stdin>:
	...

1a002510 <__sf_fake_stdout>:
	...

1a002530 <_global_impure_ptr>:
1a002530:	1000004c                                L...
