
tdp1/arcade_stick/app/out/app.elf:     file format elf32-littlearm
tdp1/arcade_stick/app/out/app.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a0009b9

Program Header:
0x70000001 off    0x00013ab8 vaddr 0x1a003ab8 paddr 0x1a003ab8 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x000000b4 memsz 0x000001a0 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x00003ac0 memsz 0x00003ac0 flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a003ac0 align 2**16
         filesz 0x000000f4 memsz 0x000000f4 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003ab4  1a000000  1a000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000f4  10000000  1a003ac0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  000200f4  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  000200f4  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  000200f4  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  000200f4  2**2
                  CONTENTS
  6 .bss          000000a8  100000f8  100000f8  000000f8  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  000200f4  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  000200f4  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  000200f4  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  000200f4  2**2
                  CONTENTS
 11 .init_array   00000004  1a003ab4  1a003ab4  00013ab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a003ab8  1a003ab8  00013ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  000200f4  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  000200f4  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  000200f4  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  000200f4  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  000200f4  2**2
                  CONTENTS
 18 .noinit       00000000  100001a0  100001a0  000200f4  2**2
                  CONTENTS
 19 .debug_info   00037813  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 00006692  00000000  00000000  00057907  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_aranges 00000cf0  00000000  00000000  0005df99  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_macro  00010720  00000000  00000000  0005ec89  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_line   000196c5  00000000  00000000  0006f3a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_str    00028e3c  00000000  00000000  00088a6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .comment      00000068  00000000  00000000  000b18aa  2**0
                  CONTENTS, READONLY
 26 .ARM.attributes 00000037  00000000  00000000  000b1912  2**0
                  CONTENTS, READONLY
 27 .debug_loc    00008df6  00000000  00000000  000b1949  2**0
                  CONTENTS, READONLY, DEBUGGING
 28 .debug_ranges 00000c60  00000000  00000000  000ba73f  2**0
                  CONTENTS, READONLY, DEBUGGING
 29 .debug_frame  0000241c  00000000  00000000  000bb3a0  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
100000f8 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a003ab4 l    d  .init_array	00000000 .init_array
1a003ab8 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
100001a0 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 usbd_gamepad.c
1a000300 l     F .text	00000004 Gamepad_SetReport
1a000304 l     F .text	00000014 Gamepad_EpIN_Hdlr
1a000318 l     F .text	00000020 Gamepad_UpdateReport
1a000338 l     F .text	00000040 Gamepad_GetReport
100000f8 l     O .bss	00000010 g_gamePad
00000000 l    df *ABS*	00000000 display_api.c
1a000490 l     F .text	0000005c Display_AddCustomChars
00000000 l    df *ABS*	00000000 buttons.c
00000000 l    df *ABS*	00000000 led.c
1a0005c4 l     F .text	00000020 LED_Encender
1a0005e4 l     F .text	00000018 LED_Apagar
1000010c l     O .bss	00000001 count.13962
1000010d l     O .bss	00000001 ledEncendido
10000047 l     O .data	00000001 apagado
00000000 l    df *ABS*	00000000 app.c
1a000694 l     F .text	00000022 initComponents
00000000 l    df *ABS*	00000000 MEF.c
1a0006d0 l     F .text	00000064 MEF_Ready
1a000734 l     F .text	00000038 MEF_Checking
1a00076c l     F .text	00000024 MEF_Fail
1a000790 l     F .text	0000002c MEF_Connecting
1000010e l     O .bss	00000002 attempts.14275
10000110 l     O .bss	00000001 printed.14272
10000111 l     O .bss	00000001 printed.14279
10000112 l     O .bss	00000001 status
1a003724 l     O .text	00000010 MEF_Functions
00000000 l    df *ABS*	00000000 gamepad_api.c
1a0007e0 l     F .text	0000000c convertRawToSigned
10000113 l     O .bss	00000001 X_VALUE
10000114 l     O .bss	00000001 Y_VALUE
10000115 l     O .bss	00000001 aux_bitsPulsadores
00000000 l    df *ABS*	00000000 joystick.c
10000116 l     O .bss	00000001 down
10000117 l     O .bss	00000001 left
10000118 l     O .bss	00000001 right
10000119 l     O .bss	00000001 up
00000000 l    df *ABS*	00000000 system.c
1000011c l     O .bss	00000004 heap_end.5864
00000000 l    df *ABS*	00000000 board_sysinit.c
1a003748 l     O .text	00000004 InitClkStates
1a00374c l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 board.c
1a000bbc l     F .text	00000044 Board_LED_Init
1a000c00 l     F .text	00000040 Board_TEC_Init
1a000c40 l     F .text	00000040 Board_GPIO_Init
1a000c80 l     F .text	00000030 Board_ADC_Init
1a000cb0 l     F .text	00000038 Board_SPI_Init
1a000ce8 l     F .text	00000024 Board_I2C_Init
1a0037c4 l     O .text	00000008 GpioButtons
1a0037cc l     O .text	0000000c GpioLeds
1a0037d8 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a000dac l     F .text	00000014 Chip_SSP_GetClockIndex
1a000dc0 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000048 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a000ee0 l     F .text	00000014 Chip_ADC_GetClockIndex
1a000ef4 l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a0037f0 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
1a001204 l     F .text	00000034 Chip_USB_PllSetup
1a003838 l     O .text	00000014 usbPLLSetup
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a001280 l     F .text	000000a0 pll_calc_divs
1a001320 l     F .text	0000010c pll_get_frac
1a00142c l     F .text	0000004c Chip_Clock_FindBaseClock
1a0016a0 l     F .text	00000022 Chip_Clock_GetDivRate
10000120 l     O .bss	00000008 audio_usb_pll_freq
1a003858 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a0018bc l     F .text	0000002c Chip_UART_GetIndex
1a0038c4 l     O .text	00000008 UART_BClock
1a0038cc l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000080 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a001ad4 l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_adc.c
00000000 l    df *ABS*	00000000 sapi_tick.c
10000128 l     O .bss	00000004 callBackFuncParams
10000130 l     O .bss	00000008 tickCounter
10000138 l     O .bss	00000004 tickHookFunction
00000000 l    df *ABS*	00000000 cdc_uart.c
1a001f64 l     F .text	00000084 CDC_ep0_override_hdlr
1a001fe8 l     F .text	000000c0 UCOM_bulk_hdlr
1a0020a8 l     F .text	00000090 UCOM_SetLineCode
1000013c l     O .bss	00000004 g_defaultCdcHdlr
10000140 l     O .bss	00000018 g_uCOM
00000000 l    df *ABS*	00000000 usbd_keyboard.c
1a002214 l     F .text	00000014 Keyboard_EpIN_Hdlr
1a002228 l     F .text	00000020 Keyboard_UpdateReport
1a002248 l     F .text	00000048 Keyboard_SetReport
1a002290 l     F .text	00000040 Keyboard_GetReport
10000158 l     O .bss	00000010 g_keyBoard
00000000 l    df *ABS*	00000000 sapi_usb_device.c
1a0023a4 l     F .text	00000010 usbDeviceLpcInterruptPrioritySet
1a0023b4 l     F .text	00000028 usbDeviceLpcInterruptInit
1a0023dc l     F .text	00000098 usbDeviceLpcInit
1000016c l     O .bss	00000004 g_Ep0BaseHdlr
10000170 l     O .bss	00000004 g_ep0RxBusy
10000174 l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_delay.c
00000000 l    df *ABS*	00000000 sapi_lcd.c
1a0026fc l     F .text	0000000a lcdPinSet
1a002706 l     F .text	0000002e lcdSendNibble
1a002734 l     F .text	0000001c lcdEnablePulse
10000178 l     O .bss	0000000a lcd
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1a002e40 l     F .text	00000048 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 descriptor_gamepad.c
00000000 l    df *ABS*	00000000 descriptor_keyboard.c
00000000 l    df *ABS*	00000000 impure.c
10000094 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 
1a003ab8 l       .init_array	00000000 __init_array_end
1a003ab4 l       .bss_RAM5	00000000 __preinit_array_end
1a003ab4 l       .init_array	00000000 __init_array_start
1a003ab4 l       .bss_RAM5	00000000 __preinit_array_start
1a000470 g     F .text	0000000c usbDeviceGamepadHat
1a000520 g     F .text	00000070 Display_WriteDirs
1a0014c4 g     F .text	0000001c Chip_Clock_GetDividerSource
1a000a58 g     F .text	00000012 _isatty_r
10000108 g     O .bss	00000004 gamepadCheckFunction
1a0031d8 g     F .text	000000dc _puts_r
1a0001ba  w    F .text	00000002 TIMER2_IRQHandler
1a000a6a g     F .text	0000000a _lseek_r
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a000f8c g     F .text	00000016 Chip_ADC_DeInit
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a0007ec g     F .text	00000020 USB_Init
1a000da2 g     F .text	00000008 __stdio_init
10000194 g     O .bss	00000001 __lock___atexit_recursive_mutex
1a001238 g     F .text	00000034 Chip_USB0_Init
1a00331e g     F .text	00000024 __sseek
1a002ef0 g     F .text	00000070 __sinit
1a00334c g     F .text	000000a4 __swbuf_r
1a00017a  w    F .text	00000002 HardFault_Handler
1a002e94 g     F .text	0000002c __sfmoreglue
1a000000 g       *ABS*	00000000 __vectors_start__
1a001054 g     F .text	0000000c Chip_ADC_SetResolution
1a0035a0 g     F .text	0000000c __malloc_unlock
1a000450 g     F .text	00000020 usbDeviceGamepadMove
1a001f38 g     F .text	0000002c SysTick_Handler
1a001964 g     F .text	00000040 Chip_UART_SetBaud
10000195 g     O .bss	00000001 __lock___arc4random_mutex
1a0009b4  w    F .text	00000002 initialise_monitor_handles
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a000d44 g     F .text	0000001c Board_UARTGetChar
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a000186  w    F .text	00000002 PendSV_Handler
1a0003fc g     F .text	00000048 usbDeviceGamepadTasks
1a000178  w    F .text	00000002 NMI_Handler
1a003ac0 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a002138 g     F .text	000000dc cdcUartLpcInit
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
1a001898 g     F .text	00000014 Chip_Clock_EnablePLL
1a000a4e g     F .text	0000000a _fstat_r
53ff6ed6 g       *ABS*	00000000 __valid_user_code_checksum
1a003ac0 g       .ARM.exidx	00000000 _etext
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a000590 g     F .text	00000034 Buttons_Init
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a00361c g     O .text	00000082 USB_StringDescriptor
1a0001ba  w    F .text	00000002 TIMER3_IRQHandler
1a00080c g     F .text	00000030 USB_Update
1a00175c g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001ba  w    F .text	00000002 UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a002e88 g     F .text	0000000c _cleanup_r
1a001858 g     F .text	00000040 Chip_Clock_SetupPLL
1a0029b8 g     F .text	00000000 .hidden __aeabi_uldivmod
100001a0 g       .noinit	00000000 _noinit
1a0032b4 g     F .text	00000010 puts
1a000924 g     F .text	00000030 Joystick_LeerX
1000018c g     O .bss	00000004 SystemCoreClock
1a0018e8 g     F .text	00000054 Chip_UART_Init
1a000510 g     F .text	00000010 Display_WriteMessage
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a000f34 g     F .text	00000018 readAdcVal
1a0024ac g     F .text	000000ec usbDeviceInit
1a000180  w    F .text	00000002 UsageFault_Handler
1a00180c g     F .text	0000004c Chip_Clock_GetRate
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
1a0035fc g     O .text	00000012 USB_DeviceDescriptor
1a000b44 g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a000910 g     F .text	00000012 Joystick_Init
1a0029e8 g     F .text	000002d0 .hidden __udivmoddi4
1a000aec g     F .text	00000020 _sbrk_r
1a0037c0 g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a0005fc g     F .text	0000001c LED_Init
1a000300 g       .text	00000000 __CRP_WORD_END__
1a000a74 g     F .text	0000004e _read_r
1a00296c g     F .text	00000038 lcdSendChar
1a0001ba  w    F .text	00000002 GPIO1_IRQHandler
1a000844 g     F .text	00000020 USB_MarcarBoton
1a00281a g     F .text	00000014 lcdCursorSet
1a002490 g     F .text	0000001a find_IntfDesc
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a003ab8 g       .ARM.exidx	00000000 __exidx_start
10000196 g     O .bss	00000001 __lock___env_recursive_mutex
1a0002fc g     O .text	00000004 CRP_WORD
1a000f26 g     F .text	0000000e setStartMode
10000197 g     O .bss	00000001 __lock___sinit_recursive_mutex
1a003ab0 g     O .text	00000004 _global_impure_ptr
1a000984 g     F .text	00000030 Joystick_GetDirs
1a003028 g     F .text	00000048 __libc_init_array
1a001d88 g     F .text	000000b8 adcInit
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a000d60 g     F .text	00000030 Board_Init
1a000a42  w    F .text	00000002 _init
1a000114 g       .text	00000000 __data_section_table
1a000678 g     F .text	0000000e LED_EncenderVerde
1a0001ba  w    F .text	00000002 RTC_IRQHandler
100001a0 g       .bss	00000000 _ebss
1a001060 g     F .text	0000002a Chip_ADC_EnableChannel
1a0001ba  w    F .text	00000002 TIMER0_IRQHandler
1a0009b8 g     F .text	00000088 Reset_Handler
1a001ebc g     F .text	0000007c tickInit
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a000ea4 g     F .text	00000038 Chip_I2C_SetClockRate
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a001478 g     F .text	0000004c Chip_Clock_EnableCrystal
10000198 g     O .bss	00000001 __lock___malloc_recursive_mutex
1a000fa2 g     F .text	00000008 Chip_ADC_ReadValue
10008000 g       *ABS*	00000000 __top_RamLoc32
1a00018a g     F .text	0000001e data_init
1a00236c g     F .text	00000038 EP0_patch
1a0007c8 g     F .text	00000018 MEF_Update
1a001002 g     F .text	00000020 Chip_ADC_SetStartMode
1a0001ba  w    F .text	00000002 TIMER1_IRQHandler
1a003a50 g     O .text	00000020 __sf_fake_stderr
1a000e80 g     F .text	00000024 Chip_I2C_Init
1a0029a4 g     F .text	00000014 lcdSendString
1a003074 g     F .text	00000002 __retarget_lock_release_recursive
1a0001ba  w    F .text	00000002 UART2_IRQHandler
1a001634 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a0038d4 g     O .text	000000e6 gpioPinsInit
1a000dd8 g     F .text	00000012 Chip_SSP_SetClockRate
1a00369e g     O .text	00000002 Keyboard_ReportDescSize
1a0001ba  w    F .text	00000002 GPIO2_IRQHandler
1a002ec0 g     F .text	0000000c __sfp_lock_acquire
1a003088 g     F .text	0000009c _free_r
1a001e40 g     F .text	00000058 adcRead
1a001736 g     F .text	00000026 Chip_Clock_GetBaseClock
1a00286c g     F .text	00000010 lcdClearAndHome
1a0018ac g     F .text	0000000e Chip_Clock_GetPLLStatus
1a00287c g     F .text	000000c8 lcdInit
100000f8 g       .bss	00000000 _bss
1a000faa g     F .text	00000036 Chip_ADC_ReadStatus
1a001022 g     F .text	00000032 Chip_ADC_SetSampleRate
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a000dea g     F .text	0000003e Chip_SSP_SetBitRate
1a000edc g     F .text	00000002 Chip_GPIO_Init
1a0037ec g     O .text	00000004 OscRateIn
1a00260c g     F .text	0000005a delayInaccurateMs
100001a0 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a000954 g     F .text	00000030 Joystick_LeerY
1a002788 g     F .text	00000030 lcdData
1a000654 g     F .text	00000016 LED_ApagarTodos
1a000178 g       .text	00000000 __bss_section_table_end
1a000a44 g     F .text	0000000a _close_r
1a001b08 g     F .text	000001ac gpioInit
1a0007bc g     F .text	0000000c MEF_Start
1a0033f0 g     F .text	000000dc __swsetup_r
1a002cb8  w    F .text	00000002 .hidden __aeabi_ldiv0
1a002f60 g     F .text	0000008c __sfp
1a002750 g     F .text	00000038 lcdCommand
1a0022d0 g     F .text	0000009c usbDeviceKeyboardInit
1a002ee4 g     F .text	0000000c __sinit_lock_release
1a002944 g     F .text	00000028 lcdSendEnter
1a0032c4 g     F .text	00000022 __sread
1a002474 g     F .text	0000001c USB0_IRQHandler
1a0017d8 g     F .text	00000034 Chip_Clock_Disable
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a003594 g     F .text	0000000c __malloc_lock
1a000d30 g     F .text	00000014 Board_UARTPutChar
1a00193c g     F .text	00000028 Chip_UART_Send
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a002dc8 g     F .text	00000078 _fflush_r
1a003a70 g     O .text	00000020 __sf_fake_stdin
1a0014e0 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a003072 g     F .text	00000002 __retarget_lock_acquire_recursive
1a00083c g     F .text	00000008 USB_Attempt
1a003076 g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a0006b6 g     F .text	00000018 main
1a000378 g     F .text	00000084 usbDeviceGamepadInit
1a003070 g     F .text	00000002 __retarget_lock_init_recursive
1a0001ba  w    F .text	00000002 WDT_IRQHandler
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a000182  w    F .text	00000002 SVC_Handler
1a003342 g     F .text	00000008 __sclose
1a002830 g     F .text	0000003c lcdCreateChar
1a003124 g     F .text	000000b4 _malloc_r
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a001768 g     F .text	0000003c Chip_Clock_EnableOpts
1a000d9a g     F .text	00000008 __stdio_getchar
1a0036a0 g     O .text	0000003f Keyboard_ReportDescriptor
1a0014fc g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a0015b4 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a003610 g     O .text	0000000a USB_DeviceQualifier
1a001a80 g     F .text	00000038 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a0026c4 g     F .text	00000038 delay
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a000618 g     F .text	0000003c LED_Alternar
1a001cb4 g     F .text	0000006a gpioWrite
1a000a40  w    F .text	00000002 _fini
1a000f4c g     F .text	00000040 Chip_ADC_Init
10000190 g     O .bss	00000004 g_pUsbApi
1a000b0c g     F .text	00000038 Board_SetupMuxing
1a0027b8 g     F .text	00000050 lcdGoToXY
1a0019a4 g     F .text	000000dc Chip_UART_SetBaudFDR
1a001e98 g     F .text	0000000c tickRead
1a000ac2 g     F .text	00000028 _write_r
10000088 g     O .data	00000008 tickRateMS
1a00108a g     F .text	00000022 Chip_ADC_SetBurstCmd
1a000864 g     F .text	00000014 USB_PresionarBotones
1a0001ba  w    F .text	00000002 ETH_IRQHandler
10000090 g     O .data	00000004 _impure_ptr
1a00047c g     F .text	00000014 usbDeviceGamepadCheckCallbackSet
1a002cbc g     F .text	0000010c __sflush_r
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
10000024 g     O .data	00000023 USB_HsConfigDescriptor
100001a0 g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a000e28 g     F .text	00000038 Chip_SSP_Init
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a0034cc g     F .text	00000048 __swhatbuf_r
1a0001ba  w    F .text	00000002 DAC_IRQHandler
1a000d0c g     F .text	00000024 Board_Debug_Init
1a000d90 g     F .text	0000000a __stdio_putchar
1a000fe0 g     F .text	00000022 Chip_ADC_Int_SetChannelCmd
100000f4 g       .data	00000000 _edata
1a000e60 g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
10000199 g     O .bss	00000001 __lock___at_quick_exit_mutex
1a0010ac g     F .text	00000158 Chip_SetupCoreClock
10000000 g     O .data	00000023 USB_FsConfigDescriptor
1a000686 g     F .text	0000000e LED_EncenderAzul
1a0032e6 g     F .text	00000038 __swrite
1a0001ba  w    F .text	00000002 GPIO0_IRQHandler
1a000000 g     O .text	00000040 g_pfnVectors
1a002fec g     F .text	0000003c _fwalk_reent
1a00126c g     F .text	00000014 SystemCoreClockUpdate
1a000878 g     F .text	00000098 checkForPressedButtons
1a000444 g     F .text	0000000c usbDeviceGamepadPress
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a002ecc g     F .text	0000000c __sfp_lock_release
1a002808 g     F .text	00000012 lcdClear
1a003a90 g     O .text	00000020 __sf_fake_stdout
1a002666 g     F .text	0000005c delayInaccurateUs
1a002cb8  w    F .text	00000002 .hidden __aeabi_idiv0
1a0035ac g     O .text	00000002 Gamepad_ReportDescSize
1a00017e  w    F .text	00000002 BusFault_Handler
1000019a g     O .bss	00000001 __lock___dd_hash_mutex
1a003514 g     F .text	00000080 __smakebuf_r
1000019b g     O .bss	00000001 __lock___tz_mutex
1a0017a4 g     F .text	00000034 Chip_Clock_Enable
1a0001ba  w    F .text	00000002 UART3_IRQHandler
10000188 g     O .bss	00000004 __malloc_sbrk_start
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a001d1e g     F .text	00000068 gpioRead
1a002598 g     F .text	00000074 boardInit
10000184 g     O .bss	00000004 __malloc_free_list
10000168 g     O .bss	00000004 keyboardCheckKeysFunction
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a001ea4 g     F .text	00000018 tickPowerSet
1a0004ec g     F .text	00000024 Display_Init
1a0035b0 g     O .text	0000004c Gamepad_ReportDescriptor
1a00171c g     F .text	0000001a Chip_Clock_EnableBaseClock
1a0016c4 g     F .text	00000058 Chip_Clock_SetBaseClock
1a001ab8 g     F .text	0000001c cyclesCounterInit
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
1000019c g     O .bss	00000001 __lock___sfp_recursive_mutex
1a00066a g     F .text	0000000e LED_EncenderRojo
1a002ed8 g     F .text	0000000c __sinit_lock_acquire
1a000bb0 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 b9 09 00 1a 79 01 00 1a 7b 01 00 1a     ........y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a d6 6e ff 53     }............n.S
	...
1a00002c:	83 01 00 1a 85 01 00 1a 00 00 00 00 87 01 00 1a     ................
1a00003c:	39 1f 00 1a                                         9...

1a000040 <g_pfnVendorVectors>:
1a000040:	bb 01 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     ................
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	75 24 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     u$..............
1a000070:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a003ac0 	.word	0x1a003ac0
1a000118:	10000000 	.word	0x10000000
1a00011c:	000000f4 	.word	0x000000f4
1a000120:	1a003ac0 	.word	0x1a003ac0
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a003ac0 	.word	0x1a003ac0
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a003ac0 	.word	0x1a003ac0
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a003ac0 	.word	0x1a003ac0
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	100000f8 	.word	0x100000f8
1a000154:	000000a8 	.word	0x000000a8
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>

1a000182 <SVC_Handler>:
1a000182:	e7fe      	b.n	1a000182 <SVC_Handler>

1a000184 <DebugMon_Handler>:
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>

1a000186 <PendSV_Handler>:
1a000186:	e7fe      	b.n	1a000186 <PendSV_Handler>
1a000188:	e7fe      	b.n	1a000188 <PendSV_Handler+0x2>

1a00018a <data_init>:
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
1a000190:	b410      	push	{r4}
1a000192:	f850 4b04 	ldr.w	r4, [r0], #4
1a000196:	f841 4b04 	str.w	r4, [r1], #4
1a00019a:	3304      	adds	r3, #4
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	428b      	cmp	r3, r1
1a0001ac:	d204      	bcs.n	1a0001b8 <bss_init+0x10>
1a0001ae:	2200      	movs	r2, #0
1a0001b0:	f840 2b04 	str.w	r2, [r0], #4
1a0001b4:	3304      	adds	r3, #4
1a0001b6:	e7f8      	b.n	1a0001aa <bss_init+0x2>
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <Gamepad_SetReport>:
static ErrorCode_t Gamepad_SetReport(USBD_HANDLE_T hHid, USB_SETUP_PACKET *pSetup, uint8_t * *pBuffer, uint16_t length){
   // TODO
   // Board_LED_Toggle(3);
   
   return LPC_OK;
}
1a000300:	2000      	movs	r0, #0
1a000302:	4770      	bx	lr

1a000304 <Gamepad_EpIN_Hdlr>:

// Manejador de interrupciones
static ErrorCode_t Gamepad_EpIN_Hdlr(USBD_HANDLE_T hUsb, void *data, uint32_t event){
 
   switch (event) {
1a000304:	2a03      	cmp	r2, #3
1a000306:	d001      	beq.n	1a00030c <Gamepad_EpIN_Hdlr+0x8>
         g_gamePad.tx_busy = 0;
         break;
   }
   
   return LPC_OK;
}
1a000308:	2000      	movs	r0, #0
1a00030a:	4770      	bx	lr
         g_gamePad.tx_busy = 0;
1a00030c:	4b01      	ldr	r3, [pc, #4]	; (1a000314 <Gamepad_EpIN_Hdlr+0x10>)
1a00030e:	2200      	movs	r2, #0
1a000310:	731a      	strb	r2, [r3, #12]
         break;
1a000312:	e7f9      	b.n	1a000308 <Gamepad_EpIN_Hdlr+0x4>
1a000314:	100000f8 	.word	0x100000f8

1a000318 <Gamepad_UpdateReport>:
static void Gamepad_UpdateReport(){
1a000318:	b508      	push	{r3, lr}
   HID_GAMEPAD_CLEAR_REPORT(&g_gamePad.report[0]);
1a00031a:	4a05      	ldr	r2, [pc, #20]	; (1a000330 <Gamepad_UpdateReport+0x18>)
1a00031c:	2300      	movs	r3, #0
1a00031e:	6053      	str	r3, [r2, #4]
1a000320:	6093      	str	r3, [r2, #8]
   if (gamepadCheckFunction != NULL) {
1a000322:	4b04      	ldr	r3, [pc, #16]	; (1a000334 <Gamepad_UpdateReport+0x1c>)
1a000324:	681b      	ldr	r3, [r3, #0]
1a000326:	b10b      	cbz	r3, 1a00032c <Gamepad_UpdateReport+0x14>
      (* gamepadCheckFunction )( NULL );
1a000328:	2000      	movs	r0, #0
1a00032a:	4798      	blx	r3
}
1a00032c:	bd08      	pop	{r3, pc}
1a00032e:	bf00      	nop
1a000330:	100000f8 	.word	0x100000f8
1a000334:	10000108 	.word	0x10000108

1a000338 <Gamepad_GetReport>:
static ErrorCode_t Gamepad_GetReport(USBD_HANDLE_T hHid, USB_SETUP_PACKET *pSetup, uint8_t * *pBuffer, uint16_t *plength){
1a000338:	b538      	push	{r3, r4, r5, lr}
   switch (pSetup->wValue.WB.H) {
1a00033a:	78c9      	ldrb	r1, [r1, #3]
1a00033c:	2901      	cmp	r1, #1
1a00033e:	d005      	beq.n	1a00034c <Gamepad_GetReport+0x14>
1a000340:	b24b      	sxtb	r3, r1
1a000342:	b183      	cbz	r3, 1a000366 <Gamepad_GetReport+0x2e>
1a000344:	2903      	cmp	r1, #3
1a000346:	d810      	bhi.n	1a00036a <Gamepad_GetReport+0x32>
         return ERR_USBD_STALL;
1a000348:	4809      	ldr	r0, [pc, #36]	; (1a000370 <Gamepad_GetReport+0x38>)
}
1a00034a:	bd38      	pop	{r3, r4, r5, pc}
1a00034c:	461c      	mov	r4, r3
1a00034e:	4615      	mov	r5, r2
         Gamepad_UpdateReport();
1a000350:	f7ff ffe2 	bl	1a000318 <Gamepad_UpdateReport>
         memcpy(*pBuffer, &g_gamePad.report[0], GAMEPAD_REPORT_SIZE);
1a000354:	682a      	ldr	r2, [r5, #0]
1a000356:	4b07      	ldr	r3, [pc, #28]	; (1a000374 <Gamepad_GetReport+0x3c>)
1a000358:	cb03      	ldmia	r3!, {r0, r1}
1a00035a:	6010      	str	r0, [r2, #0]
1a00035c:	6051      	str	r1, [r2, #4]
         *plength = GAMEPAD_REPORT_SIZE;
1a00035e:	2308      	movs	r3, #8
1a000360:	8023      	strh	r3, [r4, #0]
	return LPC_OK;
1a000362:	2000      	movs	r0, #0
      break;
1a000364:	e7f1      	b.n	1a00034a <Gamepad_GetReport+0x12>
	return LPC_OK;
1a000366:	2000      	movs	r0, #0
1a000368:	e7ef      	b.n	1a00034a <Gamepad_GetReport+0x12>
1a00036a:	2000      	movs	r0, #0
1a00036c:	e7ed      	b.n	1a00034a <Gamepad_GetReport+0x12>
1a00036e:	bf00      	nop
1a000370:	00040003 	.word	0x00040003
1a000374:	100000fc 	.word	0x100000fc

1a000378 <usbDeviceGamepadInit>:

/*****************************************************************************
 * Public functions
 ****************************************************************************/

ErrorCode_t usbDeviceGamepadInit(USBD_HANDLE_T hUsb, USB_INTERFACE_DESCRIPTOR *pIntfDesc, uint32_t *mem_base, uint32_t *mem_size){
1a000378:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00037a:	b091      	sub	sp, #68	; 0x44
1a00037c:	4605      	mov	r5, r0
1a00037e:	460c      	mov	r4, r1
1a000380:	4617      	mov	r7, r2
1a000382:	461e      	mov	r6, r3
   USBD_HID_INIT_PARAM_T hid_param;
   USB_HID_REPORT_T reports_data[1];
   ErrorCode_t ret = LPC_OK;
   
   // Configurar par�metros HID
   memset((void *) &hid_param, 0, sizeof(USBD_HID_INIT_PARAM_T));
1a000384:	2238      	movs	r2, #56	; 0x38
1a000386:	2100      	movs	r1, #0
1a000388:	a802      	add	r0, sp, #8
1a00038a:	f002 fe74 	bl	1a003076 <memset>
   hid_param.max_reports = 1;
1a00038e:	2301      	movs	r3, #1
1a000390:	f88d 3010 	strb.w	r3, [sp, #16]
   hid_param.mem_base = *mem_base;
1a000394:	683b      	ldr	r3, [r7, #0]
1a000396:	9302      	str	r3, [sp, #8]
   hid_param.mem_size = *mem_size;
1a000398:	6833      	ldr	r3, [r6, #0]
1a00039a:	9303      	str	r3, [sp, #12]
   hid_param.intf_desc = (uint8_t *) pIntfDesc;
1a00039c:	9405      	str	r4, [sp, #20]
   
   // Funciones definidas para Gamepad
   // Se debe respetar el prototipo seg�n usbd_hiduser.h (de sAPI)
   hid_param.HID_GetReport = Gamepad_GetReport;
1a00039e:	4b10      	ldr	r3, [pc, #64]	; (1a0003e0 <usbDeviceGamepadInit+0x68>)
1a0003a0:	9307      	str	r3, [sp, #28]
   hid_param.HID_SetReport = Gamepad_SetReport;
1a0003a2:	4b10      	ldr	r3, [pc, #64]	; (1a0003e4 <usbDeviceGamepadInit+0x6c>)
1a0003a4:	9308      	str	r3, [sp, #32]
   hid_param.HID_EpIn_Hdlr = Gamepad_EpIN_Hdlr;
1a0003a6:	4b10      	ldr	r3, [pc, #64]	; (1a0003e8 <usbDeviceGamepadInit+0x70>)
1a0003a8:	930c      	str	r3, [sp, #48]	; 0x30
   
   // Inicializar reports_data
   reports_data[0].len = Gamepad_ReportDescSize;
1a0003aa:	4b10      	ldr	r3, [pc, #64]	; (1a0003ec <usbDeviceGamepadInit+0x74>)
1a0003ac:	881b      	ldrh	r3, [r3, #0]
1a0003ae:	f8ad 3000 	strh.w	r3, [sp]
   reports_data[0].idle_time = 0;
1a0003b2:	2400      	movs	r4, #0
1a0003b4:	f88d 4002 	strb.w	r4, [sp, #2]
   reports_data[0].desc = (uint8_t *) &Gamepad_ReportDescriptor[0];
1a0003b8:	4b0d      	ldr	r3, [pc, #52]	; (1a0003f0 <usbDeviceGamepadInit+0x78>)
1a0003ba:	9301      	str	r3, [sp, #4]
   hid_param.report_data = reports_data;
1a0003bc:	f8cd d018 	str.w	sp, [sp, #24]
   
   // Fin de inicializaci�n con USBD API
   ret = USBD_API->hid->init(hUsb, &hid_param);
1a0003c0:	4b0c      	ldr	r3, [pc, #48]	; (1a0003f4 <usbDeviceGamepadInit+0x7c>)
1a0003c2:	681b      	ldr	r3, [r3, #0]
1a0003c4:	691b      	ldr	r3, [r3, #16]
1a0003c6:	685b      	ldr	r3, [r3, #4]
1a0003c8:	a902      	add	r1, sp, #8
1a0003ca:	4628      	mov	r0, r5
1a0003cc:	4798      	blx	r3
   
   // Actualizar par�metros por referencia de memoria
   *mem_base = hid_param.mem_base;
1a0003ce:	9b02      	ldr	r3, [sp, #8]
1a0003d0:	603b      	str	r3, [r7, #0]
   *mem_size = hid_param.mem_size;
1a0003d2:	9b03      	ldr	r3, [sp, #12]
1a0003d4:	6033      	str	r3, [r6, #0]
   
   g_gamePad.hUsb = hUsb;
1a0003d6:	4b08      	ldr	r3, [pc, #32]	; (1a0003f8 <usbDeviceGamepadInit+0x80>)
1a0003d8:	601d      	str	r5, [r3, #0]
   g_gamePad.tx_busy = 0;
1a0003da:	731c      	strb	r4, [r3, #12]
   
   // Se devuelve estado resultado de la inicialización
   return ret;
}
1a0003dc:	b011      	add	sp, #68	; 0x44
1a0003de:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a0003e0:	1a000339 	.word	0x1a000339
1a0003e4:	1a000301 	.word	0x1a000301
1a0003e8:	1a000305 	.word	0x1a000305
1a0003ec:	1a0035ac 	.word	0x1a0035ac
1a0003f0:	1a0035b0 	.word	0x1a0035b0
1a0003f4:	10000190 	.word	0x10000190
1a0003f8:	100000f8 	.word	0x100000f8

1a0003fc <usbDeviceGamepadTasks>:


bool_t usbDeviceGamepadTasks(void){
1a0003fc:	b538      	push	{r3, r4, r5, lr}
   
   // Primero nos aseguramos que el dispositivo esté configurado
   if (USB_IsConfigured(g_gamePad.hUsb)){
1a0003fe:	4b0f      	ldr	r3, [pc, #60]	; (1a00043c <usbDeviceGamepadTasks+0x40>)
1a000400:	681b      	ldr	r3, [r3, #0]
}

static INLINE bool USB_IsConfigured(USBD_HANDLE_T hUsb)
{
    USB_CORE_CTRL_T* pCtrl = (USB_CORE_CTRL_T*) hUsb;
    return (bool) (pCtrl->config_value != 0);   
1a000402:	f893 30fd 	ldrb.w	r3, [r3, #253]	; 0xfd
1a000406:	b1a3      	cbz	r3, 1a000432 <usbDeviceGamepadTasks+0x36>
      
      // Enviar datos de reporte si esta libre
      if (g_gamePad.tx_busy == 0){
1a000408:	4b0c      	ldr	r3, [pc, #48]	; (1a00043c <usbDeviceGamepadTasks+0x40>)
1a00040a:	7b1b      	ldrb	r3, [r3, #12]
1a00040c:	b10b      	cbz	r3, 1a000412 <usbDeviceGamepadTasks+0x16>
         g_gamePad.tx_busy = 1;                 // marcar como ocupado
         Gamepad_UpdateReport();                // cargar reporte
         USBD_API->hw->WriteEP(g_gamePad.hUsb, HID_EP_IN, &g_gamePad.report[0], GAMEPAD_REPORT_SIZE);
      }
      
      return TRUE;
1a00040e:	2001      	movs	r0, #1
   } else {
      // Si no está configurado, marcar como no ocupado
      g_gamePad.tx_busy = 0;
      return FALSE;
   }
}
1a000410:	bd38      	pop	{r3, r4, r5, pc}
         g_gamePad.tx_busy = 1;                 // marcar como ocupado
1a000412:	4c0a      	ldr	r4, [pc, #40]	; (1a00043c <usbDeviceGamepadTasks+0x40>)
1a000414:	2301      	movs	r3, #1
1a000416:	7323      	strb	r3, [r4, #12]
         Gamepad_UpdateReport();                // cargar reporte
1a000418:	f7ff ff7e 	bl	1a000318 <Gamepad_UpdateReport>
         USBD_API->hw->WriteEP(g_gamePad.hUsb, HID_EP_IN, &g_gamePad.report[0], GAMEPAD_REPORT_SIZE);
1a00041c:	4b08      	ldr	r3, [pc, #32]	; (1a000440 <usbDeviceGamepadTasks+0x44>)
1a00041e:	681b      	ldr	r3, [r3, #0]
1a000420:	681b      	ldr	r3, [r3, #0]
1a000422:	6d1d      	ldr	r5, [r3, #80]	; 0x50
1a000424:	4622      	mov	r2, r4
1a000426:	f852 0b04 	ldr.w	r0, [r2], #4
1a00042a:	2308      	movs	r3, #8
1a00042c:	2181      	movs	r1, #129	; 0x81
1a00042e:	47a8      	blx	r5
1a000430:	e7ed      	b.n	1a00040e <usbDeviceGamepadTasks+0x12>
      g_gamePad.tx_busy = 0;
1a000432:	2000      	movs	r0, #0
1a000434:	4b01      	ldr	r3, [pc, #4]	; (1a00043c <usbDeviceGamepadTasks+0x40>)
1a000436:	7318      	strb	r0, [r3, #12]
      return FALSE;
1a000438:	e7ea      	b.n	1a000410 <usbDeviceGamepadTasks+0x14>
1a00043a:	bf00      	nop
1a00043c:	100000f8 	.word	0x100000f8
1a000440:	10000190 	.word	0x10000190

1a000444 <usbDeviceGamepadPress>:

void usbDeviceGamepadPress(uint8_t key)
{
   HID_GAMEPAD_REPORT_SET_VALUE(g_gamePad.report, key);
1a000444:	4b01      	ldr	r3, [pc, #4]	; (1a00044c <usbDeviceGamepadPress+0x8>)
1a000446:	72d8      	strb	r0, [r3, #11]
   // Board_LED_Toggle(7);
}
1a000448:	4770      	bx	lr
1a00044a:	bf00      	nop
1a00044c:	100000f8 	.word	0x100000f8

1a000450 <usbDeviceGamepadMove>:

void usbDeviceGamepadMove(int8_t value, uint8_t axis)
{
   if (value > -28 && value < 28) return;
1a000450:	b2c0      	uxtb	r0, r0
1a000452:	f100 031b 	add.w	r3, r0, #27
1a000456:	b2db      	uxtb	r3, r3
1a000458:	2b36      	cmp	r3, #54	; 0x36
1a00045a:	d905      	bls.n	1a000468 <usbDeviceGamepadMove+0x18>
   
   if (axis == 0) {
1a00045c:	b911      	cbnz	r1, 1a000464 <usbDeviceGamepadMove+0x14>
      HID_GAMEPAD_REPORT_SET_XCOR(g_gamePad.report, value);
1a00045e:	4b03      	ldr	r3, [pc, #12]	; (1a00046c <usbDeviceGamepadMove+0x1c>)
1a000460:	7118      	strb	r0, [r3, #4]
1a000462:	4770      	bx	lr
   } else {
      HID_GAMEPAD_REPORT_SET_YCOR(g_gamePad.report, value);
1a000464:	4b01      	ldr	r3, [pc, #4]	; (1a00046c <usbDeviceGamepadMove+0x1c>)
1a000466:	7158      	strb	r0, [r3, #5]
   }
}
1a000468:	4770      	bx	lr
1a00046a:	bf00      	nop
1a00046c:	100000f8 	.word	0x100000f8

1a000470 <usbDeviceGamepadHat>:

void usbDeviceGamepadHat(uint8_t pressed){
   HID_GAMEPAD_REPORT_SET_HAT(g_gamePad.report, pressed);
1a000470:	4b01      	ldr	r3, [pc, #4]	; (1a000478 <usbDeviceGamepadHat+0x8>)
1a000472:	7218      	strb	r0, [r3, #8]
}
1a000474:	4770      	bx	lr
1a000476:	bf00      	nop
1a000478:	100000f8 	.word	0x100000f8

1a00047c <usbDeviceGamepadCheckCallbackSet>:
// Gamepad function to check in my device for pressed buttons
bool_t usbDeviceGamepadCheckCallbackSet(callBackFuncPtr_t checkCallback){
   bool_t retVal = TRUE;
   
   // Si la funcion de callback recibida no es nula, asignarla para los siguientes updates
   if( checkCallback != NULL ) gamepadCheckFunction = checkCallback;
1a00047c:	b118      	cbz	r0, 1a000486 <usbDeviceGamepadCheckCallbackSet+0xa>
1a00047e:	4a03      	ldr	r2, [pc, #12]	; (1a00048c <usbDeviceGamepadCheckCallbackSet+0x10>)
1a000480:	6010      	str	r0, [r2, #0]
   bool_t retVal = TRUE;
1a000482:	2001      	movs	r0, #1
1a000484:	4770      	bx	lr
   else retVal = FALSE;
1a000486:	2000      	movs	r0, #0
   
   return retVal;
1a000488:	4770      	bx	lr
1a00048a:	bf00      	nop
1a00048c:	10000108 	.word	0x10000108

1a000490 <Display_AddCustomChars>:
   else lcdSendString(" ");
}

// --------------------- Funciones privadas ------------------------ //

static void Display_AddCustomChars(){
1a000490:	b570      	push	{r4, r5, r6, lr}
1a000492:	b088      	sub	sp, #32
   // Creado mediante Custom Character Generator - https://omerk.github.io/lcdchargen/

   const char upArrow[8] = {
1a000494:	4b14      	ldr	r3, [pc, #80]	; (1a0004e8 <Display_AddCustomChars+0x58>)
1a000496:	aa06      	add	r2, sp, #24
1a000498:	e893 0003 	ldmia.w	r3, {r0, r1}
1a00049c:	e882 0003 	stmia.w	r2, {r0, r1}
	   0b00100,
	   0b00100,
	   0b00000
   };

   const char downArrow[8] = {
1a0004a0:	ae04      	add	r6, sp, #16
1a0004a2:	f103 0108 	add.w	r1, r3, #8
1a0004a6:	c903      	ldmia	r1, {r0, r1}
1a0004a8:	e886 0003 	stmia.w	r6, {r0, r1}
	   0b01110,
	   0b00100,
	   0b00000
   };

   const char leftArrow[8] = {
1a0004ac:	ad02      	add	r5, sp, #8
1a0004ae:	f103 0110 	add.w	r1, r3, #16
1a0004b2:	c903      	ldmia	r1, {r0, r1}
1a0004b4:	e885 0003 	stmia.w	r5, {r0, r1}
	   0b01000,
	   0b00100,
	   0b00000
   };

   const char rightArrow[8] = {
1a0004b8:	466c      	mov	r4, sp
1a0004ba:	3318      	adds	r3, #24
1a0004bc:	e893 0003 	ldmia.w	r3, {r0, r1}
1a0004c0:	e884 0003 	stmia.w	r4, {r0, r1}
	   0b00010,
	   0b00100,
	   0b00000
   };

   lcdCreateChar( UP_ARROW, upArrow );
1a0004c4:	4611      	mov	r1, r2
1a0004c6:	2000      	movs	r0, #0
1a0004c8:	f002 f9b2 	bl	1a002830 <lcdCreateChar>
   lcdCreateChar( DOWN_ARROW, downArrow );
1a0004cc:	4631      	mov	r1, r6
1a0004ce:	2001      	movs	r0, #1
1a0004d0:	f002 f9ae 	bl	1a002830 <lcdCreateChar>
   lcdCreateChar( LEFT_ARROW, leftArrow );
1a0004d4:	4629      	mov	r1, r5
1a0004d6:	2002      	movs	r0, #2
1a0004d8:	f002 f9aa 	bl	1a002830 <lcdCreateChar>
   lcdCreateChar( RIGHT_ARROW, rightArrow );
1a0004dc:	4621      	mov	r1, r4
1a0004de:	2003      	movs	r0, #3
1a0004e0:	f002 f9a6 	bl	1a002830 <lcdCreateChar>
1a0004e4:	b008      	add	sp, #32
1a0004e6:	bd70      	pop	{r4, r5, r6, pc}
1a0004e8:	1a0036e0 	.word	0x1a0036e0

1a0004ec <Display_Init>:
void Display_Init(){
1a0004ec:	b508      	push	{r3, lr}
   lcdInit( 16, 2, 5, 8 );
1a0004ee:	2308      	movs	r3, #8
1a0004f0:	2205      	movs	r2, #5
1a0004f2:	2102      	movs	r1, #2
1a0004f4:	2010      	movs	r0, #16
1a0004f6:	f002 f9c1 	bl	1a00287c <lcdInit>
   delay( LCD_STARTUP_WAIT_MS );   // No compatible con FreeRTOS
1a0004fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a0004fe:	2100      	movs	r1, #0
1a000500:	f002 f8e0 	bl	1a0026c4 <delay>
   lcdCursorSet( LCD_CURSOR_OFF );
1a000504:	2000      	movs	r0, #0
1a000506:	f002 f988 	bl	1a00281a <lcdCursorSet>
   Display_AddCustomChars();
1a00050a:	f7ff ffc1 	bl	1a000490 <Display_AddCustomChars>
}
1a00050e:	bd08      	pop	{r3, pc}

1a000510 <Display_WriteMessage>:
void Display_WriteMessage(char* msg){
1a000510:	b510      	push	{r4, lr}
1a000512:	4604      	mov	r4, r0
   lcdClearAndHome();
1a000514:	f002 f9aa 	bl	1a00286c <lcdClearAndHome>
   lcdSendString(msg);
1a000518:	4620      	mov	r0, r4
1a00051a:	f002 fa43 	bl	1a0029a4 <lcdSendString>
}
1a00051e:	bd10      	pop	{r4, pc}

1a000520 <Display_WriteDirs>:
void Display_WriteDirs(bool_t up, bool_t left, bool_t right, bool_t down){
1a000520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a000522:	4606      	mov	r6, r0
1a000524:	460f      	mov	r7, r1
1a000526:	4614      	mov	r4, r2
1a000528:	461d      	mov	r5, r3
   lcdGoToXY(2, 1);
1a00052a:	2101      	movs	r1, #1
1a00052c:	2002      	movs	r0, #2
1a00052e:	f002 f943 	bl	1a0027b8 <lcdGoToXY>
   if (left) lcdData(LEFT_ARROW);
1a000532:	b1df      	cbz	r7, 1a00056c <Display_WriteDirs+0x4c>
1a000534:	2002      	movs	r0, #2
1a000536:	f002 f927 	bl	1a002788 <lcdData>
   lcdGoToXY(5, 1);
1a00053a:	2101      	movs	r1, #1
1a00053c:	2005      	movs	r0, #5
1a00053e:	f002 f93b 	bl	1a0027b8 <lcdGoToXY>
   if (up) lcdData(UP_ARROW);
1a000542:	b1be      	cbz	r6, 1a000574 <Display_WriteDirs+0x54>
1a000544:	2000      	movs	r0, #0
1a000546:	f002 f91f 	bl	1a002788 <lcdData>
   lcdGoToXY(8, 1);
1a00054a:	2101      	movs	r1, #1
1a00054c:	2008      	movs	r0, #8
1a00054e:	f002 f933 	bl	1a0027b8 <lcdGoToXY>
   if (down) lcdData(DOWN_ARROW);
1a000552:	b19d      	cbz	r5, 1a00057c <Display_WriteDirs+0x5c>
1a000554:	2001      	movs	r0, #1
1a000556:	f002 f917 	bl	1a002788 <lcdData>
   lcdGoToXY(11, 1);
1a00055a:	2101      	movs	r1, #1
1a00055c:	200b      	movs	r0, #11
1a00055e:	f002 f92b 	bl	1a0027b8 <lcdGoToXY>
   if (right) lcdData(RIGHT_ARROW);
1a000562:	b17c      	cbz	r4, 1a000584 <Display_WriteDirs+0x64>
1a000564:	2003      	movs	r0, #3
1a000566:	f002 f90f 	bl	1a002788 <lcdData>
}
1a00056a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   else lcdSendString(" ");
1a00056c:	4807      	ldr	r0, [pc, #28]	; (1a00058c <Display_WriteDirs+0x6c>)
1a00056e:	f002 fa19 	bl	1a0029a4 <lcdSendString>
1a000572:	e7e2      	b.n	1a00053a <Display_WriteDirs+0x1a>
   else lcdSendString(" ");
1a000574:	4805      	ldr	r0, [pc, #20]	; (1a00058c <Display_WriteDirs+0x6c>)
1a000576:	f002 fa15 	bl	1a0029a4 <lcdSendString>
1a00057a:	e7e6      	b.n	1a00054a <Display_WriteDirs+0x2a>
   else lcdSendString(" ");
1a00057c:	4803      	ldr	r0, [pc, #12]	; (1a00058c <Display_WriteDirs+0x6c>)
1a00057e:	f002 fa11 	bl	1a0029a4 <lcdSendString>
1a000582:	e7ea      	b.n	1a00055a <Display_WriteDirs+0x3a>
   else lcdSendString(" ");
1a000584:	4801      	ldr	r0, [pc, #4]	; (1a00058c <Display_WriteDirs+0x6c>)
1a000586:	f002 fa0d 	bl	1a0029a4 <lcdSendString>
}
1a00058a:	e7ee      	b.n	1a00056a <Display_WriteDirs+0x4a>
1a00058c:	1a003700 	.word	0x1a003700

1a000590 <Buttons_Init>:
#include "buttons.h"

void Buttons_Init(){
1a000590:	b508      	push	{r3, lr}
    // Establecer cada pin conectado a un botón como entrada
    gpioInit(PIN_S1, GPIO_INPUT);
1a000592:	2100      	movs	r1, #0
1a000594:	200e      	movs	r0, #14
1a000596:	f001 fab7 	bl	1a001b08 <gpioInit>
    gpioInit(PIN_S2, GPIO_INPUT);
1a00059a:	2100      	movs	r1, #0
1a00059c:	200c      	movs	r0, #12
1a00059e:	f001 fab3 	bl	1a001b08 <gpioInit>
    gpioInit(PIN_S3, GPIO_INPUT);
1a0005a2:	2100      	movs	r1, #0
1a0005a4:	201d      	movs	r0, #29
1a0005a6:	f001 faaf 	bl	1a001b08 <gpioInit>
    gpioInit(PIN_S4, GPIO_INPUT);
1a0005aa:	2100      	movs	r1, #0
1a0005ac:	200f      	movs	r0, #15
1a0005ae:	f001 faab 	bl	1a001b08 <gpioInit>
    gpioInit(PIN_S5, GPIO_INPUT);
1a0005b2:	2100      	movs	r1, #0
1a0005b4:	200d      	movs	r0, #13
1a0005b6:	f001 faa7 	bl	1a001b08 <gpioInit>
    gpioInit(PIN_S6, GPIO_INPUT);
1a0005ba:	2100      	movs	r1, #0
1a0005bc:	200b      	movs	r0, #11
1a0005be:	f001 faa3 	bl	1a001b08 <gpioInit>
1a0005c2:	bd08      	pop	{r3, pc}

1a0005c4 <LED_Encender>:
static void LED_Apagar(uint8_t id){
   gpioWrite(id, OFF);
   apagado = true;
}

static void LED_Encender(uint8_t id){
1a0005c4:	b510      	push	{r4, lr}
1a0005c6:	4604      	mov	r4, r0
   gpioWrite(id, ON);
1a0005c8:	2101      	movs	r1, #1
1a0005ca:	b240      	sxtb	r0, r0
1a0005cc:	f001 fb72 	bl	1a001cb4 <gpioWrite>
   ledEncendido = id;
1a0005d0:	4b02      	ldr	r3, [pc, #8]	; (1a0005dc <LED_Encender+0x18>)
1a0005d2:	701c      	strb	r4, [r3, #0]
   apagado = false;
1a0005d4:	4b02      	ldr	r3, [pc, #8]	; (1a0005e0 <LED_Encender+0x1c>)
1a0005d6:	2200      	movs	r2, #0
1a0005d8:	701a      	strb	r2, [r3, #0]
1a0005da:	bd10      	pop	{r4, pc}
1a0005dc:	1000010d 	.word	0x1000010d
1a0005e0:	10000047 	.word	0x10000047

1a0005e4 <LED_Apagar>:
static void LED_Apagar(uint8_t id){
1a0005e4:	b508      	push	{r3, lr}
   gpioWrite(id, OFF);
1a0005e6:	2100      	movs	r1, #0
1a0005e8:	b240      	sxtb	r0, r0
1a0005ea:	f001 fb63 	bl	1a001cb4 <gpioWrite>
   apagado = true;
1a0005ee:	4b02      	ldr	r3, [pc, #8]	; (1a0005f8 <LED_Apagar+0x14>)
1a0005f0:	2201      	movs	r2, #1
1a0005f2:	701a      	strb	r2, [r3, #0]
}
1a0005f4:	bd08      	pop	{r3, pc}
1a0005f6:	bf00      	nop
1a0005f8:	10000047 	.word	0x10000047

1a0005fc <LED_Init>:
void LED_Init(){
1a0005fc:	b508      	push	{r3, lr}
   gpioInit(PIN_LED_R, GPIO_OUTPUT);
1a0005fe:	2101      	movs	r1, #1
1a000600:	2003      	movs	r0, #3
1a000602:	f001 fa81 	bl	1a001b08 <gpioInit>
   gpioInit(PIN_LED_G, GPIO_OUTPUT);
1a000606:	2101      	movs	r1, #1
1a000608:	2002      	movs	r0, #2
1a00060a:	f001 fa7d 	bl	1a001b08 <gpioInit>
   gpioInit(PIN_LED_B, GPIO_OUTPUT);
1a00060e:	2101      	movs	r1, #1
1a000610:	2004      	movs	r0, #4
1a000612:	f001 fa79 	bl	1a001b08 <gpioInit>
}
1a000616:	bd08      	pop	{r3, pc}

1a000618 <LED_Alternar>:
void LED_Alternar(uint8_t periodo){
1a000618:	b508      	push	{r3, lr}
   if (++count == periodo){
1a00061a:	4a0b      	ldr	r2, [pc, #44]	; (1a000648 <LED_Alternar+0x30>)
1a00061c:	7813      	ldrb	r3, [r2, #0]
1a00061e:	3301      	adds	r3, #1
1a000620:	b2db      	uxtb	r3, r3
1a000622:	7013      	strb	r3, [r2, #0]
1a000624:	4283      	cmp	r3, r0
1a000626:	d000      	beq.n	1a00062a <LED_Alternar+0x12>
}
1a000628:	bd08      	pop	{r3, pc}
      if (ledEncendido > 0){
1a00062a:	4b08      	ldr	r3, [pc, #32]	; (1a00064c <LED_Alternar+0x34>)
1a00062c:	7818      	ldrb	r0, [r3, #0]
1a00062e:	b120      	cbz	r0, 1a00063a <LED_Alternar+0x22>
         if (apagado) LED_Encender(ledEncendido);
1a000630:	4b07      	ldr	r3, [pc, #28]	; (1a000650 <LED_Alternar+0x38>)
1a000632:	781b      	ldrb	r3, [r3, #0]
1a000634:	b12b      	cbz	r3, 1a000642 <LED_Alternar+0x2a>
1a000636:	f7ff ffc5 	bl	1a0005c4 <LED_Encender>
      count = 0;
1a00063a:	4b03      	ldr	r3, [pc, #12]	; (1a000648 <LED_Alternar+0x30>)
1a00063c:	2200      	movs	r2, #0
1a00063e:	701a      	strb	r2, [r3, #0]
}
1a000640:	e7f2      	b.n	1a000628 <LED_Alternar+0x10>
         else LED_Apagar(ledEncendido);
1a000642:	f7ff ffcf 	bl	1a0005e4 <LED_Apagar>
1a000646:	e7f8      	b.n	1a00063a <LED_Alternar+0x22>
1a000648:	1000010c 	.word	0x1000010c
1a00064c:	1000010d 	.word	0x1000010d
1a000650:	10000047 	.word	0x10000047

1a000654 <LED_ApagarTodos>:
void LED_ApagarTodos(){
1a000654:	b508      	push	{r3, lr}
   LED_Apagar(PIN_LED_R);
1a000656:	2003      	movs	r0, #3
1a000658:	f7ff ffc4 	bl	1a0005e4 <LED_Apagar>
   LED_Apagar(PIN_LED_G);
1a00065c:	2002      	movs	r0, #2
1a00065e:	f7ff ffc1 	bl	1a0005e4 <LED_Apagar>
   LED_Apagar(PIN_LED_B);
1a000662:	2004      	movs	r0, #4
1a000664:	f7ff ffbe 	bl	1a0005e4 <LED_Apagar>
}
1a000668:	bd08      	pop	{r3, pc}

1a00066a <LED_EncenderRojo>:
void LED_EncenderRojo(){
1a00066a:	b508      	push	{r3, lr}
   LED_ApagarTodos();
1a00066c:	f7ff fff2 	bl	1a000654 <LED_ApagarTodos>
   LED_Encender(PIN_LED_R);
1a000670:	2003      	movs	r0, #3
1a000672:	f7ff ffa7 	bl	1a0005c4 <LED_Encender>
}
1a000676:	bd08      	pop	{r3, pc}

1a000678 <LED_EncenderVerde>:
void LED_EncenderVerde(){
1a000678:	b508      	push	{r3, lr}
   LED_ApagarTodos();
1a00067a:	f7ff ffeb 	bl	1a000654 <LED_ApagarTodos>
   LED_Encender(PIN_LED_G);
1a00067e:	2002      	movs	r0, #2
1a000680:	f7ff ffa0 	bl	1a0005c4 <LED_Encender>
}
1a000684:	bd08      	pop	{r3, pc}

1a000686 <LED_EncenderAzul>:
void LED_EncenderAzul(){
1a000686:	b508      	push	{r3, lr}
   LED_ApagarTodos();
1a000688:	f7ff ffe4 	bl	1a000654 <LED_ApagarTodos>
   LED_Encender(PIN_LED_B);
1a00068c:	2004      	movs	r0, #4
1a00068e:	f7ff ff99 	bl	1a0005c4 <LED_Encender>
}
1a000692:	bd08      	pop	{r3, pc}

1a000694 <initComponents>:
   return 0;
}

// -------------------------------- Funciones privadas ------------------------

static void initComponents(){
1a000694:	b508      	push	{r3, lr}
   // Inicializar EDU-CIAA
   boardConfig();
1a000696:	f001 ff7f 	bl	1a002598 <boardInit>

   // Inicializar LED RGB
   LED_Init();
1a00069a:	f7ff ffaf 	bl	1a0005fc <LED_Init>

   // Inicializar joystick (ADC)
   Joystick_Init();
1a00069e:	f000 f937 	bl	1a000910 <Joystick_Init>

   // Inicializar pulsadores
   Buttons_Init();
1a0006a2:	f7ff ff75 	bl	1a000590 <Buttons_Init>

   // Inicializar display
   delay(900);
1a0006a6:	f44f 7061 	mov.w	r0, #900	; 0x384
1a0006aa:	2100      	movs	r1, #0
1a0006ac:	f002 f80a 	bl	1a0026c4 <delay>
   Display_Init();
1a0006b0:	f7ff ff1c 	bl	1a0004ec <Display_Init>
}
1a0006b4:	bd08      	pop	{r3, pc}

1a0006b6 <main>:
{
1a0006b6:	b508      	push	{r3, lr}
   initComponents();
1a0006b8:	f7ff ffec 	bl	1a000694 <initComponents>
   MEF_Start();
1a0006bc:	f000 f87e 	bl	1a0007bc <MEF_Start>
      MEF_Update();
1a0006c0:	f000 f882 	bl	1a0007c8 <MEF_Update>
      delay(20);
1a0006c4:	2014      	movs	r0, #20
1a0006c6:	2100      	movs	r1, #0
1a0006c8:	f001 fffc 	bl	1a0026c4 <delay>
1a0006cc:	e7f8      	b.n	1a0006c0 <main+0xa>
1a0006ce:	Address 0x1a0006ce is out of bounds.


1a0006d0 <MEF_Ready>:
    if (success) status = READY;
    else if (++attempts == 500) status = FAIL;
}


static void MEF_Ready(){
1a0006d0:	b500      	push	{lr}
1a0006d2:	b083      	sub	sp, #12
    static bool_t printed = false;

    if (!printed){
1a0006d4:	4b14      	ldr	r3, [pc, #80]	; (1a000728 <MEF_Ready+0x58>)
1a0006d6:	781b      	ldrb	r3, [r3, #0]
1a0006d8:	b143      	cbz	r3, 1a0006ec <MEF_Ready+0x1c>
        // Marcar como impreso para evitar reescribir en display
        printed = true;
    }

    // Realizar lectura de controles y enviarlo a PC
    bool_t success = USB_Update();
1a0006da:	f000 f897 	bl	1a00080c <USB_Update>

    // Pasar a estado FAIL si el envío no fue exitoso
    if (!success) status = FAIL;
1a0006de:	b970      	cbnz	r0, 1a0006fe <MEF_Ready+0x2e>
1a0006e0:	4b12      	ldr	r3, [pc, #72]	; (1a00072c <MEF_Ready+0x5c>)
1a0006e2:	2201      	movs	r2, #1
1a0006e4:	701a      	strb	r2, [r3, #0]
        bool_t up, left, right, down;

        Joystick_GetDirs(&up, &left, &right, &down);
        Display_WriteDirs(up, left, right, down);
    }
1a0006e6:	b003      	add	sp, #12
1a0006e8:	f85d fb04 	ldr.w	pc, [sp], #4
        LED_EncenderVerde();
1a0006ec:	f7ff ffc4 	bl	1a000678 <LED_EncenderVerde>
        Display_WriteMessage("Listo para jugar");
1a0006f0:	480f      	ldr	r0, [pc, #60]	; (1a000730 <MEF_Ready+0x60>)
1a0006f2:	f7ff ff0d 	bl	1a000510 <Display_WriteMessage>
        printed = true;
1a0006f6:	4b0c      	ldr	r3, [pc, #48]	; (1a000728 <MEF_Ready+0x58>)
1a0006f8:	2201      	movs	r2, #1
1a0006fa:	701a      	strb	r2, [r3, #0]
1a0006fc:	e7ed      	b.n	1a0006da <MEF_Ready+0xa>
        Joystick_GetDirs(&up, &left, &right, &down);
1a0006fe:	f10d 0307 	add.w	r3, sp, #7
1a000702:	f10d 0206 	add.w	r2, sp, #6
1a000706:	f10d 0105 	add.w	r1, sp, #5
1a00070a:	a801      	add	r0, sp, #4
1a00070c:	f000 f93a 	bl	1a000984 <Joystick_GetDirs>
        Display_WriteDirs(up, left, right, down);
1a000710:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a000714:	f89d 2006 	ldrb.w	r2, [sp, #6]
1a000718:	f89d 1005 	ldrb.w	r1, [sp, #5]
1a00071c:	f89d 0004 	ldrb.w	r0, [sp, #4]
1a000720:	f7ff fefe 	bl	1a000520 <Display_WriteDirs>
1a000724:	e7df      	b.n	1a0006e6 <MEF_Ready+0x16>
1a000726:	bf00      	nop
1a000728:	10000111 	.word	0x10000111
1a00072c:	10000112 	.word	0x10000112
1a000730:	1a003734 	.word	0x1a003734

1a000734 <MEF_Checking>:
static void MEF_Checking(){
1a000734:	b508      	push	{r3, lr}
    LED_Alternar(25);
1a000736:	2019      	movs	r0, #25
1a000738:	f7ff ff6e 	bl	1a000618 <LED_Alternar>
    bool_t success = USB_Attempt();
1a00073c:	f000 f87e 	bl	1a00083c <USB_Attempt>
    if (success) status = READY;
1a000740:	b118      	cbz	r0, 1a00074a <MEF_Checking+0x16>
1a000742:	4b08      	ldr	r3, [pc, #32]	; (1a000764 <MEF_Checking+0x30>)
1a000744:	2203      	movs	r2, #3
1a000746:	701a      	strb	r2, [r3, #0]
}
1a000748:	bd08      	pop	{r3, pc}
    else if (++attempts == 500) status = FAIL;
1a00074a:	4a07      	ldr	r2, [pc, #28]	; (1a000768 <MEF_Checking+0x34>)
1a00074c:	8813      	ldrh	r3, [r2, #0]
1a00074e:	3301      	adds	r3, #1
1a000750:	b29b      	uxth	r3, r3
1a000752:	8013      	strh	r3, [r2, #0]
1a000754:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
1a000758:	d1f6      	bne.n	1a000748 <MEF_Checking+0x14>
1a00075a:	4b02      	ldr	r3, [pc, #8]	; (1a000764 <MEF_Checking+0x30>)
1a00075c:	2201      	movs	r2, #1
1a00075e:	701a      	strb	r2, [r3, #0]
}
1a000760:	e7f2      	b.n	1a000748 <MEF_Checking+0x14>
1a000762:	bf00      	nop
1a000764:	10000112 	.word	0x10000112
1a000768:	1000010e 	.word	0x1000010e

1a00076c <MEF_Fail>:
static void MEF_Fail(){
1a00076c:	b508      	push	{r3, lr}
    if (!printed){
1a00076e:	4b06      	ldr	r3, [pc, #24]	; (1a000788 <MEF_Fail+0x1c>)
1a000770:	781b      	ldrb	r3, [r3, #0]
1a000772:	b103      	cbz	r3, 1a000776 <MEF_Fail+0xa>
}
1a000774:	bd08      	pop	{r3, pc}
        LED_EncenderRojo();
1a000776:	f7ff ff78 	bl	1a00066a <LED_EncenderRojo>
        Display_WriteMessage("USB incorrecto");
1a00077a:	4804      	ldr	r0, [pc, #16]	; (1a00078c <MEF_Fail+0x20>)
1a00077c:	f7ff fec8 	bl	1a000510 <Display_WriteMessage>
        printed = true;
1a000780:	4b01      	ldr	r3, [pc, #4]	; (1a000788 <MEF_Fail+0x1c>)
1a000782:	2201      	movs	r2, #1
1a000784:	701a      	strb	r2, [r3, #0]
}
1a000786:	e7f5      	b.n	1a000774 <MEF_Fail+0x8>
1a000788:	10000110 	.word	0x10000110
1a00078c:	1a003714 	.word	0x1a003714

1a000790 <MEF_Connecting>:
static void MEF_Connecting(){
1a000790:	b508      	push	{r3, lr}
    LED_EncenderAzul();
1a000792:	f7ff ff78 	bl	1a000686 <LED_EncenderAzul>
    Display_WriteMessage("Conectando...");
1a000796:	4807      	ldr	r0, [pc, #28]	; (1a0007b4 <MEF_Connecting+0x24>)
1a000798:	f7ff feba 	bl	1a000510 <Display_WriteMessage>
    bool_t success = USB_Init();
1a00079c:	f000 f826 	bl	1a0007ec <USB_Init>
    if (success) status = CHECKING;
1a0007a0:	b118      	cbz	r0, 1a0007aa <MEF_Connecting+0x1a>
1a0007a2:	4b05      	ldr	r3, [pc, #20]	; (1a0007b8 <MEF_Connecting+0x28>)
1a0007a4:	2202      	movs	r2, #2
1a0007a6:	701a      	strb	r2, [r3, #0]
}
1a0007a8:	bd08      	pop	{r3, pc}
    else status = FAIL;
1a0007aa:	4b03      	ldr	r3, [pc, #12]	; (1a0007b8 <MEF_Connecting+0x28>)
1a0007ac:	2201      	movs	r2, #1
1a0007ae:	701a      	strb	r2, [r3, #0]
}
1a0007b0:	e7fa      	b.n	1a0007a8 <MEF_Connecting+0x18>
1a0007b2:	bf00      	nop
1a0007b4:	1a003704 	.word	0x1a003704
1a0007b8:	10000112 	.word	0x10000112

1a0007bc <MEF_Start>:
    status = CONNECTING;
1a0007bc:	4b01      	ldr	r3, [pc, #4]	; (1a0007c4 <MEF_Start+0x8>)
1a0007be:	2200      	movs	r2, #0
1a0007c0:	701a      	strb	r2, [r3, #0]
}
1a0007c2:	4770      	bx	lr
1a0007c4:	10000112 	.word	0x10000112

1a0007c8 <MEF_Update>:
void MEF_Update(){
1a0007c8:	b508      	push	{r3, lr}
    (*MEF_Functions[status])();
1a0007ca:	4b03      	ldr	r3, [pc, #12]	; (1a0007d8 <MEF_Update+0x10>)
1a0007cc:	781a      	ldrb	r2, [r3, #0]
1a0007ce:	4b03      	ldr	r3, [pc, #12]	; (1a0007dc <MEF_Update+0x14>)
1a0007d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
1a0007d4:	4798      	blx	r3
}
1a0007d6:	bd08      	pop	{r3, pc}
1a0007d8:	10000112 	.word	0x10000112
1a0007dc:	1a003724 	.word	0x1a003724

1a0007e0 <convertRawToSigned>:
}

// ----------------------- Implementación de funciones privadas -----------------

static int8_t convertRawToSigned(uint16_t raw){
   uint8_t reduced = (uint8_t) (raw / 4);
1a0007e0:	f3c0 0087 	ubfx	r0, r0, #2, #8
   return (int8_t) (reduced - 128);
1a0007e4:	f080 0080 	eor.w	r0, r0, #128	; 0x80
1a0007e8:	b240      	sxtb	r0, r0
1a0007ea:	4770      	bx	lr

1a0007ec <USB_Init>:
bool_t USB_Init(){
1a0007ec:	b508      	push	{r3, lr}
   bool_t driverSuccess = usbDeviceConfig(USB_HID_GAMEPAD);
1a0007ee:	2002      	movs	r0, #2
1a0007f0:	f001 fe5c 	bl	1a0024ac <usbDeviceInit>
   if (driverSuccess){
1a0007f4:	4603      	mov	r3, r0
1a0007f6:	b908      	cbnz	r0, 1a0007fc <USB_Init+0x10>
}
1a0007f8:	4618      	mov	r0, r3
1a0007fa:	bd08      	pop	{r3, pc}
      usbDeviceGamepadCheckCallbackSet(checkForPressedButtons);
1a0007fc:	4802      	ldr	r0, [pc, #8]	; (1a000808 <USB_Init+0x1c>)
1a0007fe:	f7ff fe3d 	bl	1a00047c <usbDeviceGamepadCheckCallbackSet>
      return true;
1a000802:	2301      	movs	r3, #1
1a000804:	e7f8      	b.n	1a0007f8 <USB_Init+0xc>
1a000806:	bf00      	nop
1a000808:	1a000879 	.word	0x1a000879

1a00080c <USB_Update>:
bool_t USB_Update(){
1a00080c:	b538      	push	{r3, r4, r5, lr}
   uint16_t valorEjeX = Joystick_LeerX();
1a00080e:	f000 f889 	bl	1a000924 <Joystick_LeerX>
1a000812:	4605      	mov	r5, r0
   uint16_t valorEjeY = Joystick_LeerY();
1a000814:	f000 f89e 	bl	1a000954 <Joystick_LeerY>
1a000818:	4604      	mov	r4, r0
   X_VALUE = convertRawToSigned(valorEjeX);
1a00081a:	4628      	mov	r0, r5
1a00081c:	f7ff ffe0 	bl	1a0007e0 <convertRawToSigned>
1a000820:	4b04      	ldr	r3, [pc, #16]	; (1a000834 <USB_Update+0x28>)
1a000822:	7018      	strb	r0, [r3, #0]
   Y_VALUE = convertRawToSigned(valorEjeY);
1a000824:	4620      	mov	r0, r4
1a000826:	f7ff ffdb 	bl	1a0007e0 <convertRawToSigned>
1a00082a:	4b03      	ldr	r3, [pc, #12]	; (1a000838 <USB_Update+0x2c>)
1a00082c:	7018      	strb	r0, [r3, #0]
   return usbDeviceGamepadTasks();
1a00082e:	f7ff fde5 	bl	1a0003fc <usbDeviceGamepadTasks>
}
1a000832:	bd38      	pop	{r3, r4, r5, pc}
1a000834:	10000113 	.word	0x10000113
1a000838:	10000114 	.word	0x10000114

1a00083c <USB_Attempt>:
bool_t USB_Attempt(){
1a00083c:	b508      	push	{r3, lr}
   return usbDeviceGamepadTasks();
1a00083e:	f7ff fddd 	bl	1a0003fc <usbDeviceGamepadTasks>
}
1a000842:	bd08      	pop	{r3, pc}

1a000844 <USB_MarcarBoton>:
   if (numero >= CANT_PULSADORES) return 0;
1a000844:	2805      	cmp	r0, #5
1a000846:	d808      	bhi.n	1a00085a <USB_MarcarBoton+0x16>
   aux_bitsPulsadores |= (1 << numero);
1a000848:	2301      	movs	r3, #1
1a00084a:	fa03 f000 	lsl.w	r0, r3, r0
1a00084e:	4904      	ldr	r1, [pc, #16]	; (1a000860 <USB_MarcarBoton+0x1c>)
1a000850:	780a      	ldrb	r2, [r1, #0]
1a000852:	4310      	orrs	r0, r2
1a000854:	7008      	strb	r0, [r1, #0]
   return 1;
1a000856:	4618      	mov	r0, r3
1a000858:	4770      	bx	lr
   if (numero >= CANT_PULSADORES) return 0;
1a00085a:	2000      	movs	r0, #0
}
1a00085c:	4770      	bx	lr
1a00085e:	bf00      	nop
1a000860:	10000115 	.word	0x10000115

1a000864 <USB_PresionarBotones>:
void USB_PresionarBotones(){
1a000864:	b510      	push	{r4, lr}
   usbDeviceGamepadPress(aux_bitsPulsadores);
1a000866:	4c03      	ldr	r4, [pc, #12]	; (1a000874 <USB_PresionarBotones+0x10>)
1a000868:	7820      	ldrb	r0, [r4, #0]
1a00086a:	f7ff fdeb 	bl	1a000444 <usbDeviceGamepadPress>
   aux_bitsPulsadores = 0x00;
1a00086e:	2300      	movs	r3, #0
1a000870:	7023      	strb	r3, [r4, #0]
}
1a000872:	bd10      	pop	{r4, pc}
1a000874:	10000115 	.word	0x10000115

1a000878 <checkForPressedButtons>:
{
1a000878:	b508      	push	{r3, lr}
   if (!gpioRead(PIN_S1)) USB_MarcarBoton(0);
1a00087a:	200e      	movs	r0, #14
1a00087c:	f001 fa4f 	bl	1a001d1e <gpioRead>
1a000880:	b350      	cbz	r0, 1a0008d8 <checkForPressedButtons+0x60>
   if (!gpioRead(PIN_S2)) USB_MarcarBoton(1);
1a000882:	200c      	movs	r0, #12
1a000884:	f001 fa4b 	bl	1a001d1e <gpioRead>
1a000888:	b348      	cbz	r0, 1a0008de <checkForPressedButtons+0x66>
   if (!gpioRead(PIN_S3)) USB_MarcarBoton(2);
1a00088a:	201d      	movs	r0, #29
1a00088c:	f001 fa47 	bl	1a001d1e <gpioRead>
1a000890:	b348      	cbz	r0, 1a0008e6 <checkForPressedButtons+0x6e>
   if (!gpioRead(PIN_S4)) USB_MarcarBoton(3);   
1a000892:	200f      	movs	r0, #15
1a000894:	f001 fa43 	bl	1a001d1e <gpioRead>
1a000898:	b348      	cbz	r0, 1a0008ee <checkForPressedButtons+0x76>
   if (!gpioRead(PIN_S5)) USB_MarcarBoton(4);
1a00089a:	200d      	movs	r0, #13
1a00089c:	f001 fa3f 	bl	1a001d1e <gpioRead>
1a0008a0:	b348      	cbz	r0, 1a0008f6 <checkForPressedButtons+0x7e>
   if (!gpioRead(PIN_S6)) USB_MarcarBoton(5);
1a0008a2:	200b      	movs	r0, #11
1a0008a4:	f001 fa3b 	bl	1a001d1e <gpioRead>
1a0008a8:	b348      	cbz	r0, 1a0008fe <checkForPressedButtons+0x86>
   USB_PresionarBotones();
1a0008aa:	f7ff ffdb 	bl	1a000864 <USB_PresionarBotones>
   usbDeviceGamepadMove(X_VALUE, 0);
1a0008ae:	4b16      	ldr	r3, [pc, #88]	; (1a000908 <checkForPressedButtons+0x90>)
1a0008b0:	7818      	ldrb	r0, [r3, #0]
1a0008b2:	2100      	movs	r1, #0
1a0008b4:	b240      	sxtb	r0, r0
1a0008b6:	f7ff fdcb 	bl	1a000450 <usbDeviceGamepadMove>
   usbDeviceGamepadMove(Y_VALUE, 1);
1a0008ba:	4b14      	ldr	r3, [pc, #80]	; (1a00090c <checkForPressedButtons+0x94>)
1a0008bc:	7818      	ldrb	r0, [r3, #0]
1a0008be:	2101      	movs	r1, #1
1a0008c0:	b240      	sxtb	r0, r0
1a0008c2:	f7ff fdc5 	bl	1a000450 <usbDeviceGamepadMove>
   usbDeviceGamepadHat(!gpioRead(PIN_SW));
1a0008c6:	2006      	movs	r0, #6
1a0008c8:	f001 fa29 	bl	1a001d1e <gpioRead>
1a0008cc:	fab0 f080 	clz	r0, r0
1a0008d0:	0940      	lsrs	r0, r0, #5
1a0008d2:	f7ff fdcd 	bl	1a000470 <usbDeviceGamepadHat>
}
1a0008d6:	bd08      	pop	{r3, pc}
   if (!gpioRead(PIN_S1)) USB_MarcarBoton(0);
1a0008d8:	f7ff ffb4 	bl	1a000844 <USB_MarcarBoton>
1a0008dc:	e7d1      	b.n	1a000882 <checkForPressedButtons+0xa>
   if (!gpioRead(PIN_S2)) USB_MarcarBoton(1);
1a0008de:	2001      	movs	r0, #1
1a0008e0:	f7ff ffb0 	bl	1a000844 <USB_MarcarBoton>
1a0008e4:	e7d1      	b.n	1a00088a <checkForPressedButtons+0x12>
   if (!gpioRead(PIN_S3)) USB_MarcarBoton(2);
1a0008e6:	2002      	movs	r0, #2
1a0008e8:	f7ff ffac 	bl	1a000844 <USB_MarcarBoton>
1a0008ec:	e7d1      	b.n	1a000892 <checkForPressedButtons+0x1a>
   if (!gpioRead(PIN_S4)) USB_MarcarBoton(3);   
1a0008ee:	2003      	movs	r0, #3
1a0008f0:	f7ff ffa8 	bl	1a000844 <USB_MarcarBoton>
1a0008f4:	e7d1      	b.n	1a00089a <checkForPressedButtons+0x22>
   if (!gpioRead(PIN_S5)) USB_MarcarBoton(4);
1a0008f6:	2004      	movs	r0, #4
1a0008f8:	f7ff ffa4 	bl	1a000844 <USB_MarcarBoton>
1a0008fc:	e7d1      	b.n	1a0008a2 <checkForPressedButtons+0x2a>
   if (!gpioRead(PIN_S6)) USB_MarcarBoton(5);
1a0008fe:	2005      	movs	r0, #5
1a000900:	f7ff ffa0 	bl	1a000844 <USB_MarcarBoton>
1a000904:	e7d1      	b.n	1a0008aa <checkForPressedButtons+0x32>
1a000906:	bf00      	nop
1a000908:	10000113 	.word	0x10000113
1a00090c:	10000114 	.word	0x10000114

1a000910 <Joystick_Init>:

// Variables privadas
static bool_t up, left, right, down;


void Joystick_Init(){
1a000910:	b508      	push	{r3, lr}
   // Inicializar y habilitar ADC
   adcConfig(ADC_ENABLE);
1a000912:	2000      	movs	r0, #0
1a000914:	f001 fa38 	bl	1a001d88 <adcInit>

   // Asignar pin conectado al Switch como entrada digital
   gpioInit(PIN_SW, GPIO_INPUT);
1a000918:	2100      	movs	r1, #0
1a00091a:	2006      	movs	r0, #6
1a00091c:	f001 f8f4 	bl	1a001b08 <gpioInit>
}
1a000920:	bd08      	pop	{r3, pc}
1a000922:	Address 0x1a000922 is out of bounds.


1a000924 <Joystick_LeerX>:

uint16_t Joystick_LeerX(){
1a000924:	b508      	push	{r3, lr}
   uint16_t raw = adcRead(PIN_VRX);
1a000926:	2001      	movs	r0, #1
1a000928:	f001 fa8a 	bl	1a001e40 <adcRead>
1a00092c:	4603      	mov	r3, r0

   left = (raw < NEUTRO_MIN);
1a00092e:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
1a000932:	bf2c      	ite	cs
1a000934:	2100      	movcs	r1, #0
1a000936:	2101      	movcc	r1, #1
1a000938:	4a04      	ldr	r2, [pc, #16]	; (1a00094c <Joystick_LeerX+0x28>)
1a00093a:	7011      	strb	r1, [r2, #0]
   right = (raw > NEUTRO_MAX);
1a00093c:	f5b0 7f1c 	cmp.w	r0, #624	; 0x270
1a000940:	bf94      	ite	ls
1a000942:	2300      	movls	r3, #0
1a000944:	2301      	movhi	r3, #1
1a000946:	4a02      	ldr	r2, [pc, #8]	; (1a000950 <Joystick_LeerX+0x2c>)
1a000948:	7013      	strb	r3, [r2, #0]

   return raw;
}
1a00094a:	bd08      	pop	{r3, pc}
1a00094c:	10000117 	.word	0x10000117
1a000950:	10000118 	.word	0x10000118

1a000954 <Joystick_LeerY>:


uint16_t Joystick_LeerY(){
1a000954:	b508      	push	{r3, lr}
   uint16_t raw = adcRead(PIN_VRY);
1a000956:	2000      	movs	r0, #0
1a000958:	f001 fa72 	bl	1a001e40 <adcRead>
1a00095c:	4603      	mov	r3, r0

   up = (raw < NEUTRO_MIN);
1a00095e:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
1a000962:	bf2c      	ite	cs
1a000964:	2100      	movcs	r1, #0
1a000966:	2101      	movcc	r1, #1
1a000968:	4a04      	ldr	r2, [pc, #16]	; (1a00097c <Joystick_LeerY+0x28>)
1a00096a:	7011      	strb	r1, [r2, #0]
   down = (raw > NEUTRO_MAX);
1a00096c:	f5b0 7f1c 	cmp.w	r0, #624	; 0x270
1a000970:	bf94      	ite	ls
1a000972:	2300      	movls	r3, #0
1a000974:	2301      	movhi	r3, #1
1a000976:	4a02      	ldr	r2, [pc, #8]	; (1a000980 <Joystick_LeerY+0x2c>)
1a000978:	7013      	strb	r3, [r2, #0]

   return raw;
}
1a00097a:	bd08      	pop	{r3, pc}
1a00097c:	10000119 	.word	0x10000119
1a000980:	10000116 	.word	0x10000116

1a000984 <Joystick_GetDirs>:

void Joystick_GetDirs(bool_t* dirUp, bool_t* dirLeft, bool_t* dirRight, bool_t* dirDown){
1a000984:	b410      	push	{r4}
   *dirUp = up;
1a000986:	4c07      	ldr	r4, [pc, #28]	; (1a0009a4 <Joystick_GetDirs+0x20>)
1a000988:	7824      	ldrb	r4, [r4, #0]
1a00098a:	7004      	strb	r4, [r0, #0]
   *dirLeft = left;
1a00098c:	4806      	ldr	r0, [pc, #24]	; (1a0009a8 <Joystick_GetDirs+0x24>)
1a00098e:	7800      	ldrb	r0, [r0, #0]
1a000990:	7008      	strb	r0, [r1, #0]
   *dirRight = right;
1a000992:	4906      	ldr	r1, [pc, #24]	; (1a0009ac <Joystick_GetDirs+0x28>)
1a000994:	7809      	ldrb	r1, [r1, #0]
1a000996:	7011      	strb	r1, [r2, #0]
   *dirDown = down;
1a000998:	4a05      	ldr	r2, [pc, #20]	; (1a0009b0 <Joystick_GetDirs+0x2c>)
1a00099a:	7812      	ldrb	r2, [r2, #0]
1a00099c:	701a      	strb	r2, [r3, #0]
}
1a00099e:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0009a2:	4770      	bx	lr
1a0009a4:	10000119 	.word	0x10000119
1a0009a8:	10000117 	.word	0x10000117
1a0009ac:	10000118 	.word	0x10000118
1a0009b0:	10000116 	.word	0x10000116

1a0009b4 <initialise_monitor_handles>:
1a0009b4:	4770      	bx	lr
1a0009b6:	Address 0x1a0009b6 is out of bounds.


1a0009b8 <Reset_Handler>:
1a0009b8:	b510      	push	{r4, lr}
1a0009ba:	b672      	cpsid	i
1a0009bc:	4b19      	ldr	r3, [pc, #100]	; (1a000a24 <Reset_Handler+0x6c>)
1a0009be:	4a1a      	ldr	r2, [pc, #104]	; (1a000a28 <Reset_Handler+0x70>)
1a0009c0:	601a      	str	r2, [r3, #0]
1a0009c2:	3304      	adds	r3, #4
1a0009c4:	4a19      	ldr	r2, [pc, #100]	; (1a000a2c <Reset_Handler+0x74>)
1a0009c6:	601a      	str	r2, [r3, #0]
1a0009c8:	2300      	movs	r3, #0
1a0009ca:	e005      	b.n	1a0009d8 <Reset_Handler+0x20>
1a0009cc:	4a18      	ldr	r2, [pc, #96]	; (1a000a30 <Reset_Handler+0x78>)
1a0009ce:	f04f 31ff 	mov.w	r1, #4294967295
1a0009d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
1a0009d6:	3301      	adds	r3, #1
1a0009d8:	2b07      	cmp	r3, #7
1a0009da:	d9f7      	bls.n	1a0009cc <Reset_Handler+0x14>
1a0009dc:	b662      	cpsie	i
1a0009de:	4b15      	ldr	r3, [pc, #84]	; (1a000a34 <Reset_Handler+0x7c>)
1a0009e0:	e007      	b.n	1a0009f2 <Reset_Handler+0x3a>
1a0009e2:	f103 040c 	add.w	r4, r3, #12
1a0009e6:	689a      	ldr	r2, [r3, #8]
1a0009e8:	6859      	ldr	r1, [r3, #4]
1a0009ea:	6818      	ldr	r0, [r3, #0]
1a0009ec:	f7ff fbcd 	bl	1a00018a <data_init>
1a0009f0:	4623      	mov	r3, r4
1a0009f2:	4a11      	ldr	r2, [pc, #68]	; (1a000a38 <Reset_Handler+0x80>)
1a0009f4:	4293      	cmp	r3, r2
1a0009f6:	d3f4      	bcc.n	1a0009e2 <Reset_Handler+0x2a>
1a0009f8:	e006      	b.n	1a000a08 <Reset_Handler+0x50>
1a0009fa:	461c      	mov	r4, r3
1a0009fc:	6859      	ldr	r1, [r3, #4]
1a0009fe:	f854 0b08 	ldr.w	r0, [r4], #8
1a000a02:	f7ff fbd1 	bl	1a0001a8 <bss_init>
1a000a06:	4623      	mov	r3, r4
1a000a08:	4a0c      	ldr	r2, [pc, #48]	; (1a000a3c <Reset_Handler+0x84>)
1a000a0a:	4293      	cmp	r3, r2
1a000a0c:	d3f5      	bcc.n	1a0009fa <Reset_Handler+0x42>
1a000a0e:	f001 f837 	bl	1a001a80 <SystemInit>
1a000a12:	f002 fb09 	bl	1a003028 <__libc_init_array>
1a000a16:	f7ff ffcd 	bl	1a0009b4 <initialise_monitor_handles>
1a000a1a:	f7ff fe4c 	bl	1a0006b6 <main>
1a000a1e:	bf30      	wfi
1a000a20:	e7fd      	b.n	1a000a1e <Reset_Handler+0x66>
1a000a22:	bf00      	nop
1a000a24:	40053100 	.word	0x40053100
1a000a28:	10df1000 	.word	0x10df1000
1a000a2c:	01dff7ff 	.word	0x01dff7ff
1a000a30:	e000e280 	.word	0xe000e280
1a000a34:	1a000114 	.word	0x1a000114
1a000a38:	1a000150 	.word	0x1a000150
1a000a3c:	1a000178 	.word	0x1a000178

1a000a40 <_fini>:
1a000a40:	4770      	bx	lr

1a000a42 <_init>:
1a000a42:	4770      	bx	lr

1a000a44 <_close_r>:
1a000a44:	2309      	movs	r3, #9
1a000a46:	6003      	str	r3, [r0, #0]
1a000a48:	f04f 30ff 	mov.w	r0, #4294967295
1a000a4c:	4770      	bx	lr

1a000a4e <_fstat_r>:
1a000a4e:	2358      	movs	r3, #88	; 0x58
1a000a50:	6003      	str	r3, [r0, #0]
1a000a52:	f04f 30ff 	mov.w	r0, #4294967295
1a000a56:	4770      	bx	lr

1a000a58 <_isatty_r>:
1a000a58:	2902      	cmp	r1, #2
1a000a5a:	d904      	bls.n	1a000a66 <_isatty_r+0xe>
1a000a5c:	2309      	movs	r3, #9
1a000a5e:	6003      	str	r3, [r0, #0]
1a000a60:	f04f 30ff 	mov.w	r0, #4294967295
1a000a64:	4770      	bx	lr
1a000a66:	2001      	movs	r0, #1
1a000a68:	4770      	bx	lr

1a000a6a <_lseek_r>:
1a000a6a:	2358      	movs	r3, #88	; 0x58
1a000a6c:	6003      	str	r3, [r0, #0]
1a000a6e:	f04f 30ff 	mov.w	r0, #4294967295
1a000a72:	4770      	bx	lr

1a000a74 <_read_r>:
1a000a74:	2902      	cmp	r1, #2
1a000a76:	d81f      	bhi.n	1a000ab8 <_read_r+0x44>
1a000a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000a7c:	461d      	mov	r5, r3
1a000a7e:	4617      	mov	r7, r2
1a000a80:	4606      	mov	r6, r0
1a000a82:	2400      	movs	r4, #0
1a000a84:	42ac      	cmp	r4, r5
1a000a86:	d211      	bcs.n	1a000aac <_read_r+0x38>
1a000a88:	f000 f987 	bl	1a000d9a <__stdio_getchar>
1a000a8c:	f1b0 3fff 	cmp.w	r0, #4294967295
1a000a90:	d0f8      	beq.n	1a000a84 <_read_r+0x10>
1a000a92:	f104 0801 	add.w	r8, r4, #1
1a000a96:	5538      	strb	r0, [r7, r4]
1a000a98:	280d      	cmp	r0, #13
1a000a9a:	d003      	beq.n	1a000aa4 <_read_r+0x30>
1a000a9c:	280a      	cmp	r0, #10
1a000a9e:	d001      	beq.n	1a000aa4 <_read_r+0x30>
1a000aa0:	4644      	mov	r4, r8
1a000aa2:	e7ef      	b.n	1a000a84 <_read_r+0x10>
1a000aa4:	f000 f979 	bl	1a000d9a <__stdio_getchar>
1a000aa8:	4640      	mov	r0, r8
1a000aaa:	e003      	b.n	1a000ab4 <_read_r+0x40>
1a000aac:	2313      	movs	r3, #19
1a000aae:	6033      	str	r3, [r6, #0]
1a000ab0:	f04f 30ff 	mov.w	r0, #4294967295
1a000ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a000ab8:	2313      	movs	r3, #19
1a000aba:	6003      	str	r3, [r0, #0]
1a000abc:	f04f 30ff 	mov.w	r0, #4294967295
1a000ac0:	4770      	bx	lr

1a000ac2 <_write_r>:
1a000ac2:	2902      	cmp	r1, #2
1a000ac4:	d80c      	bhi.n	1a000ae0 <_write_r+0x1e>
1a000ac6:	b570      	push	{r4, r5, r6, lr}
1a000ac8:	461d      	mov	r5, r3
1a000aca:	4616      	mov	r6, r2
1a000acc:	2400      	movs	r4, #0
1a000ace:	42ac      	cmp	r4, r5
1a000ad0:	d204      	bcs.n	1a000adc <_write_r+0x1a>
1a000ad2:	5d30      	ldrb	r0, [r6, r4]
1a000ad4:	f000 f95c 	bl	1a000d90 <__stdio_putchar>
1a000ad8:	3401      	adds	r4, #1
1a000ada:	e7f8      	b.n	1a000ace <_write_r+0xc>
1a000adc:	4628      	mov	r0, r5
1a000ade:	bd70      	pop	{r4, r5, r6, pc}
1a000ae0:	2313      	movs	r3, #19
1a000ae2:	6003      	str	r3, [r0, #0]
1a000ae4:	f04f 30ff 	mov.w	r0, #4294967295
1a000ae8:	4770      	bx	lr
1a000aea:	Address 0x1a000aea is out of bounds.


1a000aec <_sbrk_r>:
1a000aec:	4b05      	ldr	r3, [pc, #20]	; (1a000b04 <_sbrk_r+0x18>)
1a000aee:	681b      	ldr	r3, [r3, #0]
1a000af0:	b123      	cbz	r3, 1a000afc <_sbrk_r+0x10>
1a000af2:	4b04      	ldr	r3, [pc, #16]	; (1a000b04 <_sbrk_r+0x18>)
1a000af4:	6818      	ldr	r0, [r3, #0]
1a000af6:	4401      	add	r1, r0
1a000af8:	6019      	str	r1, [r3, #0]
1a000afa:	4770      	bx	lr
1a000afc:	4b01      	ldr	r3, [pc, #4]	; (1a000b04 <_sbrk_r+0x18>)
1a000afe:	4a02      	ldr	r2, [pc, #8]	; (1a000b08 <_sbrk_r+0x1c>)
1a000b00:	601a      	str	r2, [r3, #0]
1a000b02:	e7f6      	b.n	1a000af2 <_sbrk_r+0x6>
1a000b04:	1000011c 	.word	0x1000011c
1a000b08:	100001a0 	.word	0x100001a0

1a000b0c <Board_SetupMuxing>:
1a000b0c:	2300      	movs	r3, #0
1a000b0e:	2b1c      	cmp	r3, #28
1a000b10:	d812      	bhi.n	1a000b38 <Board_SetupMuxing+0x2c>
1a000b12:	b410      	push	{r4}
1a000b14:	4a09      	ldr	r2, [pc, #36]	; (1a000b3c <Board_SetupMuxing+0x30>)
1a000b16:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a000b1a:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a000b1e:	784a      	ldrb	r2, [r1, #1]
1a000b20:	8848      	ldrh	r0, [r1, #2]
1a000b22:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a000b26:	4906      	ldr	r1, [pc, #24]	; (1a000b40 <Board_SetupMuxing+0x34>)
1a000b28:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
1a000b2c:	3301      	adds	r3, #1
1a000b2e:	2b1c      	cmp	r3, #28
1a000b30:	d9f0      	bls.n	1a000b14 <Board_SetupMuxing+0x8>
1a000b32:	f85d 4b04 	ldr.w	r4, [sp], #4
1a000b36:	4770      	bx	lr
1a000b38:	4770      	bx	lr
1a000b3a:	bf00      	nop
1a000b3c:	1a00374c 	.word	0x1a00374c
1a000b40:	40086000 	.word	0x40086000

1a000b44 <Board_SetupClocking>:
1a000b44:	b510      	push	{r4, lr}
1a000b46:	4a17      	ldr	r2, [pc, #92]	; (1a000ba4 <Board_SetupClocking+0x60>)
1a000b48:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a000b4c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a000b50:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000b54:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
1a000b58:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a000b5c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a000b60:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000b64:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
1a000b68:	2201      	movs	r2, #1
1a000b6a:	490f      	ldr	r1, [pc, #60]	; (1a000ba8 <Board_SetupClocking+0x64>)
1a000b6c:	2006      	movs	r0, #6
1a000b6e:	f000 fa9d 	bl	1a0010ac <Chip_SetupCoreClock>
1a000b72:	2400      	movs	r4, #0
1a000b74:	b14c      	cbz	r4, 1a000b8a <Board_SetupClocking+0x46>
1a000b76:	4b0b      	ldr	r3, [pc, #44]	; (1a000ba4 <Board_SetupClocking+0x60>)
1a000b78:	685a      	ldr	r2, [r3, #4]
1a000b7a:	f022 020c 	bic.w	r2, r2, #12
1a000b7e:	605a      	str	r2, [r3, #4]
1a000b80:	685a      	ldr	r2, [r3, #4]
1a000b82:	f042 0203 	orr.w	r2, r2, #3
1a000b86:	605a      	str	r2, [r3, #4]
1a000b88:	bd10      	pop	{r4, pc}
1a000b8a:	4808      	ldr	r0, [pc, #32]	; (1a000bac <Board_SetupClocking+0x68>)
1a000b8c:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a000b90:	2301      	movs	r3, #1
1a000b92:	788a      	ldrb	r2, [r1, #2]
1a000b94:	7849      	ldrb	r1, [r1, #1]
1a000b96:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a000b9a:	f000 fd93 	bl	1a0016c4 <Chip_Clock_SetBaseClock>
1a000b9e:	3401      	adds	r4, #1
1a000ba0:	e7e8      	b.n	1a000b74 <Board_SetupClocking+0x30>
1a000ba2:	bf00      	nop
1a000ba4:	40043000 	.word	0x40043000
1a000ba8:	0c28cb00 	.word	0x0c28cb00
1a000bac:	1a003748 	.word	0x1a003748

1a000bb0 <Board_SystemInit>:
1a000bb0:	b508      	push	{r3, lr}
1a000bb2:	f7ff ffab 	bl	1a000b0c <Board_SetupMuxing>
1a000bb6:	f7ff ffc5 	bl	1a000b44 <Board_SetupClocking>
1a000bba:	bd08      	pop	{r3, pc}

1a000bbc <Board_LED_Init>:
1a000bbc:	2200      	movs	r2, #0
1a000bbe:	2a05      	cmp	r2, #5
1a000bc0:	d819      	bhi.n	1a000bf6 <Board_LED_Init+0x3a>
1a000bc2:	b470      	push	{r4, r5, r6}
1a000bc4:	490c      	ldr	r1, [pc, #48]	; (1a000bf8 <Board_LED_Init+0x3c>)
1a000bc6:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a000bca:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a000bce:	784c      	ldrb	r4, [r1, #1]
1a000bd0:	4b0a      	ldr	r3, [pc, #40]	; (1a000bfc <Board_LED_Init+0x40>)
1a000bd2:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a000bd6:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a000bda:	2001      	movs	r0, #1
1a000bdc:	40a0      	lsls	r0, r4
1a000bde:	4301      	orrs	r1, r0
1a000be0:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
1a000be4:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a000be8:	2100      	movs	r1, #0
1a000bea:	5519      	strb	r1, [r3, r4]
1a000bec:	3201      	adds	r2, #1
1a000bee:	2a05      	cmp	r2, #5
1a000bf0:	d9e8      	bls.n	1a000bc4 <Board_LED_Init+0x8>
1a000bf2:	bc70      	pop	{r4, r5, r6}
1a000bf4:	4770      	bx	lr
1a000bf6:	4770      	bx	lr
1a000bf8:	1a0037cc 	.word	0x1a0037cc
1a000bfc:	400f4000 	.word	0x400f4000

1a000c00 <Board_TEC_Init>:
1a000c00:	2300      	movs	r3, #0
1a000c02:	2b03      	cmp	r3, #3
1a000c04:	d816      	bhi.n	1a000c34 <Board_TEC_Init+0x34>
1a000c06:	b430      	push	{r4, r5}
1a000c08:	490b      	ldr	r1, [pc, #44]	; (1a000c38 <Board_TEC_Init+0x38>)
1a000c0a:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a000c0e:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a000c12:	784d      	ldrb	r5, [r1, #1]
1a000c14:	4c09      	ldr	r4, [pc, #36]	; (1a000c3c <Board_TEC_Init+0x3c>)
1a000c16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a000c1a:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a000c1e:	2001      	movs	r0, #1
1a000c20:	40a8      	lsls	r0, r5
1a000c22:	ea21 0100 	bic.w	r1, r1, r0
1a000c26:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
1a000c2a:	3301      	adds	r3, #1
1a000c2c:	2b03      	cmp	r3, #3
1a000c2e:	d9eb      	bls.n	1a000c08 <Board_TEC_Init+0x8>
1a000c30:	bc30      	pop	{r4, r5}
1a000c32:	4770      	bx	lr
1a000c34:	4770      	bx	lr
1a000c36:	bf00      	nop
1a000c38:	1a0037c4 	.word	0x1a0037c4
1a000c3c:	400f4000 	.word	0x400f4000

1a000c40 <Board_GPIO_Init>:
1a000c40:	2300      	movs	r3, #0
1a000c42:	2b08      	cmp	r3, #8
1a000c44:	d816      	bhi.n	1a000c74 <Board_GPIO_Init+0x34>
1a000c46:	b430      	push	{r4, r5}
1a000c48:	490b      	ldr	r1, [pc, #44]	; (1a000c78 <Board_GPIO_Init+0x38>)
1a000c4a:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a000c4e:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a000c52:	784d      	ldrb	r5, [r1, #1]
1a000c54:	4c09      	ldr	r4, [pc, #36]	; (1a000c7c <Board_GPIO_Init+0x3c>)
1a000c56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a000c5a:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a000c5e:	2001      	movs	r0, #1
1a000c60:	40a8      	lsls	r0, r5
1a000c62:	ea21 0100 	bic.w	r1, r1, r0
1a000c66:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
1a000c6a:	3301      	adds	r3, #1
1a000c6c:	2b08      	cmp	r3, #8
1a000c6e:	d9eb      	bls.n	1a000c48 <Board_GPIO_Init+0x8>
1a000c70:	bc30      	pop	{r4, r5}
1a000c72:	4770      	bx	lr
1a000c74:	4770      	bx	lr
1a000c76:	bf00      	nop
1a000c78:	1a0037d8 	.word	0x1a0037d8
1a000c7c:	400f4000 	.word	0x400f4000

1a000c80 <Board_ADC_Init>:
1a000c80:	b510      	push	{r4, lr}
1a000c82:	b082      	sub	sp, #8
1a000c84:	4c08      	ldr	r4, [pc, #32]	; (1a000ca8 <Board_ADC_Init+0x28>)
1a000c86:	4669      	mov	r1, sp
1a000c88:	4620      	mov	r0, r4
1a000c8a:	f000 f95f 	bl	1a000f4c <Chip_ADC_Init>
1a000c8e:	4a07      	ldr	r2, [pc, #28]	; (1a000cac <Board_ADC_Init+0x2c>)
1a000c90:	4669      	mov	r1, sp
1a000c92:	4620      	mov	r0, r4
1a000c94:	f000 f9c5 	bl	1a001022 <Chip_ADC_SetSampleRate>
1a000c98:	2200      	movs	r2, #0
1a000c9a:	4669      	mov	r1, sp
1a000c9c:	4620      	mov	r0, r4
1a000c9e:	f000 f9d9 	bl	1a001054 <Chip_ADC_SetResolution>
1a000ca2:	b002      	add	sp, #8
1a000ca4:	bd10      	pop	{r4, pc}
1a000ca6:	bf00      	nop
1a000ca8:	400e3000 	.word	0x400e3000
1a000cac:	00061a80 	.word	0x00061a80

1a000cb0 <Board_SPI_Init>:
1a000cb0:	b510      	push	{r4, lr}
1a000cb2:	4c0b      	ldr	r4, [pc, #44]	; (1a000ce0 <Board_SPI_Init+0x30>)
1a000cb4:	4620      	mov	r0, r4
1a000cb6:	f000 f8b7 	bl	1a000e28 <Chip_SSP_Init>
1a000cba:	6863      	ldr	r3, [r4, #4]
1a000cbc:	f023 0304 	bic.w	r3, r3, #4
1a000cc0:	6063      	str	r3, [r4, #4]
1a000cc2:	6823      	ldr	r3, [r4, #0]
1a000cc4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a000cc8:	f043 0307 	orr.w	r3, r3, #7
1a000ccc:	6023      	str	r3, [r4, #0]
1a000cce:	4905      	ldr	r1, [pc, #20]	; (1a000ce4 <Board_SPI_Init+0x34>)
1a000cd0:	4620      	mov	r0, r4
1a000cd2:	f000 f88a 	bl	1a000dea <Chip_SSP_SetBitRate>
1a000cd6:	6863      	ldr	r3, [r4, #4]
1a000cd8:	f043 0302 	orr.w	r3, r3, #2
1a000cdc:	6063      	str	r3, [r4, #4]
1a000cde:	bd10      	pop	{r4, pc}
1a000ce0:	400c5000 	.word	0x400c5000
1a000ce4:	000186a0 	.word	0x000186a0

1a000ce8 <Board_I2C_Init>:
1a000ce8:	b508      	push	{r3, lr}
1a000cea:	2000      	movs	r0, #0
1a000cec:	f000 f8c8 	bl	1a000e80 <Chip_I2C_Init>
1a000cf0:	4b04      	ldr	r3, [pc, #16]	; (1a000d04 <Board_I2C_Init+0x1c>)
1a000cf2:	f640 0208 	movw	r2, #2056	; 0x808
1a000cf6:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
1a000cfa:	4903      	ldr	r1, [pc, #12]	; (1a000d08 <Board_I2C_Init+0x20>)
1a000cfc:	2000      	movs	r0, #0
1a000cfe:	f000 f8d1 	bl	1a000ea4 <Chip_I2C_SetClockRate>
1a000d02:	bd08      	pop	{r3, pc}
1a000d04:	40086000 	.word	0x40086000
1a000d08:	000f4240 	.word	0x000f4240

1a000d0c <Board_Debug_Init>:
1a000d0c:	b510      	push	{r4, lr}
1a000d0e:	4c07      	ldr	r4, [pc, #28]	; (1a000d2c <Board_Debug_Init+0x20>)
1a000d10:	4620      	mov	r0, r4
1a000d12:	f000 fde9 	bl	1a0018e8 <Chip_UART_Init>
1a000d16:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a000d1a:	4620      	mov	r0, r4
1a000d1c:	f000 fe42 	bl	1a0019a4 <Chip_UART_SetBaudFDR>
1a000d20:	2303      	movs	r3, #3
1a000d22:	60e3      	str	r3, [r4, #12]
1a000d24:	2301      	movs	r3, #1
1a000d26:	65e3      	str	r3, [r4, #92]	; 0x5c
1a000d28:	bd10      	pop	{r4, pc}
1a000d2a:	bf00      	nop
1a000d2c:	400c1000 	.word	0x400c1000

1a000d30 <Board_UARTPutChar>:
1a000d30:	4b03      	ldr	r3, [pc, #12]	; (1a000d40 <Board_UARTPutChar+0x10>)
1a000d32:	695b      	ldr	r3, [r3, #20]
1a000d34:	f013 0f20 	tst.w	r3, #32
1a000d38:	d0fa      	beq.n	1a000d30 <Board_UARTPutChar>
1a000d3a:	4b01      	ldr	r3, [pc, #4]	; (1a000d40 <Board_UARTPutChar+0x10>)
1a000d3c:	6018      	str	r0, [r3, #0]
1a000d3e:	4770      	bx	lr
1a000d40:	400c1000 	.word	0x400c1000

1a000d44 <Board_UARTGetChar>:
1a000d44:	4b05      	ldr	r3, [pc, #20]	; (1a000d5c <Board_UARTGetChar+0x18>)
1a000d46:	695b      	ldr	r3, [r3, #20]
1a000d48:	f013 0f01 	tst.w	r3, #1
1a000d4c:	d003      	beq.n	1a000d56 <Board_UARTGetChar+0x12>
1a000d4e:	4b03      	ldr	r3, [pc, #12]	; (1a000d5c <Board_UARTGetChar+0x18>)
1a000d50:	6818      	ldr	r0, [r3, #0]
1a000d52:	b2c0      	uxtb	r0, r0
1a000d54:	4770      	bx	lr
1a000d56:	f04f 30ff 	mov.w	r0, #4294967295
1a000d5a:	4770      	bx	lr
1a000d5c:	400c1000 	.word	0x400c1000

1a000d60 <Board_Init>:
1a000d60:	b508      	push	{r3, lr}
1a000d62:	f7ff ffd3 	bl	1a000d0c <Board_Debug_Init>
1a000d66:	4809      	ldr	r0, [pc, #36]	; (1a000d8c <Board_Init+0x2c>)
1a000d68:	f000 f8b8 	bl	1a000edc <Chip_GPIO_Init>
1a000d6c:	f7ff ff68 	bl	1a000c40 <Board_GPIO_Init>
1a000d70:	f7ff ff86 	bl	1a000c80 <Board_ADC_Init>
1a000d74:	f7ff ff9c 	bl	1a000cb0 <Board_SPI_Init>
1a000d78:	f7ff ffb6 	bl	1a000ce8 <Board_I2C_Init>
1a000d7c:	f7ff ff1e 	bl	1a000bbc <Board_LED_Init>
1a000d80:	f7ff ff3e 	bl	1a000c00 <Board_TEC_Init>
1a000d84:	f000 fa72 	bl	1a00126c <SystemCoreClockUpdate>
1a000d88:	bd08      	pop	{r3, pc}
1a000d8a:	bf00      	nop
1a000d8c:	400f4000 	.word	0x400f4000

1a000d90 <__stdio_putchar>:
1a000d90:	b508      	push	{r3, lr}
1a000d92:	b2c0      	uxtb	r0, r0
1a000d94:	f7ff ffcc 	bl	1a000d30 <Board_UARTPutChar>
1a000d98:	bd08      	pop	{r3, pc}

1a000d9a <__stdio_getchar>:
1a000d9a:	b508      	push	{r3, lr}
1a000d9c:	f7ff ffd2 	bl	1a000d44 <Board_UARTGetChar>
1a000da0:	bd08      	pop	{r3, pc}

1a000da2 <__stdio_init>:
1a000da2:	b508      	push	{r3, lr}
1a000da4:	f7ff ffb2 	bl	1a000d0c <Board_Debug_Init>
1a000da8:	bd08      	pop	{r3, pc}
1a000daa:	Address 0x1a000daa is out of bounds.


1a000dac <Chip_SSP_GetClockIndex>:
1a000dac:	4b03      	ldr	r3, [pc, #12]	; (1a000dbc <Chip_SSP_GetClockIndex+0x10>)
1a000dae:	4298      	cmp	r0, r3
1a000db0:	d001      	beq.n	1a000db6 <Chip_SSP_GetClockIndex+0xa>
1a000db2:	2083      	movs	r0, #131	; 0x83
1a000db4:	4770      	bx	lr
1a000db6:	20a5      	movs	r0, #165	; 0xa5
1a000db8:	4770      	bx	lr
1a000dba:	bf00      	nop
1a000dbc:	400c5000 	.word	0x400c5000

1a000dc0 <Chip_SSP_GetPeriphClockIndex>:
1a000dc0:	4b04      	ldr	r3, [pc, #16]	; (1a000dd4 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a000dc2:	4298      	cmp	r0, r3
1a000dc4:	d002      	beq.n	1a000dcc <Chip_SSP_GetPeriphClockIndex+0xc>
1a000dc6:	f240 2002 	movw	r0, #514	; 0x202
1a000dca:	4770      	bx	lr
1a000dcc:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a000dd0:	4770      	bx	lr
1a000dd2:	bf00      	nop
1a000dd4:	400c5000 	.word	0x400c5000

1a000dd8 <Chip_SSP_SetClockRate>:
1a000dd8:	6803      	ldr	r3, [r0, #0]
1a000dda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
1a000dde:	0209      	lsls	r1, r1, #8
1a000de0:	b289      	uxth	r1, r1
1a000de2:	4319      	orrs	r1, r3
1a000de4:	6001      	str	r1, [r0, #0]
1a000de6:	6102      	str	r2, [r0, #16]
1a000de8:	4770      	bx	lr

1a000dea <Chip_SSP_SetBitRate>:
1a000dea:	b570      	push	{r4, r5, r6, lr}
1a000dec:	4606      	mov	r6, r0
1a000dee:	460d      	mov	r5, r1
1a000df0:	f7ff ffe6 	bl	1a000dc0 <Chip_SSP_GetPeriphClockIndex>
1a000df4:	f000 fd0a 	bl	1a00180c <Chip_Clock_GetRate>
1a000df8:	2202      	movs	r2, #2
1a000dfa:	f04f 33ff 	mov.w	r3, #4294967295
1a000dfe:	2100      	movs	r1, #0
1a000e00:	e000      	b.n	1a000e04 <Chip_SSP_SetBitRate+0x1a>
1a000e02:	4621      	mov	r1, r4
1a000e04:	42ab      	cmp	r3, r5
1a000e06:	d90b      	bls.n	1a000e20 <Chip_SSP_SetBitRate+0x36>
1a000e08:	1c4c      	adds	r4, r1, #1
1a000e0a:	fb02 f304 	mul.w	r3, r2, r4
1a000e0e:	fbb0 f3f3 	udiv	r3, r0, r3
1a000e12:	429d      	cmp	r5, r3
1a000e14:	d2f6      	bcs.n	1a000e04 <Chip_SSP_SetBitRate+0x1a>
1a000e16:	2cff      	cmp	r4, #255	; 0xff
1a000e18:	d9f3      	bls.n	1a000e02 <Chip_SSP_SetBitRate+0x18>
1a000e1a:	3202      	adds	r2, #2
1a000e1c:	2100      	movs	r1, #0
1a000e1e:	e7f1      	b.n	1a000e04 <Chip_SSP_SetBitRate+0x1a>
1a000e20:	4630      	mov	r0, r6
1a000e22:	f7ff ffd9 	bl	1a000dd8 <Chip_SSP_SetClockRate>
1a000e26:	bd70      	pop	{r4, r5, r6, pc}

1a000e28 <Chip_SSP_Init>:
1a000e28:	b510      	push	{r4, lr}
1a000e2a:	4604      	mov	r4, r0
1a000e2c:	f7ff ffbe 	bl	1a000dac <Chip_SSP_GetClockIndex>
1a000e30:	f000 fcb8 	bl	1a0017a4 <Chip_Clock_Enable>
1a000e34:	4620      	mov	r0, r4
1a000e36:	f7ff ffc3 	bl	1a000dc0 <Chip_SSP_GetPeriphClockIndex>
1a000e3a:	f000 fcb3 	bl	1a0017a4 <Chip_Clock_Enable>
1a000e3e:	6863      	ldr	r3, [r4, #4]
1a000e40:	f023 0304 	bic.w	r3, r3, #4
1a000e44:	6063      	str	r3, [r4, #4]
1a000e46:	6823      	ldr	r3, [r4, #0]
1a000e48:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a000e4c:	f043 0307 	orr.w	r3, r3, #7
1a000e50:	6023      	str	r3, [r4, #0]
1a000e52:	4902      	ldr	r1, [pc, #8]	; (1a000e5c <Chip_SSP_Init+0x34>)
1a000e54:	4620      	mov	r0, r4
1a000e56:	f7ff ffc8 	bl	1a000dea <Chip_SSP_SetBitRate>
1a000e5a:	bd10      	pop	{r4, pc}
1a000e5c:	000186a0 	.word	0x000186a0

1a000e60 <Chip_I2C_EventHandler>:
1a000e60:	2901      	cmp	r1, #1
1a000e62:	d109      	bne.n	1a000e78 <Chip_I2C_EventHandler+0x18>
1a000e64:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a000e68:	0082      	lsls	r2, r0, #2
1a000e6a:	4b04      	ldr	r3, [pc, #16]	; (1a000e7c <Chip_I2C_EventHandler+0x1c>)
1a000e6c:	4413      	add	r3, r2
1a000e6e:	691a      	ldr	r2, [r3, #16]
1a000e70:	7d13      	ldrb	r3, [r2, #20]
1a000e72:	b2db      	uxtb	r3, r3
1a000e74:	2b04      	cmp	r3, #4
1a000e76:	d0fb      	beq.n	1a000e70 <Chip_I2C_EventHandler+0x10>
1a000e78:	4770      	bx	lr
1a000e7a:	bf00      	nop
1a000e7c:	10000048 	.word	0x10000048

1a000e80 <Chip_I2C_Init>:
1a000e80:	b570      	push	{r4, r5, r6, lr}
1a000e82:	4605      	mov	r5, r0
1a000e84:	4e06      	ldr	r6, [pc, #24]	; (1a000ea0 <Chip_I2C_Init+0x20>)
1a000e86:	00c4      	lsls	r4, r0, #3
1a000e88:	1a22      	subs	r2, r4, r0
1a000e8a:	0093      	lsls	r3, r2, #2
1a000e8c:	4433      	add	r3, r6
1a000e8e:	8898      	ldrh	r0, [r3, #4]
1a000e90:	f000 fc88 	bl	1a0017a4 <Chip_Clock_Enable>
1a000e94:	1b64      	subs	r4, r4, r5
1a000e96:	00a3      	lsls	r3, r4, #2
1a000e98:	58f3      	ldr	r3, [r6, r3]
1a000e9a:	226c      	movs	r2, #108	; 0x6c
1a000e9c:	619a      	str	r2, [r3, #24]
1a000e9e:	bd70      	pop	{r4, r5, r6, pc}
1a000ea0:	10000048 	.word	0x10000048

1a000ea4 <Chip_I2C_SetClockRate>:
1a000ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000ea8:	460c      	mov	r4, r1
1a000eaa:	4e0b      	ldr	r6, [pc, #44]	; (1a000ed8 <Chip_I2C_SetClockRate+0x34>)
1a000eac:	00c5      	lsls	r5, r0, #3
1a000eae:	1a2b      	subs	r3, r5, r0
1a000eb0:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a000eb4:	eb06 0308 	add.w	r3, r6, r8
1a000eb8:	8898      	ldrh	r0, [r3, #4]
1a000eba:	f000 fca7 	bl	1a00180c <Chip_Clock_GetRate>
1a000ebe:	fbb0 f0f4 	udiv	r0, r0, r4
1a000ec2:	f856 3008 	ldr.w	r3, [r6, r8]
1a000ec6:	0842      	lsrs	r2, r0, #1
1a000ec8:	611a      	str	r2, [r3, #16]
1a000eca:	f856 3008 	ldr.w	r3, [r6, r8]
1a000ece:	691a      	ldr	r2, [r3, #16]
1a000ed0:	1a80      	subs	r0, r0, r2
1a000ed2:	6158      	str	r0, [r3, #20]
1a000ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a000ed8:	10000048 	.word	0x10000048

1a000edc <Chip_GPIO_Init>:
1a000edc:	4770      	bx	lr
1a000ede:	Address 0x1a000ede is out of bounds.


1a000ee0 <Chip_ADC_GetClockIndex>:
1a000ee0:	4b03      	ldr	r3, [pc, #12]	; (1a000ef0 <Chip_ADC_GetClockIndex+0x10>)
1a000ee2:	4298      	cmp	r0, r3
1a000ee4:	d001      	beq.n	1a000eea <Chip_ADC_GetClockIndex+0xa>
1a000ee6:	2003      	movs	r0, #3
1a000ee8:	4770      	bx	lr
1a000eea:	2004      	movs	r0, #4
1a000eec:	4770      	bx	lr
1a000eee:	bf00      	nop
1a000ef0:	400e4000 	.word	0x400e4000

1a000ef4 <getClkDiv>:
1a000ef4:	b570      	push	{r4, r5, r6, lr}
1a000ef6:	460d      	mov	r5, r1
1a000ef8:	4614      	mov	r4, r2
1a000efa:	461e      	mov	r6, r3
1a000efc:	f7ff fff0 	bl	1a000ee0 <Chip_ADC_GetClockIndex>
1a000f00:	f000 fc84 	bl	1a00180c <Chip_Clock_GetRate>
1a000f04:	b155      	cbz	r5, 1a000f1c <getClkDiv+0x28>
1a000f06:	fb04 f406 	mul.w	r4, r4, r6
1a000f0a:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a000f0e:	0064      	lsls	r4, r4, #1
1a000f10:	fbb0 f0f4 	udiv	r0, r0, r4
1a000f14:	b2c0      	uxtb	r0, r0
1a000f16:	3801      	subs	r0, #1
1a000f18:	b2c0      	uxtb	r0, r0
1a000f1a:	bd70      	pop	{r4, r5, r6, pc}
1a000f1c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a000f20:	eb04 0443 	add.w	r4, r4, r3, lsl #1
1a000f24:	e7f1      	b.n	1a000f0a <getClkDiv+0x16>

1a000f26 <setStartMode>:
1a000f26:	6803      	ldr	r3, [r0, #0]
1a000f28:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
1a000f2c:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
1a000f30:	6001      	str	r1, [r0, #0]
1a000f32:	4770      	bx	lr

1a000f34 <readAdcVal>:
1a000f34:	3104      	adds	r1, #4
1a000f36:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
1a000f3a:	2b00      	cmp	r3, #0
1a000f3c:	da04      	bge.n	1a000f48 <readAdcVal+0x14>
1a000f3e:	f3c3 1389 	ubfx	r3, r3, #6, #10
1a000f42:	8013      	strh	r3, [r2, #0]
1a000f44:	2001      	movs	r0, #1
1a000f46:	4770      	bx	lr
1a000f48:	2000      	movs	r0, #0
1a000f4a:	4770      	bx	lr

1a000f4c <Chip_ADC_Init>:
1a000f4c:	b538      	push	{r3, r4, r5, lr}
1a000f4e:	4605      	mov	r5, r0
1a000f50:	460c      	mov	r4, r1
1a000f52:	f7ff ffc5 	bl	1a000ee0 <Chip_ADC_GetClockIndex>
1a000f56:	2301      	movs	r3, #1
1a000f58:	461a      	mov	r2, r3
1a000f5a:	4619      	mov	r1, r3
1a000f5c:	f000 fc04 	bl	1a001768 <Chip_Clock_EnableOpts>
1a000f60:	2100      	movs	r1, #0
1a000f62:	60e9      	str	r1, [r5, #12]
1a000f64:	4a08      	ldr	r2, [pc, #32]	; (1a000f88 <Chip_ADC_Init+0x3c>)
1a000f66:	6022      	str	r2, [r4, #0]
1a000f68:	7121      	strb	r1, [r4, #4]
1a000f6a:	7161      	strb	r1, [r4, #5]
1a000f6c:	230b      	movs	r3, #11
1a000f6e:	4628      	mov	r0, r5
1a000f70:	f7ff ffc0 	bl	1a000ef4 <getClkDiv>
1a000f74:	0200      	lsls	r0, r0, #8
1a000f76:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
1a000f7a:	7920      	ldrb	r0, [r4, #4]
1a000f7c:	0440      	lsls	r0, r0, #17
1a000f7e:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a000f82:	4318      	orrs	r0, r3
1a000f84:	6028      	str	r0, [r5, #0]
1a000f86:	bd38      	pop	{r3, r4, r5, pc}
1a000f88:	00061a80 	.word	0x00061a80

1a000f8c <Chip_ADC_DeInit>:
1a000f8c:	b508      	push	{r3, lr}
1a000f8e:	f44f 7280 	mov.w	r2, #256	; 0x100
1a000f92:	60c2      	str	r2, [r0, #12]
1a000f94:	2200      	movs	r2, #0
1a000f96:	6002      	str	r2, [r0, #0]
1a000f98:	f7ff ffa2 	bl	1a000ee0 <Chip_ADC_GetClockIndex>
1a000f9c:	f000 fc1c 	bl	1a0017d8 <Chip_Clock_Disable>
1a000fa0:	bd08      	pop	{r3, pc}

1a000fa2 <Chip_ADC_ReadValue>:
1a000fa2:	b508      	push	{r3, lr}
1a000fa4:	f7ff ffc6 	bl	1a000f34 <readAdcVal>
1a000fa8:	bd08      	pop	{r3, pc}

1a000faa <Chip_ADC_ReadStatus>:
1a000faa:	2a01      	cmp	r2, #1
1a000fac:	d00a      	beq.n	1a000fc4 <Chip_ADC_ReadStatus+0x1a>
1a000fae:	b11a      	cbz	r2, 1a000fb8 <Chip_ADC_ReadStatus+0xe>
1a000fb0:	2a02      	cmp	r2, #2
1a000fb2:	d00f      	beq.n	1a000fd4 <Chip_ADC_ReadStatus+0x2a>
1a000fb4:	2000      	movs	r0, #0
1a000fb6:	4770      	bx	lr
1a000fb8:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a000fba:	40c8      	lsrs	r0, r1
1a000fbc:	f000 0001 	and.w	r0, r0, #1
1a000fc0:	b2c0      	uxtb	r0, r0
1a000fc2:	4770      	bx	lr
1a000fc4:	3108      	adds	r1, #8
1a000fc6:	b2c9      	uxtb	r1, r1
1a000fc8:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a000fca:	40c8      	lsrs	r0, r1
1a000fcc:	f000 0001 	and.w	r0, r0, #1
1a000fd0:	b2c0      	uxtb	r0, r0
1a000fd2:	4770      	bx	lr
1a000fd4:	6b03      	ldr	r3, [r0, #48]	; 0x30
1a000fd6:	0c1b      	lsrs	r3, r3, #16
1a000fd8:	bf14      	ite	ne
1a000fda:	2001      	movne	r0, #1
1a000fdc:	2000      	moveq	r0, #0
1a000fde:	4770      	bx	lr

1a000fe0 <Chip_ADC_Int_SetChannelCmd>:
1a000fe0:	2a01      	cmp	r2, #1
1a000fe2:	d006      	beq.n	1a000ff2 <Chip_ADC_Int_SetChannelCmd+0x12>
1a000fe4:	68c3      	ldr	r3, [r0, #12]
1a000fe6:	2201      	movs	r2, #1
1a000fe8:	408a      	lsls	r2, r1
1a000fea:	ea23 0302 	bic.w	r3, r3, r2
1a000fee:	60c3      	str	r3, [r0, #12]
1a000ff0:	4770      	bx	lr
1a000ff2:	b410      	push	{r4}
1a000ff4:	68c4      	ldr	r4, [r0, #12]
1a000ff6:	408a      	lsls	r2, r1
1a000ff8:	4314      	orrs	r4, r2
1a000ffa:	60c4      	str	r4, [r0, #12]
1a000ffc:	f85d 4b04 	ldr.w	r4, [sp], #4
1a001000:	4770      	bx	lr

1a001002 <Chip_ADC_SetStartMode>:
1a001002:	b508      	push	{r3, lr}
1a001004:	2901      	cmp	r1, #1
1a001006:	d904      	bls.n	1a001012 <Chip_ADC_SetStartMode+0x10>
1a001008:	b132      	cbz	r2, 1a001018 <Chip_ADC_SetStartMode+0x16>
1a00100a:	6803      	ldr	r3, [r0, #0]
1a00100c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
1a001010:	6003      	str	r3, [r0, #0]
1a001012:	f7ff ff88 	bl	1a000f26 <setStartMode>
1a001016:	bd08      	pop	{r3, pc}
1a001018:	6803      	ldr	r3, [r0, #0]
1a00101a:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
1a00101e:	6003      	str	r3, [r0, #0]
1a001020:	e7f7      	b.n	1a001012 <Chip_ADC_SetStartMode+0x10>

1a001022 <Chip_ADC_SetSampleRate>:
1a001022:	b570      	push	{r4, r5, r6, lr}
1a001024:	4605      	mov	r5, r0
1a001026:	460e      	mov	r6, r1
1a001028:	6804      	ldr	r4, [r0, #0]
1a00102a:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a00102e:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
1a001032:	600a      	str	r2, [r1, #0]
1a001034:	790b      	ldrb	r3, [r1, #4]
1a001036:	f1c3 030b 	rsb	r3, r3, #11
1a00103a:	b2db      	uxtb	r3, r3
1a00103c:	7949      	ldrb	r1, [r1, #5]
1a00103e:	f7ff ff59 	bl	1a000ef4 <getClkDiv>
1a001042:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
1a001046:	7933      	ldrb	r3, [r6, #4]
1a001048:	045b      	lsls	r3, r3, #17
1a00104a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
1a00104e:	4303      	orrs	r3, r0
1a001050:	602b      	str	r3, [r5, #0]
1a001052:	bd70      	pop	{r4, r5, r6, pc}

1a001054 <Chip_ADC_SetResolution>:
1a001054:	b508      	push	{r3, lr}
1a001056:	710a      	strb	r2, [r1, #4]
1a001058:	680a      	ldr	r2, [r1, #0]
1a00105a:	f7ff ffe2 	bl	1a001022 <Chip_ADC_SetSampleRate>
1a00105e:	bd08      	pop	{r3, pc}

1a001060 <Chip_ADC_EnableChannel>:
1a001060:	2a01      	cmp	r2, #1
1a001062:	d00a      	beq.n	1a00107a <Chip_ADC_EnableChannel+0x1a>
1a001064:	6802      	ldr	r2, [r0, #0]
1a001066:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
1a00106a:	6002      	str	r2, [r0, #0]
1a00106c:	6803      	ldr	r3, [r0, #0]
1a00106e:	2201      	movs	r2, #1
1a001070:	408a      	lsls	r2, r1
1a001072:	ea23 0302 	bic.w	r3, r3, r2
1a001076:	6003      	str	r3, [r0, #0]
1a001078:	4770      	bx	lr
1a00107a:	b410      	push	{r4}
1a00107c:	6804      	ldr	r4, [r0, #0]
1a00107e:	408a      	lsls	r2, r1
1a001080:	4314      	orrs	r4, r2
1a001082:	6004      	str	r4, [r0, #0]
1a001084:	f85d 4b04 	ldr.w	r4, [sp], #4
1a001088:	4770      	bx	lr

1a00108a <Chip_ADC_SetBurstCmd>:
1a00108a:	b538      	push	{r3, r4, r5, lr}
1a00108c:	4604      	mov	r4, r0
1a00108e:	460d      	mov	r5, r1
1a001090:	2100      	movs	r1, #0
1a001092:	f7ff ff48 	bl	1a000f26 <setStartMode>
1a001096:	b925      	cbnz	r5, 1a0010a2 <Chip_ADC_SetBurstCmd+0x18>
1a001098:	6823      	ldr	r3, [r4, #0]
1a00109a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
1a00109e:	6023      	str	r3, [r4, #0]
1a0010a0:	bd38      	pop	{r3, r4, r5, pc}
1a0010a2:	6823      	ldr	r3, [r4, #0]
1a0010a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
1a0010a8:	6023      	str	r3, [r4, #0]
1a0010aa:	e7f9      	b.n	1a0010a0 <Chip_ADC_SetBurstCmd+0x16>

1a0010ac <Chip_SetupCoreClock>:
1a0010ac:	b570      	push	{r4, r5, r6, lr}
1a0010ae:	b08a      	sub	sp, #40	; 0x28
1a0010b0:	4605      	mov	r5, r0
1a0010b2:	460e      	mov	r6, r1
1a0010b4:	4614      	mov	r4, r2
1a0010b6:	f24c 3350 	movw	r3, #50000	; 0xc350
1a0010ba:	9309      	str	r3, [sp, #36]	; 0x24
1a0010bc:	2806      	cmp	r0, #6
1a0010be:	d018      	beq.n	1a0010f2 <Chip_SetupCoreClock+0x46>
1a0010c0:	2300      	movs	r3, #0
1a0010c2:	2201      	movs	r2, #1
1a0010c4:	4629      	mov	r1, r5
1a0010c6:	2004      	movs	r0, #4
1a0010c8:	f000 fafc 	bl	1a0016c4 <Chip_Clock_SetBaseClock>
1a0010cc:	4a4a      	ldr	r2, [pc, #296]	; (1a0011f8 <Chip_SetupCoreClock+0x14c>)
1a0010ce:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a0010d0:	f043 0301 	orr.w	r3, r3, #1
1a0010d4:	6453      	str	r3, [r2, #68]	; 0x44
1a0010d6:	f88d 5008 	strb.w	r5, [sp, #8]
1a0010da:	a901      	add	r1, sp, #4
1a0010dc:	4630      	mov	r0, r6
1a0010de:	f000 fa69 	bl	1a0015b4 <Chip_Clock_CalcMainPLLValue>
1a0010e2:	4b46      	ldr	r3, [pc, #280]	; (1a0011fc <Chip_SetupCoreClock+0x150>)
1a0010e4:	429e      	cmp	r6, r3
1a0010e6:	d916      	bls.n	1a001116 <Chip_SetupCoreClock+0x6a>
1a0010e8:	9b01      	ldr	r3, [sp, #4]
1a0010ea:	f013 0f40 	tst.w	r3, #64	; 0x40
1a0010ee:	d003      	beq.n	1a0010f8 <Chip_SetupCoreClock+0x4c>
1a0010f0:	e7fe      	b.n	1a0010f0 <Chip_SetupCoreClock+0x44>
1a0010f2:	f000 f9c1 	bl	1a001478 <Chip_Clock_EnableCrystal>
1a0010f6:	e7e3      	b.n	1a0010c0 <Chip_SetupCoreClock+0x14>
1a0010f8:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0010fc:	d005      	beq.n	1a00110a <Chip_SetupCoreClock+0x5e>
1a0010fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a001102:	9301      	str	r3, [sp, #4]
1a001104:	2500      	movs	r5, #0
1a001106:	2601      	movs	r6, #1
1a001108:	e007      	b.n	1a00111a <Chip_SetupCoreClock+0x6e>
1a00110a:	9b04      	ldr	r3, [sp, #16]
1a00110c:	3301      	adds	r3, #1
1a00110e:	9304      	str	r3, [sp, #16]
1a001110:	2501      	movs	r5, #1
1a001112:	2600      	movs	r6, #0
1a001114:	e001      	b.n	1a00111a <Chip_SetupCoreClock+0x6e>
1a001116:	2500      	movs	r5, #0
1a001118:	462e      	mov	r6, r5
1a00111a:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a00111e:	9b01      	ldr	r3, [sp, #4]
1a001120:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a001124:	9a05      	ldr	r2, [sp, #20]
1a001126:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a00112a:	9a03      	ldr	r2, [sp, #12]
1a00112c:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a001130:	9a04      	ldr	r2, [sp, #16]
1a001132:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a001136:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a00113a:	4a2f      	ldr	r2, [pc, #188]	; (1a0011f8 <Chip_SetupCoreClock+0x14c>)
1a00113c:	6453      	str	r3, [r2, #68]	; 0x44
1a00113e:	4b2e      	ldr	r3, [pc, #184]	; (1a0011f8 <Chip_SetupCoreClock+0x14c>)
1a001140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
1a001142:	f013 0f01 	tst.w	r3, #1
1a001146:	d0fa      	beq.n	1a00113e <Chip_SetupCoreClock+0x92>
1a001148:	2300      	movs	r3, #0
1a00114a:	2201      	movs	r2, #1
1a00114c:	2109      	movs	r1, #9
1a00114e:	2004      	movs	r0, #4
1a001150:	f000 fab8 	bl	1a0016c4 <Chip_Clock_SetBaseClock>
1a001154:	b306      	cbz	r6, 1a001198 <Chip_SetupCoreClock+0xec>
1a001156:	f24c 3350 	movw	r3, #50000	; 0xc350
1a00115a:	9309      	str	r3, [sp, #36]	; 0x24
1a00115c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00115e:	1e5a      	subs	r2, r3, #1
1a001160:	9209      	str	r2, [sp, #36]	; 0x24
1a001162:	2b00      	cmp	r3, #0
1a001164:	d1fa      	bne.n	1a00115c <Chip_SetupCoreClock+0xb0>
1a001166:	9b01      	ldr	r3, [sp, #4]
1a001168:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a00116c:	9301      	str	r3, [sp, #4]
1a00116e:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a001172:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a001176:	9a05      	ldr	r2, [sp, #20]
1a001178:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a00117c:	9a03      	ldr	r2, [sp, #12]
1a00117e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a001182:	9a04      	ldr	r2, [sp, #16]
1a001184:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a001188:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a00118c:	4a1a      	ldr	r2, [pc, #104]	; (1a0011f8 <Chip_SetupCoreClock+0x14c>)
1a00118e:	6453      	str	r3, [r2, #68]	; 0x44
1a001190:	2c00      	cmp	r4, #0
1a001192:	d12e      	bne.n	1a0011f2 <Chip_SetupCoreClock+0x146>
1a001194:	b00a      	add	sp, #40	; 0x28
1a001196:	bd70      	pop	{r4, r5, r6, pc}
1a001198:	2d00      	cmp	r5, #0
1a00119a:	d0f9      	beq.n	1a001190 <Chip_SetupCoreClock+0xe4>
1a00119c:	f24c 3350 	movw	r3, #50000	; 0xc350
1a0011a0:	9309      	str	r3, [sp, #36]	; 0x24
1a0011a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0011a4:	1e5a      	subs	r2, r3, #1
1a0011a6:	9209      	str	r2, [sp, #36]	; 0x24
1a0011a8:	2b00      	cmp	r3, #0
1a0011aa:	d1fa      	bne.n	1a0011a2 <Chip_SetupCoreClock+0xf6>
1a0011ac:	9b04      	ldr	r3, [sp, #16]
1a0011ae:	1e5a      	subs	r2, r3, #1
1a0011b0:	9204      	str	r2, [sp, #16]
1a0011b2:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a0011b6:	9b01      	ldr	r3, [sp, #4]
1a0011b8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a0011bc:	9905      	ldr	r1, [sp, #20]
1a0011be:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a0011c2:	9903      	ldr	r1, [sp, #12]
1a0011c4:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a0011c8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0011cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0011d0:	4a09      	ldr	r2, [pc, #36]	; (1a0011f8 <Chip_SetupCoreClock+0x14c>)
1a0011d2:	6453      	str	r3, [r2, #68]	; 0x44
1a0011d4:	e7dc      	b.n	1a001190 <Chip_SetupCoreClock+0xe4>
1a0011d6:	480a      	ldr	r0, [pc, #40]	; (1a001200 <Chip_SetupCoreClock+0x154>)
1a0011d8:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a0011dc:	78cb      	ldrb	r3, [r1, #3]
1a0011de:	788a      	ldrb	r2, [r1, #2]
1a0011e0:	7849      	ldrb	r1, [r1, #1]
1a0011e2:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a0011e6:	f000 fa6d 	bl	1a0016c4 <Chip_Clock_SetBaseClock>
1a0011ea:	3401      	adds	r4, #1
1a0011ec:	2c11      	cmp	r4, #17
1a0011ee:	d9f2      	bls.n	1a0011d6 <Chip_SetupCoreClock+0x12a>
1a0011f0:	e7d0      	b.n	1a001194 <Chip_SetupCoreClock+0xe8>
1a0011f2:	2400      	movs	r4, #0
1a0011f4:	e7fa      	b.n	1a0011ec <Chip_SetupCoreClock+0x140>
1a0011f6:	bf00      	nop
1a0011f8:	40050000 	.word	0x40050000
1a0011fc:	068e7780 	.word	0x068e7780
1a001200:	1a0037f0 	.word	0x1a0037f0

1a001204 <Chip_USB_PllSetup>:
1a001204:	b508      	push	{r3, lr}
1a001206:	2007      	movs	r0, #7
1a001208:	f000 f978 	bl	1a0014fc <Chip_Clock_GetClockInputHz>
1a00120c:	4b08      	ldr	r3, [pc, #32]	; (1a001230 <Chip_USB_PllSetup+0x2c>)
1a00120e:	4298      	cmp	r0, r3
1a001210:	d00d      	beq.n	1a00122e <Chip_USB_PllSetup+0x2a>
1a001212:	4a08      	ldr	r2, [pc, #32]	; (1a001234 <Chip_USB_PllSetup+0x30>)
1a001214:	2100      	movs	r1, #0
1a001216:	2006      	movs	r0, #6
1a001218:	f000 fb1e 	bl	1a001858 <Chip_Clock_SetupPLL>
1a00121c:	2000      	movs	r0, #0
1a00121e:	f000 fb3b 	bl	1a001898 <Chip_Clock_EnablePLL>
1a001222:	2000      	movs	r0, #0
1a001224:	f000 fb42 	bl	1a0018ac <Chip_Clock_GetPLLStatus>
1a001228:	f010 0f01 	tst.w	r0, #1
1a00122c:	d0f9      	beq.n	1a001222 <Chip_USB_PllSetup+0x1e>
1a00122e:	bd08      	pop	{r3, pc}
1a001230:	1c9c3800 	.word	0x1c9c3800
1a001234:	1a003838 	.word	0x1a003838

1a001238 <Chip_USB0_Init>:
1a001238:	b508      	push	{r3, lr}
1a00123a:	f7ff ffe3 	bl	1a001204 <Chip_USB_PllSetup>
1a00123e:	2301      	movs	r3, #1
1a001240:	461a      	mov	r2, r3
1a001242:	2107      	movs	r1, #7
1a001244:	4618      	mov	r0, r3
1a001246:	f000 fa3d 	bl	1a0016c4 <Chip_Clock_SetBaseClock>
1a00124a:	2001      	movs	r0, #1
1a00124c:	f000 fa66 	bl	1a00171c <Chip_Clock_EnableBaseClock>
1a001250:	2301      	movs	r3, #1
1a001252:	461a      	mov	r2, r3
1a001254:	4619      	mov	r1, r3
1a001256:	2065      	movs	r0, #101	; 0x65
1a001258:	f000 fa86 	bl	1a001768 <Chip_Clock_EnableOpts>
1a00125c:	4a02      	ldr	r2, [pc, #8]	; (1a001268 <Chip_USB0_Init+0x30>)
1a00125e:	6853      	ldr	r3, [r2, #4]
1a001260:	f023 0320 	bic.w	r3, r3, #32
1a001264:	6053      	str	r3, [r2, #4]
1a001266:	bd08      	pop	{r3, pc}
1a001268:	40043000 	.word	0x40043000

1a00126c <SystemCoreClockUpdate>:
1a00126c:	b508      	push	{r3, lr}
1a00126e:	2069      	movs	r0, #105	; 0x69
1a001270:	f000 facc 	bl	1a00180c <Chip_Clock_GetRate>
1a001274:	4b01      	ldr	r3, [pc, #4]	; (1a00127c <SystemCoreClockUpdate+0x10>)
1a001276:	6018      	str	r0, [r3, #0]
1a001278:	bd08      	pop	{r3, pc}
1a00127a:	bf00      	nop
1a00127c:	1000018c 	.word	0x1000018c

1a001280 <pll_calc_divs>:
1a001280:	b4f0      	push	{r4, r5, r6, r7}
1a001282:	680b      	ldr	r3, [r1, #0]
1a001284:	f013 0f80 	tst.w	r3, #128	; 0x80
1a001288:	d002      	beq.n	1a001290 <pll_calc_divs+0x10>
1a00128a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a00128e:	600b      	str	r3, [r1, #0]
1a001290:	4607      	mov	r7, r0
1a001292:	2501      	movs	r5, #1
1a001294:	e03a      	b.n	1a00130c <pll_calc_divs+0x8c>
1a001296:	694b      	ldr	r3, [r1, #20]
1a001298:	fb03 f302 	mul.w	r3, r3, r2
1a00129c:	fbb3 f3f5 	udiv	r3, r3, r5
1a0012a0:	e01c      	b.n	1a0012dc <pll_calc_divs+0x5c>
1a0012a2:	461c      	mov	r4, r3
1a0012a4:	ebb0 0c04 	subs.w	ip, r0, r4
1a0012a8:	d427      	bmi.n	1a0012fa <pll_calc_divs+0x7a>
1a0012aa:	4567      	cmp	r7, ip
1a0012ac:	d906      	bls.n	1a0012bc <pll_calc_divs+0x3c>
1a0012ae:	608d      	str	r5, [r1, #8]
1a0012b0:	1c77      	adds	r7, r6, #1
1a0012b2:	60cf      	str	r7, [r1, #12]
1a0012b4:	610a      	str	r2, [r1, #16]
1a0012b6:	618c      	str	r4, [r1, #24]
1a0012b8:	61cb      	str	r3, [r1, #28]
1a0012ba:	4667      	mov	r7, ip
1a0012bc:	3201      	adds	r2, #1
1a0012be:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a0012c2:	dc1d      	bgt.n	1a001300 <pll_calc_divs+0x80>
1a0012c4:	680c      	ldr	r4, [r1, #0]
1a0012c6:	f014 0f40 	tst.w	r4, #64	; 0x40
1a0012ca:	d0e4      	beq.n	1a001296 <pll_calc_divs+0x16>
1a0012cc:	1c73      	adds	r3, r6, #1
1a0012ce:	fa02 fc03 	lsl.w	ip, r2, r3
1a0012d2:	694b      	ldr	r3, [r1, #20]
1a0012d4:	fb03 f30c 	mul.w	r3, r3, ip
1a0012d8:	fbb3 f3f5 	udiv	r3, r3, r5
1a0012dc:	f8df c038 	ldr.w	ip, [pc, #56]	; 1a001318 <pll_calc_divs+0x98>
1a0012e0:	4563      	cmp	r3, ip
1a0012e2:	d9eb      	bls.n	1a0012bc <pll_calc_divs+0x3c>
1a0012e4:	f8df c034 	ldr.w	ip, [pc, #52]	; 1a00131c <pll_calc_divs+0x9c>
1a0012e8:	4563      	cmp	r3, ip
1a0012ea:	d809      	bhi.n	1a001300 <pll_calc_divs+0x80>
1a0012ec:	f014 0f80 	tst.w	r4, #128	; 0x80
1a0012f0:	d1d7      	bne.n	1a0012a2 <pll_calc_divs+0x22>
1a0012f2:	1c74      	adds	r4, r6, #1
1a0012f4:	fa23 f404 	lsr.w	r4, r3, r4
1a0012f8:	e7d4      	b.n	1a0012a4 <pll_calc_divs+0x24>
1a0012fa:	f1cc 0c00 	rsb	ip, ip, #0
1a0012fe:	e7d4      	b.n	1a0012aa <pll_calc_divs+0x2a>
1a001300:	3601      	adds	r6, #1
1a001302:	2e03      	cmp	r6, #3
1a001304:	dc01      	bgt.n	1a00130a <pll_calc_divs+0x8a>
1a001306:	2201      	movs	r2, #1
1a001308:	e7d9      	b.n	1a0012be <pll_calc_divs+0x3e>
1a00130a:	3501      	adds	r5, #1
1a00130c:	2d04      	cmp	r5, #4
1a00130e:	dc01      	bgt.n	1a001314 <pll_calc_divs+0x94>
1a001310:	2600      	movs	r6, #0
1a001312:	e7f6      	b.n	1a001302 <pll_calc_divs+0x82>
1a001314:	bcf0      	pop	{r4, r5, r6, r7}
1a001316:	4770      	bx	lr
1a001318:	094c5eff 	.word	0x094c5eff
1a00131c:	1312d000 	.word	0x1312d000

1a001320 <pll_get_frac>:
1a001320:	b5f0      	push	{r4, r5, r6, r7, lr}
1a001322:	b099      	sub	sp, #100	; 0x64
1a001324:	4605      	mov	r5, r0
1a001326:	460c      	mov	r4, r1
1a001328:	225c      	movs	r2, #92	; 0x5c
1a00132a:	2100      	movs	r1, #0
1a00132c:	a801      	add	r0, sp, #4
1a00132e:	f001 fea2 	bl	1a003076 <memset>
1a001332:	2380      	movs	r3, #128	; 0x80
1a001334:	9300      	str	r3, [sp, #0]
1a001336:	6963      	ldr	r3, [r4, #20]
1a001338:	9305      	str	r3, [sp, #20]
1a00133a:	7923      	ldrb	r3, [r4, #4]
1a00133c:	f88d 3004 	strb.w	r3, [sp, #4]
1a001340:	4669      	mov	r1, sp
1a001342:	4628      	mov	r0, r5
1a001344:	f7ff ff9c 	bl	1a001280 <pll_calc_divs>
1a001348:	9b06      	ldr	r3, [sp, #24]
1a00134a:	42ab      	cmp	r3, r5
1a00134c:	d027      	beq.n	1a00139e <pll_get_frac+0x7e>
1a00134e:	1aeb      	subs	r3, r5, r3
1a001350:	d42e      	bmi.n	1a0013b0 <pll_get_frac+0x90>
1a001352:	461e      	mov	r6, r3
1a001354:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a001356:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a00135a:	9310      	str	r3, [sp, #64]	; 0x40
1a00135c:	6963      	ldr	r3, [r4, #20]
1a00135e:	9315      	str	r3, [sp, #84]	; 0x54
1a001360:	7923      	ldrb	r3, [r4, #4]
1a001362:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
1a001366:	a910      	add	r1, sp, #64	; 0x40
1a001368:	4628      	mov	r0, r5
1a00136a:	f7ff ff89 	bl	1a001280 <pll_calc_divs>
1a00136e:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a001370:	42ab      	cmp	r3, r5
1a001372:	d01f      	beq.n	1a0013b4 <pll_get_frac+0x94>
1a001374:	1aeb      	subs	r3, r5, r3
1a001376:	d425      	bmi.n	1a0013c4 <pll_get_frac+0xa4>
1a001378:	461f      	mov	r7, r3
1a00137a:	4b2b      	ldr	r3, [pc, #172]	; (1a001428 <pll_get_frac+0x108>)
1a00137c:	429d      	cmp	r5, r3
1a00137e:	d923      	bls.n	1a0013c8 <pll_get_frac+0xa8>
1a001380:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a001382:	1aed      	subs	r5, r5, r3
1a001384:	d433      	bmi.n	1a0013ee <pll_get_frac+0xce>
1a001386:	42ae      	cmp	r6, r5
1a001388:	dc3b      	bgt.n	1a001402 <pll_get_frac+0xe2>
1a00138a:	42be      	cmp	r6, r7
1a00138c:	dc31      	bgt.n	1a0013f2 <pll_get_frac+0xd2>
1a00138e:	466d      	mov	r5, sp
1a001390:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001392:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001394:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001398:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a00139c:	e006      	b.n	1a0013ac <pll_get_frac+0x8c>
1a00139e:	466d      	mov	r5, sp
1a0013a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0013a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0013a4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0013a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0013ac:	b019      	add	sp, #100	; 0x64
1a0013ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a0013b0:	425b      	negs	r3, r3
1a0013b2:	e7ce      	b.n	1a001352 <pll_get_frac+0x32>
1a0013b4:	ad10      	add	r5, sp, #64	; 0x40
1a0013b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0013b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0013ba:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0013be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0013c2:	e7f3      	b.n	1a0013ac <pll_get_frac+0x8c>
1a0013c4:	425b      	negs	r3, r3
1a0013c6:	e7d7      	b.n	1a001378 <pll_get_frac+0x58>
1a0013c8:	2340      	movs	r3, #64	; 0x40
1a0013ca:	9308      	str	r3, [sp, #32]
1a0013cc:	6963      	ldr	r3, [r4, #20]
1a0013ce:	930d      	str	r3, [sp, #52]	; 0x34
1a0013d0:	a908      	add	r1, sp, #32
1a0013d2:	4628      	mov	r0, r5
1a0013d4:	f7ff ff54 	bl	1a001280 <pll_calc_divs>
1a0013d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a0013da:	42ab      	cmp	r3, r5
1a0013dc:	d1d0      	bne.n	1a001380 <pll_get_frac+0x60>
1a0013de:	ad08      	add	r5, sp, #32
1a0013e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0013e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0013e4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0013e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0013ec:	e7de      	b.n	1a0013ac <pll_get_frac+0x8c>
1a0013ee:	426d      	negs	r5, r5
1a0013f0:	e7c9      	b.n	1a001386 <pll_get_frac+0x66>
1a0013f2:	ad10      	add	r5, sp, #64	; 0x40
1a0013f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0013f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0013f8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0013fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001400:	e7d4      	b.n	1a0013ac <pll_get_frac+0x8c>
1a001402:	42af      	cmp	r7, r5
1a001404:	db07      	blt.n	1a001416 <pll_get_frac+0xf6>
1a001406:	ad08      	add	r5, sp, #32
1a001408:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00140a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00140c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001410:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001414:	e7ca      	b.n	1a0013ac <pll_get_frac+0x8c>
1a001416:	ad10      	add	r5, sp, #64	; 0x40
1a001418:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00141a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00141c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001420:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001424:	e7c2      	b.n	1a0013ac <pll_get_frac+0x8c>
1a001426:	bf00      	nop
1a001428:	068e7780 	.word	0x068e7780

1a00142c <Chip_Clock_FindBaseClock>:
1a00142c:	b430      	push	{r4, r5}
1a00142e:	4605      	mov	r5, r0
1a001430:	2300      	movs	r3, #0
1a001432:	201c      	movs	r0, #28
1a001434:	e000      	b.n	1a001438 <Chip_Clock_FindBaseClock+0xc>
1a001436:	3301      	adds	r3, #1
1a001438:	281c      	cmp	r0, #28
1a00143a:	d118      	bne.n	1a00146e <Chip_Clock_FindBaseClock+0x42>
1a00143c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a001440:	0051      	lsls	r1, r2, #1
1a001442:	4a0c      	ldr	r2, [pc, #48]	; (1a001474 <Chip_Clock_FindBaseClock+0x48>)
1a001444:	440a      	add	r2, r1
1a001446:	7914      	ldrb	r4, [r2, #4]
1a001448:	4284      	cmp	r4, r0
1a00144a:	d010      	beq.n	1a00146e <Chip_Clock_FindBaseClock+0x42>
1a00144c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a001450:	004a      	lsls	r2, r1, #1
1a001452:	4908      	ldr	r1, [pc, #32]	; (1a001474 <Chip_Clock_FindBaseClock+0x48>)
1a001454:	5a8a      	ldrh	r2, [r1, r2]
1a001456:	42aa      	cmp	r2, r5
1a001458:	d8ed      	bhi.n	1a001436 <Chip_Clock_FindBaseClock+0xa>
1a00145a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a00145e:	0051      	lsls	r1, r2, #1
1a001460:	4a04      	ldr	r2, [pc, #16]	; (1a001474 <Chip_Clock_FindBaseClock+0x48>)
1a001462:	440a      	add	r2, r1
1a001464:	8852      	ldrh	r2, [r2, #2]
1a001466:	42aa      	cmp	r2, r5
1a001468:	d3e5      	bcc.n	1a001436 <Chip_Clock_FindBaseClock+0xa>
1a00146a:	4620      	mov	r0, r4
1a00146c:	e7e4      	b.n	1a001438 <Chip_Clock_FindBaseClock+0xc>
1a00146e:	bc30      	pop	{r4, r5}
1a001470:	4770      	bx	lr
1a001472:	bf00      	nop
1a001474:	1a003858 	.word	0x1a003858

1a001478 <Chip_Clock_EnableCrystal>:
1a001478:	b082      	sub	sp, #8
1a00147a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a00147e:	9301      	str	r3, [sp, #4]
1a001480:	4a0d      	ldr	r2, [pc, #52]	; (1a0014b8 <Chip_Clock_EnableCrystal+0x40>)
1a001482:	6993      	ldr	r3, [r2, #24]
1a001484:	f023 0102 	bic.w	r1, r3, #2
1a001488:	6992      	ldr	r2, [r2, #24]
1a00148a:	428a      	cmp	r2, r1
1a00148c:	d001      	beq.n	1a001492 <Chip_Clock_EnableCrystal+0x1a>
1a00148e:	4a0a      	ldr	r2, [pc, #40]	; (1a0014b8 <Chip_Clock_EnableCrystal+0x40>)
1a001490:	6191      	str	r1, [r2, #24]
1a001492:	f023 0303 	bic.w	r3, r3, #3
1a001496:	4a09      	ldr	r2, [pc, #36]	; (1a0014bc <Chip_Clock_EnableCrystal+0x44>)
1a001498:	6811      	ldr	r1, [r2, #0]
1a00149a:	4a09      	ldr	r2, [pc, #36]	; (1a0014c0 <Chip_Clock_EnableCrystal+0x48>)
1a00149c:	4291      	cmp	r1, r2
1a00149e:	d901      	bls.n	1a0014a4 <Chip_Clock_EnableCrystal+0x2c>
1a0014a0:	f043 0304 	orr.w	r3, r3, #4
1a0014a4:	4a04      	ldr	r2, [pc, #16]	; (1a0014b8 <Chip_Clock_EnableCrystal+0x40>)
1a0014a6:	6193      	str	r3, [r2, #24]
1a0014a8:	9b01      	ldr	r3, [sp, #4]
1a0014aa:	1e5a      	subs	r2, r3, #1
1a0014ac:	9201      	str	r2, [sp, #4]
1a0014ae:	2b00      	cmp	r3, #0
1a0014b0:	d1fa      	bne.n	1a0014a8 <Chip_Clock_EnableCrystal+0x30>
1a0014b2:	b002      	add	sp, #8
1a0014b4:	4770      	bx	lr
1a0014b6:	bf00      	nop
1a0014b8:	40050000 	.word	0x40050000
1a0014bc:	1a0037ec 	.word	0x1a0037ec
1a0014c0:	01312cff 	.word	0x01312cff

1a0014c4 <Chip_Clock_GetDividerSource>:
1a0014c4:	3012      	adds	r0, #18
1a0014c6:	4b05      	ldr	r3, [pc, #20]	; (1a0014dc <Chip_Clock_GetDividerSource+0x18>)
1a0014c8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
1a0014cc:	f010 0f01 	tst.w	r0, #1
1a0014d0:	d102      	bne.n	1a0014d8 <Chip_Clock_GetDividerSource+0x14>
1a0014d2:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a0014d6:	4770      	bx	lr
1a0014d8:	2011      	movs	r0, #17
1a0014da:	4770      	bx	lr
1a0014dc:	40050000 	.word	0x40050000

1a0014e0 <Chip_Clock_GetDividerDivisor>:
1a0014e0:	f100 0212 	add.w	r2, r0, #18
1a0014e4:	4b03      	ldr	r3, [pc, #12]	; (1a0014f4 <Chip_Clock_GetDividerDivisor+0x14>)
1a0014e6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a0014ea:	4b03      	ldr	r3, [pc, #12]	; (1a0014f8 <Chip_Clock_GetDividerDivisor+0x18>)
1a0014ec:	5c18      	ldrb	r0, [r3, r0]
1a0014ee:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a0014f2:	4770      	bx	lr
1a0014f4:	40050000 	.word	0x40050000
1a0014f8:	1a003850 	.word	0x1a003850

1a0014fc <Chip_Clock_GetClockInputHz>:
1a0014fc:	b508      	push	{r3, lr}
1a0014fe:	2810      	cmp	r0, #16
1a001500:	d80a      	bhi.n	1a001518 <Chip_Clock_GetClockInputHz+0x1c>
1a001502:	e8df f000 	tbb	[pc, r0]
1a001506:	0b44      	.short	0x0b44
1a001508:	0921180d 	.word	0x0921180d
1a00150c:	2d2a2724 	.word	0x2d2a2724
1a001510:	34300909 	.word	0x34300909
1a001514:	3c38      	.short	0x3c38
1a001516:	40          	.byte	0x40
1a001517:	00          	.byte	0x00
1a001518:	2000      	movs	r0, #0
1a00151a:	e03a      	b.n	1a001592 <Chip_Clock_GetClockInputHz+0x96>
1a00151c:	481e      	ldr	r0, [pc, #120]	; (1a001598 <Chip_Clock_GetClockInputHz+0x9c>)
1a00151e:	e038      	b.n	1a001592 <Chip_Clock_GetClockInputHz+0x96>
1a001520:	4b1e      	ldr	r3, [pc, #120]	; (1a00159c <Chip_Clock_GetClockInputHz+0xa0>)
1a001522:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a001526:	f003 0307 	and.w	r3, r3, #7
1a00152a:	2b04      	cmp	r3, #4
1a00152c:	d001      	beq.n	1a001532 <Chip_Clock_GetClockInputHz+0x36>
1a00152e:	481c      	ldr	r0, [pc, #112]	; (1a0015a0 <Chip_Clock_GetClockInputHz+0xa4>)
1a001530:	e02f      	b.n	1a001592 <Chip_Clock_GetClockInputHz+0x96>
1a001532:	2000      	movs	r0, #0
1a001534:	e02d      	b.n	1a001592 <Chip_Clock_GetClockInputHz+0x96>
1a001536:	4b19      	ldr	r3, [pc, #100]	; (1a00159c <Chip_Clock_GetClockInputHz+0xa0>)
1a001538:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a00153c:	f003 0307 	and.w	r3, r3, #7
1a001540:	2b04      	cmp	r3, #4
1a001542:	d027      	beq.n	1a001594 <Chip_Clock_GetClockInputHz+0x98>
1a001544:	4816      	ldr	r0, [pc, #88]	; (1a0015a0 <Chip_Clock_GetClockInputHz+0xa4>)
1a001546:	e024      	b.n	1a001592 <Chip_Clock_GetClockInputHz+0x96>
1a001548:	4b16      	ldr	r3, [pc, #88]	; (1a0015a4 <Chip_Clock_GetClockInputHz+0xa8>)
1a00154a:	6818      	ldr	r0, [r3, #0]
1a00154c:	e021      	b.n	1a001592 <Chip_Clock_GetClockInputHz+0x96>
1a00154e:	4b16      	ldr	r3, [pc, #88]	; (1a0015a8 <Chip_Clock_GetClockInputHz+0xac>)
1a001550:	6818      	ldr	r0, [r3, #0]
1a001552:	e01e      	b.n	1a001592 <Chip_Clock_GetClockInputHz+0x96>
1a001554:	4b15      	ldr	r3, [pc, #84]	; (1a0015ac <Chip_Clock_GetClockInputHz+0xb0>)
1a001556:	6818      	ldr	r0, [r3, #0]
1a001558:	e01b      	b.n	1a001592 <Chip_Clock_GetClockInputHz+0x96>
1a00155a:	4b14      	ldr	r3, [pc, #80]	; (1a0015ac <Chip_Clock_GetClockInputHz+0xb0>)
1a00155c:	6858      	ldr	r0, [r3, #4]
1a00155e:	e018      	b.n	1a001592 <Chip_Clock_GetClockInputHz+0x96>
1a001560:	f000 f868 	bl	1a001634 <Chip_Clock_GetMainPLLHz>
1a001564:	e015      	b.n	1a001592 <Chip_Clock_GetClockInputHz+0x96>
1a001566:	2100      	movs	r1, #0
1a001568:	f000 f89a 	bl	1a0016a0 <Chip_Clock_GetDivRate>
1a00156c:	e011      	b.n	1a001592 <Chip_Clock_GetClockInputHz+0x96>
1a00156e:	2101      	movs	r1, #1
1a001570:	f000 f896 	bl	1a0016a0 <Chip_Clock_GetDivRate>
1a001574:	e00d      	b.n	1a001592 <Chip_Clock_GetClockInputHz+0x96>
1a001576:	2102      	movs	r1, #2
1a001578:	f000 f892 	bl	1a0016a0 <Chip_Clock_GetDivRate>
1a00157c:	e009      	b.n	1a001592 <Chip_Clock_GetClockInputHz+0x96>
1a00157e:	2103      	movs	r1, #3
1a001580:	f000 f88e 	bl	1a0016a0 <Chip_Clock_GetDivRate>
1a001584:	e005      	b.n	1a001592 <Chip_Clock_GetClockInputHz+0x96>
1a001586:	2104      	movs	r1, #4
1a001588:	f000 f88a 	bl	1a0016a0 <Chip_Clock_GetDivRate>
1a00158c:	e001      	b.n	1a001592 <Chip_Clock_GetClockInputHz+0x96>
1a00158e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
1a001592:	bd08      	pop	{r3, pc}
1a001594:	4806      	ldr	r0, [pc, #24]	; (1a0015b0 <Chip_Clock_GetClockInputHz+0xb4>)
1a001596:	e7fc      	b.n	1a001592 <Chip_Clock_GetClockInputHz+0x96>
1a001598:	00b71b00 	.word	0x00b71b00
1a00159c:	40043000 	.word	0x40043000
1a0015a0:	017d7840 	.word	0x017d7840
1a0015a4:	1a0037c0 	.word	0x1a0037c0
1a0015a8:	1a0037ec 	.word	0x1a0037ec
1a0015ac:	10000120 	.word	0x10000120
1a0015b0:	02faf080 	.word	0x02faf080

1a0015b4 <Chip_Clock_CalcMainPLLValue>:
1a0015b4:	b538      	push	{r3, r4, r5, lr}
1a0015b6:	4605      	mov	r5, r0
1a0015b8:	460c      	mov	r4, r1
1a0015ba:	7908      	ldrb	r0, [r1, #4]
1a0015bc:	f7ff ff9e 	bl	1a0014fc <Chip_Clock_GetClockInputHz>
1a0015c0:	6160      	str	r0, [r4, #20]
1a0015c2:	4b19      	ldr	r3, [pc, #100]	; (1a001628 <Chip_Clock_CalcMainPLLValue+0x74>)
1a0015c4:	442b      	add	r3, r5
1a0015c6:	4a19      	ldr	r2, [pc, #100]	; (1a00162c <Chip_Clock_CalcMainPLLValue+0x78>)
1a0015c8:	4293      	cmp	r3, r2
1a0015ca:	d821      	bhi.n	1a001610 <Chip_Clock_CalcMainPLLValue+0x5c>
1a0015cc:	b318      	cbz	r0, 1a001616 <Chip_Clock_CalcMainPLLValue+0x62>
1a0015ce:	2380      	movs	r3, #128	; 0x80
1a0015d0:	6023      	str	r3, [r4, #0]
1a0015d2:	2300      	movs	r3, #0
1a0015d4:	60a3      	str	r3, [r4, #8]
1a0015d6:	60e3      	str	r3, [r4, #12]
1a0015d8:	fbb5 f3f0 	udiv	r3, r5, r0
1a0015dc:	6123      	str	r3, [r4, #16]
1a0015de:	4a14      	ldr	r2, [pc, #80]	; (1a001630 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a0015e0:	4295      	cmp	r5, r2
1a0015e2:	d903      	bls.n	1a0015ec <Chip_Clock_CalcMainPLLValue+0x38>
1a0015e4:	fb03 f000 	mul.w	r0, r3, r0
1a0015e8:	42a8      	cmp	r0, r5
1a0015ea:	d007      	beq.n	1a0015fc <Chip_Clock_CalcMainPLLValue+0x48>
1a0015ec:	4621      	mov	r1, r4
1a0015ee:	4628      	mov	r0, r5
1a0015f0:	f7ff fe96 	bl	1a001320 <pll_get_frac>
1a0015f4:	68a3      	ldr	r3, [r4, #8]
1a0015f6:	b18b      	cbz	r3, 1a00161c <Chip_Clock_CalcMainPLLValue+0x68>
1a0015f8:	3b01      	subs	r3, #1
1a0015fa:	60a3      	str	r3, [r4, #8]
1a0015fc:	6923      	ldr	r3, [r4, #16]
1a0015fe:	b183      	cbz	r3, 1a001622 <Chip_Clock_CalcMainPLLValue+0x6e>
1a001600:	68e2      	ldr	r2, [r4, #12]
1a001602:	b10a      	cbz	r2, 1a001608 <Chip_Clock_CalcMainPLLValue+0x54>
1a001604:	3a01      	subs	r2, #1
1a001606:	60e2      	str	r2, [r4, #12]
1a001608:	3b01      	subs	r3, #1
1a00160a:	6123      	str	r3, [r4, #16]
1a00160c:	2000      	movs	r0, #0
1a00160e:	bd38      	pop	{r3, r4, r5, pc}
1a001610:	f04f 30ff 	mov.w	r0, #4294967295
1a001614:	e7fb      	b.n	1a00160e <Chip_Clock_CalcMainPLLValue+0x5a>
1a001616:	f04f 30ff 	mov.w	r0, #4294967295
1a00161a:	e7f8      	b.n	1a00160e <Chip_Clock_CalcMainPLLValue+0x5a>
1a00161c:	f04f 30ff 	mov.w	r0, #4294967295
1a001620:	e7f5      	b.n	1a00160e <Chip_Clock_CalcMainPLLValue+0x5a>
1a001622:	f04f 30ff 	mov.w	r0, #4294967295
1a001626:	e7f2      	b.n	1a00160e <Chip_Clock_CalcMainPLLValue+0x5a>
1a001628:	ff6b3a10 	.word	0xff6b3a10
1a00162c:	0b940510 	.word	0x0b940510
1a001630:	094c5eff 	.word	0x094c5eff

1a001634 <Chip_Clock_GetMainPLLHz>:
1a001634:	b530      	push	{r4, r5, lr}
1a001636:	b083      	sub	sp, #12
1a001638:	4d17      	ldr	r5, [pc, #92]	; (1a001698 <Chip_Clock_GetMainPLLHz+0x64>)
1a00163a:	6c6c      	ldr	r4, [r5, #68]	; 0x44
1a00163c:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a001640:	f7ff ff5c 	bl	1a0014fc <Chip_Clock_GetClockInputHz>
1a001644:	4b15      	ldr	r3, [pc, #84]	; (1a00169c <Chip_Clock_GetMainPLLHz+0x68>)
1a001646:	681b      	ldr	r3, [r3, #0]
1a001648:	9301      	str	r3, [sp, #4]
1a00164a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a00164c:	f013 0f01 	tst.w	r3, #1
1a001650:	d020      	beq.n	1a001694 <Chip_Clock_GetMainPLLHz+0x60>
1a001652:	f3c4 4307 	ubfx	r3, r4, #16, #8
1a001656:	f3c4 3201 	ubfx	r2, r4, #12, #2
1a00165a:	f3c4 2101 	ubfx	r1, r4, #8, #2
1a00165e:	f3c4 1580 	ubfx	r5, r4, #6, #1
1a001662:	3301      	adds	r3, #1
1a001664:	3201      	adds	r2, #1
1a001666:	f10d 0c08 	add.w	ip, sp, #8
1a00166a:	4461      	add	r1, ip
1a00166c:	f811 1c04 	ldrb.w	r1, [r1, #-4]
1a001670:	f014 0f80 	tst.w	r4, #128	; 0x80
1a001674:	d108      	bne.n	1a001688 <Chip_Clock_GetMainPLLHz+0x54>
1a001676:	b93d      	cbnz	r5, 1a001688 <Chip_Clock_GetMainPLLHz+0x54>
1a001678:	0049      	lsls	r1, r1, #1
1a00167a:	fbb3 f3f1 	udiv	r3, r3, r1
1a00167e:	fbb0 f0f2 	udiv	r0, r0, r2
1a001682:	fb00 f003 	mul.w	r0, r0, r3
1a001686:	e003      	b.n	1a001690 <Chip_Clock_GetMainPLLHz+0x5c>
1a001688:	fbb0 f0f2 	udiv	r0, r0, r2
1a00168c:	fb03 f000 	mul.w	r0, r3, r0
1a001690:	b003      	add	sp, #12
1a001692:	bd30      	pop	{r4, r5, pc}
1a001694:	2000      	movs	r0, #0
1a001696:	e7fb      	b.n	1a001690 <Chip_Clock_GetMainPLLHz+0x5c>
1a001698:	40050000 	.word	0x40050000
1a00169c:	1a00384c 	.word	0x1a00384c

1a0016a0 <Chip_Clock_GetDivRate>:
1a0016a0:	b538      	push	{r3, r4, r5, lr}
1a0016a2:	460c      	mov	r4, r1
1a0016a4:	4608      	mov	r0, r1
1a0016a6:	f7ff ff0d 	bl	1a0014c4 <Chip_Clock_GetDividerSource>
1a0016aa:	4605      	mov	r5, r0
1a0016ac:	4620      	mov	r0, r4
1a0016ae:	f7ff ff17 	bl	1a0014e0 <Chip_Clock_GetDividerDivisor>
1a0016b2:	4604      	mov	r4, r0
1a0016b4:	4628      	mov	r0, r5
1a0016b6:	f7ff ff21 	bl	1a0014fc <Chip_Clock_GetClockInputHz>
1a0016ba:	3401      	adds	r4, #1
1a0016bc:	fbb0 f0f4 	udiv	r0, r0, r4
1a0016c0:	bd38      	pop	{r3, r4, r5, pc}
1a0016c2:	Address 0x1a0016c2 is out of bounds.


1a0016c4 <Chip_Clock_SetBaseClock>:
1a0016c4:	b430      	push	{r4, r5}
1a0016c6:	f100 0416 	add.w	r4, r0, #22
1a0016ca:	00a4      	lsls	r4, r4, #2
1a0016cc:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a0016d0:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a0016d4:	6864      	ldr	r4, [r4, #4]
1a0016d6:	281b      	cmp	r0, #27
1a0016d8:	d813      	bhi.n	1a001702 <Chip_Clock_SetBaseClock+0x3e>
1a0016da:	2911      	cmp	r1, #17
1a0016dc:	d01a      	beq.n	1a001714 <Chip_Clock_SetBaseClock+0x50>
1a0016de:	4d0e      	ldr	r5, [pc, #56]	; (1a001718 <Chip_Clock_SetBaseClock+0x54>)
1a0016e0:	4025      	ands	r5, r4
1a0016e2:	b10a      	cbz	r2, 1a0016e8 <Chip_Clock_SetBaseClock+0x24>
1a0016e4:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
1a0016e8:	b10b      	cbz	r3, 1a0016ee <Chip_Clock_SetBaseClock+0x2a>
1a0016ea:	f045 0501 	orr.w	r5, r5, #1
1a0016ee:	ea45 6501 	orr.w	r5, r5, r1, lsl #24
1a0016f2:	3016      	adds	r0, #22
1a0016f4:	0080      	lsls	r0, r0, #2
1a0016f6:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a0016fa:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a0016fe:	6045      	str	r5, [r0, #4]
1a001700:	e008      	b.n	1a001714 <Chip_Clock_SetBaseClock+0x50>
1a001702:	f044 0401 	orr.w	r4, r4, #1
1a001706:	3016      	adds	r0, #22
1a001708:	0080      	lsls	r0, r0, #2
1a00170a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a00170e:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a001712:	6044      	str	r4, [r0, #4]
1a001714:	bc30      	pop	{r4, r5}
1a001716:	4770      	bx	lr
1a001718:	e0fff7fe 	.word	0xe0fff7fe

1a00171c <Chip_Clock_EnableBaseClock>:
1a00171c:	281b      	cmp	r0, #27
1a00171e:	d809      	bhi.n	1a001734 <Chip_Clock_EnableBaseClock+0x18>
1a001720:	3016      	adds	r0, #22
1a001722:	0080      	lsls	r0, r0, #2
1a001724:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a001728:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a00172c:	6843      	ldr	r3, [r0, #4]
1a00172e:	f023 0301 	bic.w	r3, r3, #1
1a001732:	6043      	str	r3, [r0, #4]
1a001734:	4770      	bx	lr

1a001736 <Chip_Clock_GetBaseClock>:
1a001736:	281b      	cmp	r0, #27
1a001738:	d80c      	bhi.n	1a001754 <Chip_Clock_GetBaseClock+0x1e>
1a00173a:	3016      	adds	r0, #22
1a00173c:	0080      	lsls	r0, r0, #2
1a00173e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a001742:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a001746:	6840      	ldr	r0, [r0, #4]
1a001748:	f010 0f01 	tst.w	r0, #1
1a00174c:	d104      	bne.n	1a001758 <Chip_Clock_GetBaseClock+0x22>
1a00174e:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a001752:	4770      	bx	lr
1a001754:	2011      	movs	r0, #17
1a001756:	4770      	bx	lr
1a001758:	2011      	movs	r0, #17
1a00175a:	4770      	bx	lr

1a00175c <Chip_Clock_GetBaseClocktHz>:
1a00175c:	b508      	push	{r3, lr}
1a00175e:	f7ff ffea 	bl	1a001736 <Chip_Clock_GetBaseClock>
1a001762:	f7ff fecb 	bl	1a0014fc <Chip_Clock_GetClockInputHz>
1a001766:	bd08      	pop	{r3, pc}

1a001768 <Chip_Clock_EnableOpts>:
1a001768:	b971      	cbnz	r1, 1a001788 <Chip_Clock_EnableOpts+0x20>
1a00176a:	2101      	movs	r1, #1
1a00176c:	b10a      	cbz	r2, 1a001772 <Chip_Clock_EnableOpts+0xa>
1a00176e:	f041 0104 	orr.w	r1, r1, #4
1a001772:	2b02      	cmp	r3, #2
1a001774:	d00a      	beq.n	1a00178c <Chip_Clock_EnableOpts+0x24>
1a001776:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a00177a:	d30a      	bcc.n	1a001792 <Chip_Clock_EnableOpts+0x2a>
1a00177c:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a001780:	4b06      	ldr	r3, [pc, #24]	; (1a00179c <Chip_Clock_EnableOpts+0x34>)
1a001782:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a001786:	4770      	bx	lr
1a001788:	2103      	movs	r1, #3
1a00178a:	e7ef      	b.n	1a00176c <Chip_Clock_EnableOpts+0x4>
1a00178c:	f041 0120 	orr.w	r1, r1, #32
1a001790:	e7f1      	b.n	1a001776 <Chip_Clock_EnableOpts+0xe>
1a001792:	3020      	adds	r0, #32
1a001794:	4b02      	ldr	r3, [pc, #8]	; (1a0017a0 <Chip_Clock_EnableOpts+0x38>)
1a001796:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a00179a:	4770      	bx	lr
1a00179c:	40052000 	.word	0x40052000
1a0017a0:	40051000 	.word	0x40051000

1a0017a4 <Chip_Clock_Enable>:
1a0017a4:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0017a8:	d309      	bcc.n	1a0017be <Chip_Clock_Enable+0x1a>
1a0017aa:	4a09      	ldr	r2, [pc, #36]	; (1a0017d0 <Chip_Clock_Enable+0x2c>)
1a0017ac:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a0017b0:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a0017b4:	f043 0301 	orr.w	r3, r3, #1
1a0017b8:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a0017bc:	4770      	bx	lr
1a0017be:	4a05      	ldr	r2, [pc, #20]	; (1a0017d4 <Chip_Clock_Enable+0x30>)
1a0017c0:	3020      	adds	r0, #32
1a0017c2:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a0017c6:	f043 0301 	orr.w	r3, r3, #1
1a0017ca:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a0017ce:	4770      	bx	lr
1a0017d0:	40052000 	.word	0x40052000
1a0017d4:	40051000 	.word	0x40051000

1a0017d8 <Chip_Clock_Disable>:
1a0017d8:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0017dc:	d309      	bcc.n	1a0017f2 <Chip_Clock_Disable+0x1a>
1a0017de:	4a09      	ldr	r2, [pc, #36]	; (1a001804 <Chip_Clock_Disable+0x2c>)
1a0017e0:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a0017e4:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a0017e8:	f023 0301 	bic.w	r3, r3, #1
1a0017ec:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a0017f0:	4770      	bx	lr
1a0017f2:	4a05      	ldr	r2, [pc, #20]	; (1a001808 <Chip_Clock_Disable+0x30>)
1a0017f4:	3020      	adds	r0, #32
1a0017f6:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a0017fa:	f023 0301 	bic.w	r3, r3, #1
1a0017fe:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a001802:	4770      	bx	lr
1a001804:	40052000 	.word	0x40052000
1a001808:	40051000 	.word	0x40051000

1a00180c <Chip_Clock_GetRate>:
1a00180c:	b510      	push	{r4, lr}
1a00180e:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001812:	d309      	bcc.n	1a001828 <Chip_Clock_GetRate+0x1c>
1a001814:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a001818:	4a0d      	ldr	r2, [pc, #52]	; (1a001850 <Chip_Clock_GetRate+0x44>)
1a00181a:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a00181e:	f014 0f01 	tst.w	r4, #1
1a001822:	d107      	bne.n	1a001834 <Chip_Clock_GetRate+0x28>
1a001824:	2000      	movs	r0, #0
1a001826:	bd10      	pop	{r4, pc}
1a001828:	f100 0320 	add.w	r3, r0, #32
1a00182c:	4a09      	ldr	r2, [pc, #36]	; (1a001854 <Chip_Clock_GetRate+0x48>)
1a00182e:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a001832:	e7f4      	b.n	1a00181e <Chip_Clock_GetRate+0x12>
1a001834:	f7ff fdfa 	bl	1a00142c <Chip_Clock_FindBaseClock>
1a001838:	f7ff ff90 	bl	1a00175c <Chip_Clock_GetBaseClocktHz>
1a00183c:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a001840:	d103      	bne.n	1a00184a <Chip_Clock_GetRate+0x3e>
1a001842:	2301      	movs	r3, #1
1a001844:	fbb0 f0f3 	udiv	r0, r0, r3
1a001848:	e7ed      	b.n	1a001826 <Chip_Clock_GetRate+0x1a>
1a00184a:	2302      	movs	r3, #2
1a00184c:	e7fa      	b.n	1a001844 <Chip_Clock_GetRate+0x38>
1a00184e:	bf00      	nop
1a001850:	40052000 	.word	0x40052000
1a001854:	40051000 	.word	0x40051000

1a001858 <Chip_Clock_SetupPLL>:
1a001858:	b410      	push	{r4}
1a00185a:	6813      	ldr	r3, [r2, #0]
1a00185c:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
1a001860:	4b0b      	ldr	r3, [pc, #44]	; (1a001890 <Chip_Clock_SetupPLL+0x38>)
1a001862:	eb03 1401 	add.w	r4, r3, r1, lsl #4
1a001866:	6220      	str	r0, [r4, #32]
1a001868:	6850      	ldr	r0, [r2, #4]
1a00186a:	1c8c      	adds	r4, r1, #2
1a00186c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
1a001870:	6058      	str	r0, [r3, #4]
1a001872:	6890      	ldr	r0, [r2, #8]
1a001874:	6098      	str	r0, [r3, #8]
1a001876:	2901      	cmp	r1, #1
1a001878:	d006      	beq.n	1a001888 <Chip_Clock_SetupPLL+0x30>
1a00187a:	6912      	ldr	r2, [r2, #16]
1a00187c:	4b05      	ldr	r3, [pc, #20]	; (1a001894 <Chip_Clock_SetupPLL+0x3c>)
1a00187e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
1a001882:	f85d 4b04 	ldr.w	r4, [sp], #4
1a001886:	4770      	bx	lr
1a001888:	68d0      	ldr	r0, [r2, #12]
1a00188a:	4b01      	ldr	r3, [pc, #4]	; (1a001890 <Chip_Clock_SetupPLL+0x38>)
1a00188c:	63d8      	str	r0, [r3, #60]	; 0x3c
1a00188e:	e7f4      	b.n	1a00187a <Chip_Clock_SetupPLL+0x22>
1a001890:	40050000 	.word	0x40050000
1a001894:	10000120 	.word	0x10000120

1a001898 <Chip_Clock_EnablePLL>:
1a001898:	0100      	lsls	r0, r0, #4
1a00189a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a00189e:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a0018a2:	6a03      	ldr	r3, [r0, #32]
1a0018a4:	f023 0301 	bic.w	r3, r3, #1
1a0018a8:	6203      	str	r3, [r0, #32]
1a0018aa:	4770      	bx	lr

1a0018ac <Chip_Clock_GetPLLStatus>:
1a0018ac:	0100      	lsls	r0, r0, #4
1a0018ae:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a0018b2:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a0018b6:	69c0      	ldr	r0, [r0, #28]
1a0018b8:	4770      	bx	lr
1a0018ba:	Address 0x1a0018ba is out of bounds.


1a0018bc <Chip_UART_GetIndex>:
1a0018bc:	4b09      	ldr	r3, [pc, #36]	; (1a0018e4 <Chip_UART_GetIndex+0x28>)
1a0018be:	4298      	cmp	r0, r3
1a0018c0:	d009      	beq.n	1a0018d6 <Chip_UART_GetIndex+0x1a>
1a0018c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a0018c6:	4298      	cmp	r0, r3
1a0018c8:	d007      	beq.n	1a0018da <Chip_UART_GetIndex+0x1e>
1a0018ca:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a0018ce:	4298      	cmp	r0, r3
1a0018d0:	d005      	beq.n	1a0018de <Chip_UART_GetIndex+0x22>
1a0018d2:	2000      	movs	r0, #0
1a0018d4:	4770      	bx	lr
1a0018d6:	2002      	movs	r0, #2
1a0018d8:	4770      	bx	lr
1a0018da:	2003      	movs	r0, #3
1a0018dc:	4770      	bx	lr
1a0018de:	2001      	movs	r0, #1
1a0018e0:	4770      	bx	lr
1a0018e2:	bf00      	nop
1a0018e4:	400c1000 	.word	0x400c1000

1a0018e8 <Chip_UART_Init>:
1a0018e8:	b530      	push	{r4, r5, lr}
1a0018ea:	b083      	sub	sp, #12
1a0018ec:	4604      	mov	r4, r0
1a0018ee:	f7ff ffe5 	bl	1a0018bc <Chip_UART_GetIndex>
1a0018f2:	2301      	movs	r3, #1
1a0018f4:	461a      	mov	r2, r3
1a0018f6:	4619      	mov	r1, r3
1a0018f8:	4d0e      	ldr	r5, [pc, #56]	; (1a001934 <Chip_UART_Init+0x4c>)
1a0018fa:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a0018fe:	f7ff ff33 	bl	1a001768 <Chip_Clock_EnableOpts>
1a001902:	2307      	movs	r3, #7
1a001904:	60a3      	str	r3, [r4, #8]
1a001906:	2300      	movs	r3, #0
1a001908:	65e3      	str	r3, [r4, #92]	; 0x5c
1a00190a:	6063      	str	r3, [r4, #4]
1a00190c:	60e3      	str	r3, [r4, #12]
1a00190e:	6223      	str	r3, [r4, #32]
1a001910:	64e3      	str	r3, [r4, #76]	; 0x4c
1a001912:	6563      	str	r3, [r4, #84]	; 0x54
1a001914:	6523      	str	r3, [r4, #80]	; 0x50
1a001916:	4b08      	ldr	r3, [pc, #32]	; (1a001938 <Chip_UART_Init+0x50>)
1a001918:	429c      	cmp	r4, r3
1a00191a:	d006      	beq.n	1a00192a <Chip_UART_Init+0x42>
1a00191c:	2303      	movs	r3, #3
1a00191e:	60e3      	str	r3, [r4, #12]
1a001920:	2310      	movs	r3, #16
1a001922:	62a3      	str	r3, [r4, #40]	; 0x28
1a001924:	9b01      	ldr	r3, [sp, #4]
1a001926:	b003      	add	sp, #12
1a001928:	bd30      	pop	{r4, r5, pc}
1a00192a:	2300      	movs	r3, #0
1a00192c:	6123      	str	r3, [r4, #16]
1a00192e:	69a3      	ldr	r3, [r4, #24]
1a001930:	9301      	str	r3, [sp, #4]
1a001932:	e7f3      	b.n	1a00191c <Chip_UART_Init+0x34>
1a001934:	1a0038cc 	.word	0x1a0038cc
1a001938:	40082000 	.word	0x40082000

1a00193c <Chip_UART_Send>:
1a00193c:	2300      	movs	r3, #0
1a00193e:	4293      	cmp	r3, r2
1a001940:	da0e      	bge.n	1a001960 <Chip_UART_Send+0x24>
1a001942:	b410      	push	{r4}
1a001944:	6944      	ldr	r4, [r0, #20]
1a001946:	f014 0f20 	tst.w	r4, #32
1a00194a:	d005      	beq.n	1a001958 <Chip_UART_Send+0x1c>
1a00194c:	f811 4b01 	ldrb.w	r4, [r1], #1
1a001950:	6004      	str	r4, [r0, #0]
1a001952:	3301      	adds	r3, #1
1a001954:	4293      	cmp	r3, r2
1a001956:	dbf5      	blt.n	1a001944 <Chip_UART_Send+0x8>
1a001958:	4618      	mov	r0, r3
1a00195a:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00195e:	4770      	bx	lr
1a001960:	4618      	mov	r0, r3
1a001962:	4770      	bx	lr

1a001964 <Chip_UART_SetBaud>:
1a001964:	b538      	push	{r3, r4, r5, lr}
1a001966:	4605      	mov	r5, r0
1a001968:	460c      	mov	r4, r1
1a00196a:	f7ff ffa7 	bl	1a0018bc <Chip_UART_GetIndex>
1a00196e:	4b0c      	ldr	r3, [pc, #48]	; (1a0019a0 <Chip_UART_SetBaud+0x3c>)
1a001970:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a001974:	f7ff ff4a 	bl	1a00180c <Chip_Clock_GetRate>
1a001978:	0123      	lsls	r3, r4, #4
1a00197a:	fbb0 f3f3 	udiv	r3, r0, r3
1a00197e:	b2d9      	uxtb	r1, r3
1a001980:	68ea      	ldr	r2, [r5, #12]
1a001982:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a001986:	60ea      	str	r2, [r5, #12]
1a001988:	6029      	str	r1, [r5, #0]
1a00198a:	f3c3 2207 	ubfx	r2, r3, #8, #8
1a00198e:	606a      	str	r2, [r5, #4]
1a001990:	68ea      	ldr	r2, [r5, #12]
1a001992:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a001996:	60ea      	str	r2, [r5, #12]
1a001998:	fbb0 f0f3 	udiv	r0, r0, r3
1a00199c:	0900      	lsrs	r0, r0, #4
1a00199e:	bd38      	pop	{r3, r4, r5, pc}
1a0019a0:	1a0038c4 	.word	0x1a0038c4

1a0019a4 <Chip_UART_SetBaudFDR>:
1a0019a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0019a8:	b083      	sub	sp, #12
1a0019aa:	9001      	str	r0, [sp, #4]
1a0019ac:	4688      	mov	r8, r1
1a0019ae:	f7ff ff85 	bl	1a0018bc <Chip_UART_GetIndex>
1a0019b2:	4b32      	ldr	r3, [pc, #200]	; (1a001a7c <Chip_UART_SetBaudFDR+0xd8>)
1a0019b4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a0019b8:	f7ff ff28 	bl	1a00180c <Chip_Clock_GetRate>
1a0019bc:	4606      	mov	r6, r0
1a0019be:	f04f 37ff 	mov.w	r7, #4294967295
1a0019c2:	2401      	movs	r4, #1
1a0019c4:	f04f 0b00 	mov.w	fp, #0
1a0019c8:	46a2      	mov	sl, r4
1a0019ca:	46d9      	mov	r9, fp
1a0019cc:	e02a      	b.n	1a001a24 <Chip_UART_SetBaudFDR+0x80>
1a0019ce:	4242      	negs	r2, r0
1a0019d0:	1c4b      	adds	r3, r1, #1
1a0019d2:	e017      	b.n	1a001a04 <Chip_UART_SetBaudFDR+0x60>
1a0019d4:	b30a      	cbz	r2, 1a001a1a <Chip_UART_SetBaudFDR+0x76>
1a0019d6:	4617      	mov	r7, r2
1a0019d8:	46ab      	mov	fp, r5
1a0019da:	46a2      	mov	sl, r4
1a0019dc:	4699      	mov	r9, r3
1a0019de:	3501      	adds	r5, #1
1a0019e0:	42ac      	cmp	r4, r5
1a0019e2:	d91e      	bls.n	1a001a22 <Chip_UART_SetBaudFDR+0x7e>
1a0019e4:	0933      	lsrs	r3, r6, #4
1a0019e6:	0730      	lsls	r0, r6, #28
1a0019e8:	fba4 0100 	umull	r0, r1, r4, r0
1a0019ec:	fb04 1103 	mla	r1, r4, r3, r1
1a0019f0:	1962      	adds	r2, r4, r5
1a0019f2:	fb08 f202 	mul.w	r2, r8, r2
1a0019f6:	2300      	movs	r3, #0
1a0019f8:	f000 ffde 	bl	1a0029b8 <__aeabi_uldivmod>
1a0019fc:	4602      	mov	r2, r0
1a0019fe:	460b      	mov	r3, r1
1a001a00:	2800      	cmp	r0, #0
1a001a02:	dbe4      	blt.n	1a0019ce <Chip_UART_SetBaudFDR+0x2a>
1a001a04:	4297      	cmp	r7, r2
1a001a06:	d3ea      	bcc.n	1a0019de <Chip_UART_SetBaudFDR+0x3a>
1a001a08:	2b00      	cmp	r3, #0
1a001a0a:	d0e8      	beq.n	1a0019de <Chip_UART_SetBaudFDR+0x3a>
1a001a0c:	0c19      	lsrs	r1, r3, #16
1a001a0e:	d1e6      	bne.n	1a0019de <Chip_UART_SetBaudFDR+0x3a>
1a001a10:	2b02      	cmp	r3, #2
1a001a12:	d8df      	bhi.n	1a0019d4 <Chip_UART_SetBaudFDR+0x30>
1a001a14:	2d00      	cmp	r5, #0
1a001a16:	d0dd      	beq.n	1a0019d4 <Chip_UART_SetBaudFDR+0x30>
1a001a18:	e7e1      	b.n	1a0019de <Chip_UART_SetBaudFDR+0x3a>
1a001a1a:	4617      	mov	r7, r2
1a001a1c:	46ab      	mov	fp, r5
1a001a1e:	46a2      	mov	sl, r4
1a001a20:	4699      	mov	r9, r3
1a001a22:	3401      	adds	r4, #1
1a001a24:	b11f      	cbz	r7, 1a001a2e <Chip_UART_SetBaudFDR+0x8a>
1a001a26:	2c0f      	cmp	r4, #15
1a001a28:	d801      	bhi.n	1a001a2e <Chip_UART_SetBaudFDR+0x8a>
1a001a2a:	2500      	movs	r5, #0
1a001a2c:	e7d8      	b.n	1a0019e0 <Chip_UART_SetBaudFDR+0x3c>
1a001a2e:	f1b9 0f00 	cmp.w	r9, #0
1a001a32:	d01e      	beq.n	1a001a72 <Chip_UART_SetBaudFDR+0xce>
1a001a34:	9a01      	ldr	r2, [sp, #4]
1a001a36:	4611      	mov	r1, r2
1a001a38:	68d3      	ldr	r3, [r2, #12]
1a001a3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a001a3e:	60d3      	str	r3, [r2, #12]
1a001a40:	fa5f f389 	uxtb.w	r3, r9
1a001a44:	6013      	str	r3, [r2, #0]
1a001a46:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a001a4a:	6053      	str	r3, [r2, #4]
1a001a4c:	68d3      	ldr	r3, [r2, #12]
1a001a4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a001a52:	60d3      	str	r3, [r2, #12]
1a001a54:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a001a58:	b2db      	uxtb	r3, r3
1a001a5a:	f00b 020f 	and.w	r2, fp, #15
1a001a5e:	4313      	orrs	r3, r2
1a001a60:	628b      	str	r3, [r1, #40]	; 0x28
1a001a62:	0933      	lsrs	r3, r6, #4
1a001a64:	fb0a f303 	mul.w	r3, sl, r3
1a001a68:	44da      	add	sl, fp
1a001a6a:	fb09 f90a 	mul.w	r9, r9, sl
1a001a6e:	fbb3 f9f9 	udiv	r9, r3, r9
1a001a72:	4648      	mov	r0, r9
1a001a74:	b003      	add	sp, #12
1a001a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a001a7a:	bf00      	nop
1a001a7c:	1a0038c4 	.word	0x1a0038c4

1a001a80 <SystemInit>:
1a001a80:	b508      	push	{r3, lr}
1a001a82:	4a0b      	ldr	r2, [pc, #44]	; (1a001ab0 <SystemInit+0x30>)
1a001a84:	4b0b      	ldr	r3, [pc, #44]	; (1a001ab4 <SystemInit+0x34>)
1a001a86:	609a      	str	r2, [r3, #8]
1a001a88:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a001a8c:	691b      	ldr	r3, [r3, #16]
1a001a8e:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a001a92:	2b20      	cmp	r3, #32
1a001a94:	d004      	beq.n	1a001aa0 <SystemInit+0x20>
1a001a96:	f7ff f88b 	bl	1a000bb0 <Board_SystemInit>
1a001a9a:	f7ff f961 	bl	1a000d60 <Board_Init>
1a001a9e:	bd08      	pop	{r3, pc}
1a001aa0:	4a04      	ldr	r2, [pc, #16]	; (1a001ab4 <SystemInit+0x34>)
1a001aa2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a001aa6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a001aaa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a001aae:	e7f2      	b.n	1a001a96 <SystemInit+0x16>
1a001ab0:	1a000000 	.word	0x1a000000
1a001ab4:	e000ed00 	.word	0xe000ed00

1a001ab8 <cyclesCounterInit>:
1a001ab8:	4b04      	ldr	r3, [pc, #16]	; (1a001acc <cyclesCounterInit+0x14>)
1a001aba:	6018      	str	r0, [r3, #0]
1a001abc:	4a04      	ldr	r2, [pc, #16]	; (1a001ad0 <cyclesCounterInit+0x18>)
1a001abe:	6813      	ldr	r3, [r2, #0]
1a001ac0:	f043 0301 	orr.w	r3, r3, #1
1a001ac4:	6013      	str	r3, [r2, #0]
1a001ac6:	2001      	movs	r0, #1
1a001ac8:	4770      	bx	lr
1a001aca:	bf00      	nop
1a001acc:	10000080 	.word	0x10000080
1a001ad0:	e0001000 	.word	0xe0001000

1a001ad4 <gpioObtainPinInit>:
1a001ad4:	b430      	push	{r4, r5}
1a001ad6:	4d0b      	ldr	r5, [pc, #44]	; (1a001b04 <gpioObtainPinInit+0x30>)
1a001ad8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a001adc:	182c      	adds	r4, r5, r0
1a001ade:	5628      	ldrsb	r0, [r5, r0]
1a001ae0:	7008      	strb	r0, [r1, #0]
1a001ae2:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a001ae6:	7011      	strb	r1, [r2, #0]
1a001ae8:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a001aec:	701a      	strb	r2, [r3, #0]
1a001aee:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a001af2:	9b02      	ldr	r3, [sp, #8]
1a001af4:	701a      	strb	r2, [r3, #0]
1a001af6:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a001afa:	9b03      	ldr	r3, [sp, #12]
1a001afc:	701a      	strb	r2, [r3, #0]
1a001afe:	bc30      	pop	{r4, r5}
1a001b00:	4770      	bx	lr
1a001b02:	bf00      	nop
1a001b04:	1a0038d4 	.word	0x1a0038d4

1a001b08 <gpioInit>:
1a001b08:	f110 0f02 	cmn.w	r0, #2
1a001b0c:	f000 80c7 	beq.w	1a001c9e <gpioInit+0x196>
1a001b10:	f1b0 3fff 	cmp.w	r0, #4294967295
1a001b14:	f000 80c5 	beq.w	1a001ca2 <gpioInit+0x19a>
1a001b18:	b570      	push	{r4, r5, r6, lr}
1a001b1a:	b084      	sub	sp, #16
1a001b1c:	460c      	mov	r4, r1
1a001b1e:	2300      	movs	r3, #0
1a001b20:	f88d 300f 	strb.w	r3, [sp, #15]
1a001b24:	f88d 300e 	strb.w	r3, [sp, #14]
1a001b28:	f88d 300d 	strb.w	r3, [sp, #13]
1a001b2c:	f88d 300c 	strb.w	r3, [sp, #12]
1a001b30:	f88d 300b 	strb.w	r3, [sp, #11]
1a001b34:	f10d 030b 	add.w	r3, sp, #11
1a001b38:	9301      	str	r3, [sp, #4]
1a001b3a:	ab03      	add	r3, sp, #12
1a001b3c:	9300      	str	r3, [sp, #0]
1a001b3e:	f10d 030d 	add.w	r3, sp, #13
1a001b42:	f10d 020e 	add.w	r2, sp, #14
1a001b46:	f10d 010f 	add.w	r1, sp, #15
1a001b4a:	f7ff ffc3 	bl	1a001ad4 <gpioObtainPinInit>
1a001b4e:	2c05      	cmp	r4, #5
1a001b50:	f200 80a9 	bhi.w	1a001ca6 <gpioInit+0x19e>
1a001b54:	e8df f004 	tbb	[pc, r4]
1a001b58:	45278109 	.word	0x45278109
1a001b5c:	0363      	.short	0x0363
1a001b5e:	4853      	ldr	r0, [pc, #332]	; (1a001cac <gpioInit+0x1a4>)
1a001b60:	f7ff f9bc 	bl	1a000edc <Chip_GPIO_Init>
1a001b64:	2001      	movs	r0, #1
1a001b66:	b004      	add	sp, #16
1a001b68:	bd70      	pop	{r4, r5, r6, pc}
1a001b6a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001b6e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001b72:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001b76:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a001b7a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001b7e:	494c      	ldr	r1, [pc, #304]	; (1a001cb0 <gpioInit+0x1a8>)
1a001b80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a001b84:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001b88:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001b8c:	2001      	movs	r0, #1
1a001b8e:	fa00 f102 	lsl.w	r1, r0, r2
1a001b92:	4c46      	ldr	r4, [pc, #280]	; (1a001cac <gpioInit+0x1a4>)
1a001b94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001b98:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001b9c:	ea22 0201 	bic.w	r2, r2, r1
1a001ba0:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001ba4:	e7df      	b.n	1a001b66 <gpioInit+0x5e>
1a001ba6:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001baa:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001bae:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001bb2:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a001bb6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001bba:	493d      	ldr	r1, [pc, #244]	; (1a001cb0 <gpioInit+0x1a8>)
1a001bbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a001bc0:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001bc4:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001bc8:	2001      	movs	r0, #1
1a001bca:	fa00 f102 	lsl.w	r1, r0, r2
1a001bce:	4c37      	ldr	r4, [pc, #220]	; (1a001cac <gpioInit+0x1a4>)
1a001bd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001bd4:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001bd8:	ea22 0201 	bic.w	r2, r2, r1
1a001bdc:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001be0:	e7c1      	b.n	1a001b66 <gpioInit+0x5e>
1a001be2:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001be6:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001bea:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001bee:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a001bf2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001bf6:	492e      	ldr	r1, [pc, #184]	; (1a001cb0 <gpioInit+0x1a8>)
1a001bf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a001bfc:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001c00:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001c04:	2001      	movs	r0, #1
1a001c06:	fa00 f102 	lsl.w	r1, r0, r2
1a001c0a:	4c28      	ldr	r4, [pc, #160]	; (1a001cac <gpioInit+0x1a4>)
1a001c0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001c10:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001c14:	ea22 0201 	bic.w	r2, r2, r1
1a001c18:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001c1c:	e7a3      	b.n	1a001b66 <gpioInit+0x5e>
1a001c1e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001c22:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001c26:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001c2a:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a001c2e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001c32:	491f      	ldr	r1, [pc, #124]	; (1a001cb0 <gpioInit+0x1a8>)
1a001c34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a001c38:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001c3c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001c40:	2001      	movs	r0, #1
1a001c42:	fa00 f102 	lsl.w	r1, r0, r2
1a001c46:	4c19      	ldr	r4, [pc, #100]	; (1a001cac <gpioInit+0x1a4>)
1a001c48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001c4c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001c50:	ea22 0201 	bic.w	r2, r2, r1
1a001c54:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001c58:	e785      	b.n	1a001b66 <gpioInit+0x5e>
1a001c5a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001c5e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001c62:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001c66:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a001c6a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001c6e:	4910      	ldr	r1, [pc, #64]	; (1a001cb0 <gpioInit+0x1a8>)
1a001c70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a001c74:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a001c78:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001c7c:	2001      	movs	r0, #1
1a001c7e:	fa00 f102 	lsl.w	r1, r0, r2
1a001c82:	4b0a      	ldr	r3, [pc, #40]	; (1a001cac <gpioInit+0x1a4>)
1a001c84:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a001c88:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a001c8c:	4331      	orrs	r1, r6
1a001c8e:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
1a001c92:	b2d2      	uxtb	r2, r2
1a001c94:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a001c98:	2100      	movs	r1, #0
1a001c9a:	5499      	strb	r1, [r3, r2]
1a001c9c:	e763      	b.n	1a001b66 <gpioInit+0x5e>
1a001c9e:	2000      	movs	r0, #0
1a001ca0:	4770      	bx	lr
1a001ca2:	2000      	movs	r0, #0
1a001ca4:	4770      	bx	lr
1a001ca6:	2000      	movs	r0, #0
1a001ca8:	e75d      	b.n	1a001b66 <gpioInit+0x5e>
1a001caa:	bf00      	nop
1a001cac:	400f4000 	.word	0x400f4000
1a001cb0:	40086000 	.word	0x40086000

1a001cb4 <gpioWrite>:
1a001cb4:	f110 0f02 	cmn.w	r0, #2
1a001cb8:	d02d      	beq.n	1a001d16 <gpioWrite+0x62>
1a001cba:	f1b0 3fff 	cmp.w	r0, #4294967295
1a001cbe:	d02c      	beq.n	1a001d1a <gpioWrite+0x66>
1a001cc0:	b510      	push	{r4, lr}
1a001cc2:	b084      	sub	sp, #16
1a001cc4:	460c      	mov	r4, r1
1a001cc6:	2300      	movs	r3, #0
1a001cc8:	f88d 300f 	strb.w	r3, [sp, #15]
1a001ccc:	f88d 300e 	strb.w	r3, [sp, #14]
1a001cd0:	f88d 300d 	strb.w	r3, [sp, #13]
1a001cd4:	f88d 300c 	strb.w	r3, [sp, #12]
1a001cd8:	f88d 300b 	strb.w	r3, [sp, #11]
1a001cdc:	f10d 030b 	add.w	r3, sp, #11
1a001ce0:	9301      	str	r3, [sp, #4]
1a001ce2:	ab03      	add	r3, sp, #12
1a001ce4:	9300      	str	r3, [sp, #0]
1a001ce6:	f10d 030d 	add.w	r3, sp, #13
1a001cea:	f10d 020e 	add.w	r2, sp, #14
1a001cee:	f10d 010f 	add.w	r1, sp, #15
1a001cf2:	f7ff feef 	bl	1a001ad4 <gpioObtainPinInit>
1a001cf6:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001cfa:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a001cfe:	1c21      	adds	r1, r4, #0
1a001d00:	bf18      	it	ne
1a001d02:	2101      	movne	r1, #1
1a001d04:	015b      	lsls	r3, r3, #5
1a001d06:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a001d0a:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a001d0e:	5499      	strb	r1, [r3, r2]
1a001d10:	2001      	movs	r0, #1
1a001d12:	b004      	add	sp, #16
1a001d14:	bd10      	pop	{r4, pc}
1a001d16:	2000      	movs	r0, #0
1a001d18:	4770      	bx	lr
1a001d1a:	2000      	movs	r0, #0
1a001d1c:	4770      	bx	lr

1a001d1e <gpioRead>:
1a001d1e:	f110 0f02 	cmn.w	r0, #2
1a001d22:	d02c      	beq.n	1a001d7e <gpioRead+0x60>
1a001d24:	f1b0 3fff 	cmp.w	r0, #4294967295
1a001d28:	d02b      	beq.n	1a001d82 <gpioRead+0x64>
1a001d2a:	b500      	push	{lr}
1a001d2c:	b085      	sub	sp, #20
1a001d2e:	2300      	movs	r3, #0
1a001d30:	f88d 300f 	strb.w	r3, [sp, #15]
1a001d34:	f88d 300e 	strb.w	r3, [sp, #14]
1a001d38:	f88d 300d 	strb.w	r3, [sp, #13]
1a001d3c:	f88d 300c 	strb.w	r3, [sp, #12]
1a001d40:	f88d 300b 	strb.w	r3, [sp, #11]
1a001d44:	f10d 030b 	add.w	r3, sp, #11
1a001d48:	9301      	str	r3, [sp, #4]
1a001d4a:	ab03      	add	r3, sp, #12
1a001d4c:	9300      	str	r3, [sp, #0]
1a001d4e:	f10d 030d 	add.w	r3, sp, #13
1a001d52:	f10d 020e 	add.w	r2, sp, #14
1a001d56:	f10d 010f 	add.w	r1, sp, #15
1a001d5a:	f7ff febb 	bl	1a001ad4 <gpioObtainPinInit>
1a001d5e:	f99d 300c 	ldrsb.w	r3, [sp, #12]
1a001d62:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a001d66:	015b      	lsls	r3, r3, #5
1a001d68:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a001d6c:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a001d70:	5c98      	ldrb	r0, [r3, r2]
1a001d72:	3000      	adds	r0, #0
1a001d74:	bf18      	it	ne
1a001d76:	2001      	movne	r0, #1
1a001d78:	b005      	add	sp, #20
1a001d7a:	f85d fb04 	ldr.w	pc, [sp], #4
1a001d7e:	2001      	movs	r0, #1
1a001d80:	4770      	bx	lr
1a001d82:	2000      	movs	r0, #0
1a001d84:	4770      	bx	lr
1a001d86:	Address 0x1a001d86 is out of bounds.


1a001d88 <adcInit>:
1a001d88:	b530      	push	{r4, r5, lr}
1a001d8a:	b083      	sub	sp, #12
1a001d8c:	b118      	cbz	r0, 1a001d96 <adcInit+0xe>
1a001d8e:	2801      	cmp	r0, #1
1a001d90:	d04a      	beq.n	1a001e28 <adcInit+0xa0>
1a001d92:	b003      	add	sp, #12
1a001d94:	bd30      	pop	{r4, r5, pc}
1a001d96:	4b26      	ldr	r3, [pc, #152]	; (1a001e30 <adcInit+0xa8>)
1a001d98:	466d      	mov	r5, sp
1a001d9a:	e893 0003 	ldmia.w	r3, {r0, r1}
1a001d9e:	e885 0003 	stmia.w	r5, {r0, r1}
1a001da2:	4c24      	ldr	r4, [pc, #144]	; (1a001e34 <adcInit+0xac>)
1a001da4:	4629      	mov	r1, r5
1a001da6:	4620      	mov	r0, r4
1a001da8:	f7ff f8d0 	bl	1a000f4c <Chip_ADC_Init>
1a001dac:	2100      	movs	r1, #0
1a001dae:	4620      	mov	r0, r4
1a001db0:	f7ff f96b 	bl	1a00108a <Chip_ADC_SetBurstCmd>
1a001db4:	4a20      	ldr	r2, [pc, #128]	; (1a001e38 <adcInit+0xb0>)
1a001db6:	4629      	mov	r1, r5
1a001db8:	4620      	mov	r0, r4
1a001dba:	f7ff f932 	bl	1a001022 <Chip_ADC_SetSampleRate>
1a001dbe:	2200      	movs	r2, #0
1a001dc0:	2101      	movs	r1, #1
1a001dc2:	4620      	mov	r0, r4
1a001dc4:	f7ff f94c 	bl	1a001060 <Chip_ADC_EnableChannel>
1a001dc8:	2200      	movs	r2, #0
1a001dca:	2101      	movs	r1, #1
1a001dcc:	4620      	mov	r0, r4
1a001dce:	f7ff f907 	bl	1a000fe0 <Chip_ADC_Int_SetChannelCmd>
1a001dd2:	2200      	movs	r2, #0
1a001dd4:	2102      	movs	r1, #2
1a001dd6:	4620      	mov	r0, r4
1a001dd8:	f7ff f942 	bl	1a001060 <Chip_ADC_EnableChannel>
1a001ddc:	2200      	movs	r2, #0
1a001dde:	2102      	movs	r1, #2
1a001de0:	4620      	mov	r0, r4
1a001de2:	f7ff f8fd 	bl	1a000fe0 <Chip_ADC_Int_SetChannelCmd>
1a001de6:	2200      	movs	r2, #0
1a001de8:	2103      	movs	r1, #3
1a001dea:	4620      	mov	r0, r4
1a001dec:	f7ff f938 	bl	1a001060 <Chip_ADC_EnableChannel>
1a001df0:	2200      	movs	r2, #0
1a001df2:	2103      	movs	r1, #3
1a001df4:	4620      	mov	r0, r4
1a001df6:	f7ff f8f3 	bl	1a000fe0 <Chip_ADC_Int_SetChannelCmd>
1a001dfa:	2200      	movs	r2, #0
1a001dfc:	2104      	movs	r1, #4
1a001dfe:	4620      	mov	r0, r4
1a001e00:	f7ff f92e 	bl	1a001060 <Chip_ADC_EnableChannel>
1a001e04:	2200      	movs	r2, #0
1a001e06:	2104      	movs	r1, #4
1a001e08:	4620      	mov	r0, r4
1a001e0a:	f7ff f8e9 	bl	1a000fe0 <Chip_ADC_Int_SetChannelCmd>
1a001e0e:	4a0b      	ldr	r2, [pc, #44]	; (1a001e3c <adcInit+0xb4>)
1a001e10:	f8d2 3c88 	ldr.w	r3, [r2, #3208]	; 0xc88
1a001e14:	f043 0310 	orr.w	r3, r3, #16
1a001e18:	f8c2 3c88 	str.w	r3, [r2, #3208]	; 0xc88
1a001e1c:	2200      	movs	r2, #0
1a001e1e:	2105      	movs	r1, #5
1a001e20:	4620      	mov	r0, r4
1a001e22:	f7ff f8dd 	bl	1a000fe0 <Chip_ADC_Int_SetChannelCmd>
1a001e26:	e7b4      	b.n	1a001d92 <adcInit+0xa>
1a001e28:	4802      	ldr	r0, [pc, #8]	; (1a001e34 <adcInit+0xac>)
1a001e2a:	f7ff f8af 	bl	1a000f8c <Chip_ADC_DeInit>
1a001e2e:	e7b0      	b.n	1a001d92 <adcInit+0xa>
1a001e30:	1a0039bc 	.word	0x1a0039bc
1a001e34:	400e3000 	.word	0x400e3000
1a001e38:	00030d40 	.word	0x00030d40
1a001e3c:	40086000 	.word	0x40086000

1a001e40 <adcRead>:
1a001e40:	b570      	push	{r4, r5, r6, lr}
1a001e42:	b082      	sub	sp, #8
1a001e44:	3001      	adds	r0, #1
1a001e46:	b2c4      	uxtb	r4, r0
1a001e48:	2600      	movs	r6, #0
1a001e4a:	f8ad 6006 	strh.w	r6, [sp, #6]
1a001e4e:	4d11      	ldr	r5, [pc, #68]	; (1a001e94 <adcRead+0x54>)
1a001e50:	2201      	movs	r2, #1
1a001e52:	4621      	mov	r1, r4
1a001e54:	4628      	mov	r0, r5
1a001e56:	f7ff f903 	bl	1a001060 <Chip_ADC_EnableChannel>
1a001e5a:	4632      	mov	r2, r6
1a001e5c:	2101      	movs	r1, #1
1a001e5e:	4628      	mov	r0, r5
1a001e60:	f7ff f8cf 	bl	1a001002 <Chip_ADC_SetStartMode>
1a001e64:	2200      	movs	r2, #0
1a001e66:	4621      	mov	r1, r4
1a001e68:	480a      	ldr	r0, [pc, #40]	; (1a001e94 <adcRead+0x54>)
1a001e6a:	f7ff f89e 	bl	1a000faa <Chip_ADC_ReadStatus>
1a001e6e:	2801      	cmp	r0, #1
1a001e70:	d1f8      	bne.n	1a001e64 <adcRead+0x24>
1a001e72:	4d08      	ldr	r5, [pc, #32]	; (1a001e94 <adcRead+0x54>)
1a001e74:	f10d 0206 	add.w	r2, sp, #6
1a001e78:	4621      	mov	r1, r4
1a001e7a:	4628      	mov	r0, r5
1a001e7c:	f7ff f891 	bl	1a000fa2 <Chip_ADC_ReadValue>
1a001e80:	2200      	movs	r2, #0
1a001e82:	4621      	mov	r1, r4
1a001e84:	4628      	mov	r0, r5
1a001e86:	f7ff f8eb 	bl	1a001060 <Chip_ADC_EnableChannel>
1a001e8a:	f8bd 0006 	ldrh.w	r0, [sp, #6]
1a001e8e:	b002      	add	sp, #8
1a001e90:	bd70      	pop	{r4, r5, r6, pc}
1a001e92:	bf00      	nop
1a001e94:	400e3000 	.word	0x400e3000

1a001e98 <tickRead>:
1a001e98:	4b01      	ldr	r3, [pc, #4]	; (1a001ea0 <tickRead+0x8>)
1a001e9a:	e9d3 0100 	ldrd	r0, r1, [r3]
1a001e9e:	4770      	bx	lr
1a001ea0:	10000130 	.word	0x10000130

1a001ea4 <tickPowerSet>:
1a001ea4:	b118      	cbz	r0, 1a001eae <tickPowerSet+0xa>
1a001ea6:	4b04      	ldr	r3, [pc, #16]	; (1a001eb8 <tickPowerSet+0x14>)
1a001ea8:	2207      	movs	r2, #7
1a001eaa:	601a      	str	r2, [r3, #0]
1a001eac:	4770      	bx	lr
1a001eae:	4b02      	ldr	r3, [pc, #8]	; (1a001eb8 <tickPowerSet+0x14>)
1a001eb0:	2200      	movs	r2, #0
1a001eb2:	601a      	str	r2, [r3, #0]
1a001eb4:	4770      	bx	lr
1a001eb6:	bf00      	nop
1a001eb8:	e000e010 	.word	0xe000e010

1a001ebc <tickInit>:
1a001ebc:	b538      	push	{r3, r4, r5, lr}
1a001ebe:	ea50 0401 	orrs.w	r4, r0, r1
1a001ec2:	d02a      	beq.n	1a001f1a <tickInit+0x5e>
1a001ec4:	f110 32ff 	adds.w	r2, r0, #4294967295
1a001ec8:	f141 33ff 	adc.w	r3, r1, #4294967295
1a001ecc:	2b00      	cmp	r3, #0
1a001ece:	bf08      	it	eq
1a001ed0:	2a32      	cmpeq	r2, #50	; 0x32
1a001ed2:	d227      	bcs.n	1a001f24 <tickInit+0x68>
1a001ed4:	4b14      	ldr	r3, [pc, #80]	; (1a001f28 <tickInit+0x6c>)
1a001ed6:	e9c3 0100 	strd	r0, r1, [r3]
1a001eda:	4b14      	ldr	r3, [pc, #80]	; (1a001f2c <tickInit+0x70>)
1a001edc:	681b      	ldr	r3, [r3, #0]
1a001ede:	fba3 4500 	umull	r4, r5, r3, r0
1a001ee2:	fb03 5501 	mla	r5, r3, r1, r5
1a001ee6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a001eea:	2300      	movs	r3, #0
1a001eec:	4620      	mov	r0, r4
1a001eee:	4629      	mov	r1, r5
1a001ef0:	f000 fd62 	bl	1a0029b8 <__aeabi_uldivmod>
1a001ef4:	3801      	subs	r0, #1
1a001ef6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
1a001efa:	d209      	bcs.n	1a001f10 <tickInit+0x54>
1a001efc:	4b0c      	ldr	r3, [pc, #48]	; (1a001f30 <tickInit+0x74>)
1a001efe:	6058      	str	r0, [r3, #4]
1a001f00:	4a0c      	ldr	r2, [pc, #48]	; (1a001f34 <tickInit+0x78>)
1a001f02:	21e0      	movs	r1, #224	; 0xe0
1a001f04:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
1a001f08:	2200      	movs	r2, #0
1a001f0a:	609a      	str	r2, [r3, #8]
1a001f0c:	2207      	movs	r2, #7
1a001f0e:	601a      	str	r2, [r3, #0]
1a001f10:	2001      	movs	r0, #1
1a001f12:	f7ff ffc7 	bl	1a001ea4 <tickPowerSet>
1a001f16:	2001      	movs	r0, #1
1a001f18:	bd38      	pop	{r3, r4, r5, pc}
1a001f1a:	2000      	movs	r0, #0
1a001f1c:	f7ff ffc2 	bl	1a001ea4 <tickPowerSet>
1a001f20:	2000      	movs	r0, #0
1a001f22:	e7f9      	b.n	1a001f18 <tickInit+0x5c>
1a001f24:	2000      	movs	r0, #0
1a001f26:	e7f7      	b.n	1a001f18 <tickInit+0x5c>
1a001f28:	10000088 	.word	0x10000088
1a001f2c:	1000018c 	.word	0x1000018c
1a001f30:	e000e010 	.word	0xe000e010
1a001f34:	e000ed00 	.word	0xe000ed00

1a001f38 <SysTick_Handler>:
1a001f38:	b508      	push	{r3, lr}
1a001f3a:	4a07      	ldr	r2, [pc, #28]	; (1a001f58 <SysTick_Handler+0x20>)
1a001f3c:	6813      	ldr	r3, [r2, #0]
1a001f3e:	6851      	ldr	r1, [r2, #4]
1a001f40:	3301      	adds	r3, #1
1a001f42:	f141 0100 	adc.w	r1, r1, #0
1a001f46:	6013      	str	r3, [r2, #0]
1a001f48:	6051      	str	r1, [r2, #4]
1a001f4a:	4b04      	ldr	r3, [pc, #16]	; (1a001f5c <SysTick_Handler+0x24>)
1a001f4c:	681b      	ldr	r3, [r3, #0]
1a001f4e:	b113      	cbz	r3, 1a001f56 <SysTick_Handler+0x1e>
1a001f50:	4a03      	ldr	r2, [pc, #12]	; (1a001f60 <SysTick_Handler+0x28>)
1a001f52:	6810      	ldr	r0, [r2, #0]
1a001f54:	4798      	blx	r3
1a001f56:	bd08      	pop	{r3, pc}
1a001f58:	10000130 	.word	0x10000130
1a001f5c:	10000138 	.word	0x10000138
1a001f60:	10000128 	.word	0x10000128

1a001f64 <CDC_ep0_override_hdlr>:
1a001f64:	b538      	push	{r3, r4, r5, lr}
1a001f66:	4604      	mov	r4, r0
1a001f68:	4608      	mov	r0, r1
1a001f6a:	2a02      	cmp	r2, #2
1a001f6c:	d007      	beq.n	1a001f7e <CDC_ep0_override_hdlr+0x1a>
1a001f6e:	4b1b      	ldr	r3, [pc, #108]	; (1a001fdc <CDC_ep0_override_hdlr+0x78>)
1a001f70:	681b      	ldr	r3, [r3, #0]
1a001f72:	4601      	mov	r1, r0
1a001f74:	4620      	mov	r0, r4
1a001f76:	4798      	blx	r3
1a001f78:	4605      	mov	r5, r0
1a001f7a:	4628      	mov	r0, r5
1a001f7c:	bd38      	pop	{r3, r4, r5, pc}
1a001f7e:	f894 3174 	ldrb.w	r3, [r4, #372]	; 0x174
1a001f82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
1a001f86:	2b21      	cmp	r3, #33	; 0x21
1a001f88:	d1f1      	bne.n	1a001f6e <CDC_ep0_override_hdlr+0xa>
1a001f8a:	f991 301a 	ldrsb.w	r3, [r1, #26]
1a001f8e:	2b00      	cmp	r3, #0
1a001f90:	db0a      	blt.n	1a001fa8 <CDC_ep0_override_hdlr+0x44>
1a001f92:	7dca      	ldrb	r2, [r1, #23]
1a001f94:	7e09      	ldrb	r1, [r1, #24]
1a001f96:	6c05      	ldr	r5, [r0, #64]	; 0x40
1a001f98:	f894 3178 	ldrb.w	r3, [r4, #376]	; 0x178
1a001f9c:	4293      	cmp	r3, r2
1a001f9e:	d007      	beq.n	1a001fb0 <CDC_ep0_override_hdlr+0x4c>
1a001fa0:	428b      	cmp	r3, r1
1a001fa2:	d005      	beq.n	1a001fb0 <CDC_ep0_override_hdlr+0x4c>
1a001fa4:	4d0e      	ldr	r5, [pc, #56]	; (1a001fe0 <CDC_ep0_override_hdlr+0x7c>)
1a001fa6:	e7e8      	b.n	1a001f7a <CDC_ep0_override_hdlr+0x16>
1a001fa8:	7e0a      	ldrb	r2, [r1, #24]
1a001faa:	7e49      	ldrb	r1, [r1, #25]
1a001fac:	6c45      	ldr	r5, [r0, #68]	; 0x44
1a001fae:	e7f3      	b.n	1a001f98 <CDC_ep0_override_hdlr+0x34>
1a001fb0:	f8b4 317a 	ldrh.w	r3, [r4, #378]	; 0x17a
1a001fb4:	f8d4 212c 	ldr.w	r2, [r4, #300]	; 0x12c
1a001fb8:	1ad2      	subs	r2, r2, r3
1a001fba:	f8c4 212c 	str.w	r2, [r4, #300]	; 0x12c
1a001fbe:	f504 7296 	add.w	r2, r4, #300	; 0x12c
1a001fc2:	f504 71ba 	add.w	r1, r4, #372	; 0x174
1a001fc6:	47a8      	blx	r5
1a001fc8:	4605      	mov	r5, r0
1a001fca:	2800      	cmp	r0, #0
1a001fcc:	d1d5      	bne.n	1a001f7a <CDC_ep0_override_hdlr+0x16>
1a001fce:	4b05      	ldr	r3, [pc, #20]	; (1a001fe4 <CDC_ep0_override_hdlr+0x80>)
1a001fd0:	681b      	ldr	r3, [r3, #0]
1a001fd2:	685b      	ldr	r3, [r3, #4]
1a001fd4:	695b      	ldr	r3, [r3, #20]
1a001fd6:	4620      	mov	r0, r4
1a001fd8:	4798      	blx	r3
1a001fda:	e7ce      	b.n	1a001f7a <CDC_ep0_override_hdlr+0x16>
1a001fdc:	1000013c 	.word	0x1000013c
1a001fe0:	00040002 	.word	0x00040002
1a001fe4:	10000190 	.word	0x10000190

1a001fe8 <UCOM_bulk_hdlr>:
1a001fe8:	b570      	push	{r4, r5, r6, lr}
1a001fea:	460c      	mov	r4, r1
1a001fec:	2a03      	cmp	r2, #3
1a001fee:	d005      	beq.n	1a001ffc <UCOM_bulk_hdlr+0x14>
1a001ff0:	2a04      	cmp	r2, #4
1a001ff2:	d022      	beq.n	1a00203a <UCOM_bulk_hdlr+0x52>
1a001ff4:	2a02      	cmp	r2, #2
1a001ff6:	d02f      	beq.n	1a002058 <UCOM_bulk_hdlr+0x70>
1a001ff8:	2000      	movs	r0, #0
1a001ffa:	bd70      	pop	{r4, r5, r6, pc}
1a001ffc:	7d0a      	ldrb	r2, [r1, #20]
1a001ffe:	7d4b      	ldrb	r3, [r1, #21]
1a002000:	429a      	cmp	r2, r3
1a002002:	d215      	bcs.n	1a002030 <UCOM_bulk_hdlr+0x48>
1a002004:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
1a002008:	b1a3      	cbz	r3, 1a002034 <UCOM_bulk_hdlr+0x4c>
1a00200a:	2201      	movs	r2, #1
1a00200c:	75a2      	strb	r2, [r4, #22]
1a00200e:	4a23      	ldr	r2, [pc, #140]	; (1a00209c <UCOM_bulk_hdlr+0xb4>)
1a002010:	6812      	ldr	r2, [r2, #0]
1a002012:	6812      	ldr	r2, [r2, #0]
1a002014:	6d16      	ldr	r6, [r2, #80]	; 0x50
1a002016:	68a1      	ldr	r1, [r4, #8]
1a002018:	4d21      	ldr	r5, [pc, #132]	; (1a0020a0 <UCOM_bulk_hdlr+0xb8>)
1a00201a:	7d6a      	ldrb	r2, [r5, #21]
1a00201c:	440a      	add	r2, r1
1a00201e:	2181      	movs	r1, #129	; 0x81
1a002020:	6820      	ldr	r0, [r4, #0]
1a002022:	47b0      	blx	r6
1a002024:	7d6b      	ldrb	r3, [r5, #21]
1a002026:	4418      	add	r0, r3
1a002028:	f000 003f 	and.w	r0, r0, #63	; 0x3f
1a00202c:	7568      	strb	r0, [r5, #21]
1a00202e:	e7e3      	b.n	1a001ff8 <UCOM_bulk_hdlr+0x10>
1a002030:	1ad3      	subs	r3, r2, r3
1a002032:	e7e9      	b.n	1a002008 <UCOM_bulk_hdlr+0x20>
1a002034:	2300      	movs	r3, #0
1a002036:	75a3      	strb	r3, [r4, #22]
1a002038:	e7de      	b.n	1a001ff8 <UCOM_bulk_hdlr+0x10>
1a00203a:	7dcb      	ldrb	r3, [r1, #23]
1a00203c:	2b00      	cmp	r3, #0
1a00203e:	d1db      	bne.n	1a001ff8 <UCOM_bulk_hdlr+0x10>
1a002040:	4b16      	ldr	r3, [pc, #88]	; (1a00209c <UCOM_bulk_hdlr+0xb4>)
1a002042:	681b      	ldr	r3, [r3, #0]
1a002044:	681b      	ldr	r3, [r3, #0]
1a002046:	6c9d      	ldr	r5, [r3, #72]	; 0x48
1a002048:	f44f 7300 	mov.w	r3, #512	; 0x200
1a00204c:	68ca      	ldr	r2, [r1, #12]
1a00204e:	2101      	movs	r1, #1
1a002050:	47a8      	blx	r5
1a002052:	2301      	movs	r3, #1
1a002054:	75e3      	strb	r3, [r4, #23]
1a002056:	e7cf      	b.n	1a001ff8 <UCOM_bulk_hdlr+0x10>
1a002058:	4b12      	ldr	r3, [pc, #72]	; (1a0020a4 <UCOM_bulk_hdlr+0xbc>)
1a00205a:	685b      	ldr	r3, [r3, #4]
1a00205c:	f013 0f02 	tst.w	r3, #2
1a002060:	d1ca      	bne.n	1a001ff8 <UCOM_bulk_hdlr+0x10>
1a002062:	4b0e      	ldr	r3, [pc, #56]	; (1a00209c <UCOM_bulk_hdlr+0xb4>)
1a002064:	681b      	ldr	r3, [r3, #0]
1a002066:	681b      	ldr	r3, [r3, #0]
1a002068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
1a00206a:	68ca      	ldr	r2, [r1, #12]
1a00206c:	2101      	movs	r1, #1
1a00206e:	4798      	blx	r3
1a002070:	b202      	sxth	r2, r0
1a002072:	8262      	strh	r2, [r4, #18]
1a002074:	2300      	movs	r3, #0
1a002076:	8223      	strh	r3, [r4, #16]
1a002078:	68e1      	ldr	r1, [r4, #12]
1a00207a:	4b09      	ldr	r3, [pc, #36]	; (1a0020a0 <UCOM_bulk_hdlr+0xb8>)
1a00207c:	8a1b      	ldrh	r3, [r3, #16]
1a00207e:	4d09      	ldr	r5, [pc, #36]	; (1a0020a4 <UCOM_bulk_hdlr+0xbc>)
1a002080:	4419      	add	r1, r3
1a002082:	4628      	mov	r0, r5
1a002084:	f7ff fc5a 	bl	1a00193c <Chip_UART_Send>
1a002088:	b280      	uxth	r0, r0
1a00208a:	8220      	strh	r0, [r4, #16]
1a00208c:	8a63      	ldrh	r3, [r4, #18]
1a00208e:	1a1b      	subs	r3, r3, r0
1a002090:	8263      	strh	r3, [r4, #18]
1a002092:	686b      	ldr	r3, [r5, #4]
1a002094:	f043 0302 	orr.w	r3, r3, #2
1a002098:	606b      	str	r3, [r5, #4]
1a00209a:	e7ad      	b.n	1a001ff8 <UCOM_bulk_hdlr+0x10>
1a00209c:	10000190 	.word	0x10000190
1a0020a0:	10000140 	.word	0x10000140
1a0020a4:	400c1000 	.word	0x400c1000

1a0020a8 <UCOM_SetLineCode>:
1a0020a8:	b510      	push	{r4, lr}
1a0020aa:	798b      	ldrb	r3, [r1, #6]
1a0020ac:	2b06      	cmp	r3, #6
1a0020ae:	d011      	beq.n	1a0020d4 <UCOM_SetLineCode+0x2c>
1a0020b0:	2b07      	cmp	r3, #7
1a0020b2:	d011      	beq.n	1a0020d8 <UCOM_SetLineCode+0x30>
1a0020b4:	2b05      	cmp	r3, #5
1a0020b6:	d011      	beq.n	1a0020dc <UCOM_SetLineCode+0x34>
1a0020b8:	2403      	movs	r4, #3
1a0020ba:	790a      	ldrb	r2, [r1, #4]
1a0020bc:	2a01      	cmp	r2, #1
1a0020be:	d00f      	beq.n	1a0020e0 <UCOM_SetLineCode+0x38>
1a0020c0:	2a02      	cmp	r2, #2
1a0020c2:	d012      	beq.n	1a0020ea <UCOM_SetLineCode+0x42>
1a0020c4:	794b      	ldrb	r3, [r1, #5]
1a0020c6:	3b01      	subs	r3, #1
1a0020c8:	2b03      	cmp	r3, #3
1a0020ca:	d815      	bhi.n	1a0020f8 <UCOM_SetLineCode+0x50>
1a0020cc:	e8df f003 	tbb	[pc, r3]
1a0020d0:	221f1c12 	.word	0x221f1c12
1a0020d4:	2401      	movs	r4, #1
1a0020d6:	e7f0      	b.n	1a0020ba <UCOM_SetLineCode+0x12>
1a0020d8:	2402      	movs	r4, #2
1a0020da:	e7ee      	b.n	1a0020ba <UCOM_SetLineCode+0x12>
1a0020dc:	2400      	movs	r4, #0
1a0020de:	e7ec      	b.n	1a0020ba <UCOM_SetLineCode+0x12>
1a0020e0:	2b05      	cmp	r3, #5
1a0020e2:	d11e      	bne.n	1a002122 <UCOM_SetLineCode+0x7a>
1a0020e4:	f044 0404 	orr.w	r4, r4, #4
1a0020e8:	e7ec      	b.n	1a0020c4 <UCOM_SetLineCode+0x1c>
1a0020ea:	2b05      	cmp	r3, #5
1a0020ec:	d01b      	beq.n	1a002126 <UCOM_SetLineCode+0x7e>
1a0020ee:	f044 0404 	orr.w	r4, r4, #4
1a0020f2:	e7e7      	b.n	1a0020c4 <UCOM_SetLineCode+0x1c>
1a0020f4:	f044 0408 	orr.w	r4, r4, #8
1a0020f8:	6809      	ldr	r1, [r1, #0]
1a0020fa:	4b0c      	ldr	r3, [pc, #48]	; (1a00212c <UCOM_SetLineCode+0x84>)
1a0020fc:	4299      	cmp	r1, r3
1a0020fe:	d90c      	bls.n	1a00211a <UCOM_SetLineCode+0x72>
1a002100:	4b0b      	ldr	r3, [pc, #44]	; (1a002130 <UCOM_SetLineCode+0x88>)
1a002102:	60dc      	str	r4, [r3, #12]
1a002104:	2000      	movs	r0, #0
1a002106:	bd10      	pop	{r4, pc}
1a002108:	f044 0418 	orr.w	r4, r4, #24
1a00210c:	e7f4      	b.n	1a0020f8 <UCOM_SetLineCode+0x50>
1a00210e:	f044 0428 	orr.w	r4, r4, #40	; 0x28
1a002112:	e7f1      	b.n	1a0020f8 <UCOM_SetLineCode+0x50>
1a002114:	f044 0438 	orr.w	r4, r4, #56	; 0x38
1a002118:	e7ee      	b.n	1a0020f8 <UCOM_SetLineCode+0x50>
1a00211a:	4805      	ldr	r0, [pc, #20]	; (1a002130 <UCOM_SetLineCode+0x88>)
1a00211c:	f7ff fc22 	bl	1a001964 <Chip_UART_SetBaud>
1a002120:	e7ee      	b.n	1a002100 <UCOM_SetLineCode+0x58>
1a002122:	4804      	ldr	r0, [pc, #16]	; (1a002134 <UCOM_SetLineCode+0x8c>)
1a002124:	e7ef      	b.n	1a002106 <UCOM_SetLineCode+0x5e>
1a002126:	4803      	ldr	r0, [pc, #12]	; (1a002134 <UCOM_SetLineCode+0x8c>)
1a002128:	e7ed      	b.n	1a002106 <UCOM_SetLineCode+0x5e>
1a00212a:	bf00      	nop
1a00212c:	002faf07 	.word	0x002faf07
1a002130:	400c1000 	.word	0x400c1000
1a002134:	00040002 	.word	0x00040002

1a002138 <cdcUartLpcInit>:
1a002138:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00213a:	b093      	sub	sp, #76	; 0x4c
1a00213c:	4604      	mov	r4, r0
1a00213e:	460f      	mov	r7, r1
1a002140:	4615      	mov	r5, r2
1a002142:	4e2e      	ldr	r6, [pc, #184]	; (1a0021fc <cdcUartLpcInit+0xc4>)
1a002144:	f846 0b04 	str.w	r0, [r6], #4
1a002148:	2248      	movs	r2, #72	; 0x48
1a00214a:	2100      	movs	r1, #0
1a00214c:	4668      	mov	r0, sp
1a00214e:	f000 ff92 	bl	1a003076 <memset>
1a002152:	686b      	ldr	r3, [r5, #4]
1a002154:	9300      	str	r3, [sp, #0]
1a002156:	68ab      	ldr	r3, [r5, #8]
1a002158:	9301      	str	r3, [sp, #4]
1a00215a:	2102      	movs	r1, #2
1a00215c:	68f8      	ldr	r0, [r7, #12]
1a00215e:	f000 f997 	bl	1a002490 <find_IntfDesc>
1a002162:	9002      	str	r0, [sp, #8]
1a002164:	210a      	movs	r1, #10
1a002166:	68f8      	ldr	r0, [r7, #12]
1a002168:	f000 f992 	bl	1a002490 <find_IntfDesc>
1a00216c:	9003      	str	r0, [sp, #12]
1a00216e:	4b24      	ldr	r3, [pc, #144]	; (1a002200 <cdcUartLpcInit+0xc8>)
1a002170:	930f      	str	r3, [sp, #60]	; 0x3c
1a002172:	4b24      	ldr	r3, [pc, #144]	; (1a002204 <cdcUartLpcInit+0xcc>)
1a002174:	681b      	ldr	r3, [r3, #0]
1a002176:	695b      	ldr	r3, [r3, #20]
1a002178:	685b      	ldr	r3, [r3, #4]
1a00217a:	4632      	mov	r2, r6
1a00217c:	4669      	mov	r1, sp
1a00217e:	4620      	mov	r0, r4
1a002180:	4798      	blx	r3
1a002182:	4603      	mov	r3, r0
1a002184:	2800      	cmp	r0, #0
1a002186:	d135      	bne.n	1a0021f4 <cdcUartLpcInit+0xbc>
1a002188:	9a00      	ldr	r2, [sp, #0]
1a00218a:	4b1c      	ldr	r3, [pc, #112]	; (1a0021fc <cdcUartLpcInit+0xc4>)
1a00218c:	60da      	str	r2, [r3, #12]
1a00218e:	f502 7100 	add.w	r1, r2, #512	; 0x200
1a002192:	6099      	str	r1, [r3, #8]
1a002194:	f502 7210 	add.w	r2, r2, #576	; 0x240
1a002198:	9200      	str	r2, [sp, #0]
1a00219a:	9a01      	ldr	r2, [sp, #4]
1a00219c:	f5a2 7210 	sub.w	r2, r2, #576	; 0x240
1a0021a0:	9201      	str	r2, [sp, #4]
1a0021a2:	4a18      	ldr	r2, [pc, #96]	; (1a002204 <cdcUartLpcInit+0xcc>)
1a0021a4:	6812      	ldr	r2, [r2, #0]
1a0021a6:	6852      	ldr	r2, [r2, #4]
1a0021a8:	6856      	ldr	r6, [r2, #4]
1a0021aa:	4a17      	ldr	r2, [pc, #92]	; (1a002208 <cdcUartLpcInit+0xd0>)
1a0021ac:	2103      	movs	r1, #3
1a0021ae:	4620      	mov	r0, r4
1a0021b0:	47b0      	blx	r6
1a0021b2:	4603      	mov	r3, r0
1a0021b4:	b9d0      	cbnz	r0, 1a0021ec <cdcUartLpcInit+0xb4>
1a0021b6:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
1a0021ba:	332d      	adds	r3, #45	; 0x2d
1a0021bc:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
1a0021c0:	4a12      	ldr	r2, [pc, #72]	; (1a00220c <cdcUartLpcInit+0xd4>)
1a0021c2:	6011      	str	r1, [r2, #0]
1a0021c4:	4a12      	ldr	r2, [pc, #72]	; (1a002210 <cdcUartLpcInit+0xd8>)
1a0021c6:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0021ca:	4b0e      	ldr	r3, [pc, #56]	; (1a002204 <cdcUartLpcInit+0xcc>)
1a0021cc:	681b      	ldr	r3, [r3, #0]
1a0021ce:	685b      	ldr	r3, [r3, #4]
1a0021d0:	685f      	ldr	r7, [r3, #4]
1a0021d2:	4e0a      	ldr	r6, [pc, #40]	; (1a0021fc <cdcUartLpcInit+0xc4>)
1a0021d4:	4633      	mov	r3, r6
1a0021d6:	4a0c      	ldr	r2, [pc, #48]	; (1a002208 <cdcUartLpcInit+0xd0>)
1a0021d8:	2102      	movs	r1, #2
1a0021da:	4620      	mov	r0, r4
1a0021dc:	47b8      	blx	r7
1a0021de:	4603      	mov	r3, r0
1a0021e0:	6872      	ldr	r2, [r6, #4]
1a0021e2:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a0021e6:	6111      	str	r1, [r2, #16]
1a0021e8:	2108      	movs	r1, #8
1a0021ea:	7591      	strb	r1, [r2, #22]
1a0021ec:	9a00      	ldr	r2, [sp, #0]
1a0021ee:	606a      	str	r2, [r5, #4]
1a0021f0:	9a01      	ldr	r2, [sp, #4]
1a0021f2:	60aa      	str	r2, [r5, #8]
1a0021f4:	4618      	mov	r0, r3
1a0021f6:	b013      	add	sp, #76	; 0x4c
1a0021f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a0021fa:	bf00      	nop
1a0021fc:	10000140 	.word	0x10000140
1a002200:	1a0020a9 	.word	0x1a0020a9
1a002204:	10000190 	.word	0x10000190
1a002208:	1a001fe9 	.word	0x1a001fe9
1a00220c:	1000013c 	.word	0x1000013c
1a002210:	1a001f65 	.word	0x1a001f65

1a002214 <Keyboard_EpIN_Hdlr>:
1a002214:	2a03      	cmp	r2, #3
1a002216:	d001      	beq.n	1a00221c <Keyboard_EpIN_Hdlr+0x8>
1a002218:	2000      	movs	r0, #0
1a00221a:	4770      	bx	lr
1a00221c:	4b01      	ldr	r3, [pc, #4]	; (1a002224 <Keyboard_EpIN_Hdlr+0x10>)
1a00221e:	2200      	movs	r2, #0
1a002220:	731a      	strb	r2, [r3, #12]
1a002222:	e7f9      	b.n	1a002218 <Keyboard_EpIN_Hdlr+0x4>
1a002224:	10000158 	.word	0x10000158

1a002228 <Keyboard_UpdateReport>:
1a002228:	b508      	push	{r3, lr}
1a00222a:	4a05      	ldr	r2, [pc, #20]	; (1a002240 <Keyboard_UpdateReport+0x18>)
1a00222c:	2300      	movs	r3, #0
1a00222e:	6053      	str	r3, [r2, #4]
1a002230:	6093      	str	r3, [r2, #8]
1a002232:	4b04      	ldr	r3, [pc, #16]	; (1a002244 <Keyboard_UpdateReport+0x1c>)
1a002234:	681b      	ldr	r3, [r3, #0]
1a002236:	b10b      	cbz	r3, 1a00223c <Keyboard_UpdateReport+0x14>
1a002238:	2000      	movs	r0, #0
1a00223a:	4798      	blx	r3
1a00223c:	bd08      	pop	{r3, pc}
1a00223e:	bf00      	nop
1a002240:	10000158 	.word	0x10000158
1a002244:	10000168 	.word	0x10000168

1a002248 <Keyboard_SetReport>:
1a002248:	b1d3      	cbz	r3, 1a002280 <Keyboard_SetReport+0x38>
1a00224a:	b508      	push	{r3, lr}
1a00224c:	78cb      	ldrb	r3, [r1, #3]
1a00224e:	2b02      	cmp	r3, #2
1a002250:	d005      	beq.n	1a00225e <Keyboard_SetReport+0x16>
1a002252:	2b03      	cmp	r3, #3
1a002254:	d016      	beq.n	1a002284 <Keyboard_SetReport+0x3c>
1a002256:	2b01      	cmp	r3, #1
1a002258:	d016      	beq.n	1a002288 <Keyboard_SetReport+0x40>
1a00225a:	2000      	movs	r0, #0
1a00225c:	bd08      	pop	{r3, pc}
1a00225e:	6813      	ldr	r3, [r2, #0]
1a002260:	781b      	ldrb	r3, [r3, #0]
1a002262:	f013 0f01 	tst.w	r3, #1
1a002266:	d005      	beq.n	1a002274 <Keyboard_SetReport+0x2c>
1a002268:	2101      	movs	r1, #1
1a00226a:	202a      	movs	r0, #42	; 0x2a
1a00226c:	f7ff fd22 	bl	1a001cb4 <gpioWrite>
1a002270:	2000      	movs	r0, #0
1a002272:	e7f3      	b.n	1a00225c <Keyboard_SetReport+0x14>
1a002274:	2100      	movs	r1, #0
1a002276:	202a      	movs	r0, #42	; 0x2a
1a002278:	f7ff fd1c 	bl	1a001cb4 <gpioWrite>
1a00227c:	2000      	movs	r0, #0
1a00227e:	e7ed      	b.n	1a00225c <Keyboard_SetReport+0x14>
1a002280:	2000      	movs	r0, #0
1a002282:	4770      	bx	lr
1a002284:	4801      	ldr	r0, [pc, #4]	; (1a00228c <Keyboard_SetReport+0x44>)
1a002286:	e7e9      	b.n	1a00225c <Keyboard_SetReport+0x14>
1a002288:	4800      	ldr	r0, [pc, #0]	; (1a00228c <Keyboard_SetReport+0x44>)
1a00228a:	e7e7      	b.n	1a00225c <Keyboard_SetReport+0x14>
1a00228c:	00040003 	.word	0x00040003

1a002290 <Keyboard_GetReport>:
1a002290:	b538      	push	{r3, r4, r5, lr}
1a002292:	78c9      	ldrb	r1, [r1, #3]
1a002294:	2901      	cmp	r1, #1
1a002296:	d005      	beq.n	1a0022a4 <Keyboard_GetReport+0x14>
1a002298:	b24b      	sxtb	r3, r1
1a00229a:	b183      	cbz	r3, 1a0022be <Keyboard_GetReport+0x2e>
1a00229c:	2903      	cmp	r1, #3
1a00229e:	d810      	bhi.n	1a0022c2 <Keyboard_GetReport+0x32>
1a0022a0:	4809      	ldr	r0, [pc, #36]	; (1a0022c8 <Keyboard_GetReport+0x38>)
1a0022a2:	bd38      	pop	{r3, r4, r5, pc}
1a0022a4:	461c      	mov	r4, r3
1a0022a6:	4615      	mov	r5, r2
1a0022a8:	f7ff ffbe 	bl	1a002228 <Keyboard_UpdateReport>
1a0022ac:	682a      	ldr	r2, [r5, #0]
1a0022ae:	4b07      	ldr	r3, [pc, #28]	; (1a0022cc <Keyboard_GetReport+0x3c>)
1a0022b0:	cb03      	ldmia	r3!, {r0, r1}
1a0022b2:	6010      	str	r0, [r2, #0]
1a0022b4:	6051      	str	r1, [r2, #4]
1a0022b6:	2308      	movs	r3, #8
1a0022b8:	8023      	strh	r3, [r4, #0]
1a0022ba:	2000      	movs	r0, #0
1a0022bc:	e7f1      	b.n	1a0022a2 <Keyboard_GetReport+0x12>
1a0022be:	2000      	movs	r0, #0
1a0022c0:	e7ef      	b.n	1a0022a2 <Keyboard_GetReport+0x12>
1a0022c2:	2000      	movs	r0, #0
1a0022c4:	e7ed      	b.n	1a0022a2 <Keyboard_GetReport+0x12>
1a0022c6:	bf00      	nop
1a0022c8:	00040003 	.word	0x00040003
1a0022cc:	1000015c 	.word	0x1000015c

1a0022d0 <usbDeviceKeyboardInit>:
1a0022d0:	2900      	cmp	r1, #0
1a0022d2:	d036      	beq.n	1a002342 <usbDeviceKeyboardInit+0x72>
1a0022d4:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0022d6:	b091      	sub	sp, #68	; 0x44
1a0022d8:	460c      	mov	r4, r1
1a0022da:	7949      	ldrb	r1, [r1, #5]
1a0022dc:	2903      	cmp	r1, #3
1a0022de:	d133      	bne.n	1a002348 <usbDeviceKeyboardInit+0x78>
1a0022e0:	461f      	mov	r7, r3
1a0022e2:	4616      	mov	r6, r2
1a0022e4:	4605      	mov	r5, r0
1a0022e6:	2238      	movs	r2, #56	; 0x38
1a0022e8:	2100      	movs	r1, #0
1a0022ea:	a802      	add	r0, sp, #8
1a0022ec:	f000 fec3 	bl	1a003076 <memset>
1a0022f0:	2301      	movs	r3, #1
1a0022f2:	f88d 3010 	strb.w	r3, [sp, #16]
1a0022f6:	6833      	ldr	r3, [r6, #0]
1a0022f8:	9302      	str	r3, [sp, #8]
1a0022fa:	683b      	ldr	r3, [r7, #0]
1a0022fc:	9303      	str	r3, [sp, #12]
1a0022fe:	9405      	str	r4, [sp, #20]
1a002300:	4b13      	ldr	r3, [pc, #76]	; (1a002350 <usbDeviceKeyboardInit+0x80>)
1a002302:	9307      	str	r3, [sp, #28]
1a002304:	4b13      	ldr	r3, [pc, #76]	; (1a002354 <usbDeviceKeyboardInit+0x84>)
1a002306:	9308      	str	r3, [sp, #32]
1a002308:	4b13      	ldr	r3, [pc, #76]	; (1a002358 <usbDeviceKeyboardInit+0x88>)
1a00230a:	930c      	str	r3, [sp, #48]	; 0x30
1a00230c:	4b13      	ldr	r3, [pc, #76]	; (1a00235c <usbDeviceKeyboardInit+0x8c>)
1a00230e:	881b      	ldrh	r3, [r3, #0]
1a002310:	f8ad 3000 	strh.w	r3, [sp]
1a002314:	2400      	movs	r4, #0
1a002316:	f88d 4002 	strb.w	r4, [sp, #2]
1a00231a:	4b11      	ldr	r3, [pc, #68]	; (1a002360 <usbDeviceKeyboardInit+0x90>)
1a00231c:	9301      	str	r3, [sp, #4]
1a00231e:	f8cd d018 	str.w	sp, [sp, #24]
1a002322:	4b10      	ldr	r3, [pc, #64]	; (1a002364 <usbDeviceKeyboardInit+0x94>)
1a002324:	681b      	ldr	r3, [r3, #0]
1a002326:	691b      	ldr	r3, [r3, #16]
1a002328:	685b      	ldr	r3, [r3, #4]
1a00232a:	a902      	add	r1, sp, #8
1a00232c:	4628      	mov	r0, r5
1a00232e:	4798      	blx	r3
1a002330:	9b02      	ldr	r3, [sp, #8]
1a002332:	6033      	str	r3, [r6, #0]
1a002334:	9b03      	ldr	r3, [sp, #12]
1a002336:	603b      	str	r3, [r7, #0]
1a002338:	4b0b      	ldr	r3, [pc, #44]	; (1a002368 <usbDeviceKeyboardInit+0x98>)
1a00233a:	601d      	str	r5, [r3, #0]
1a00233c:	731c      	strb	r4, [r3, #12]
1a00233e:	b011      	add	sp, #68	; 0x44
1a002340:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a002342:	f04f 30ff 	mov.w	r0, #4294967295
1a002346:	4770      	bx	lr
1a002348:	f04f 30ff 	mov.w	r0, #4294967295
1a00234c:	e7f7      	b.n	1a00233e <usbDeviceKeyboardInit+0x6e>
1a00234e:	bf00      	nop
1a002350:	1a002291 	.word	0x1a002291
1a002354:	1a002249 	.word	0x1a002249
1a002358:	1a002215 	.word	0x1a002215
1a00235c:	1a00369e 	.word	0x1a00369e
1a002360:	1a0036a0 	.word	0x1a0036a0
1a002364:	10000190 	.word	0x10000190
1a002368:	10000158 	.word	0x10000158

1a00236c <EP0_patch>:
 * Private functions
 ****************************************************************************/

/* EP0_patch part of WORKAROUND for artf45032. */
ErrorCode_t EP0_patch(USBD_HANDLE_T hUsb, void *data, uint32_t event)
{
1a00236c:	b510      	push	{r4, lr}
   switch (event) {
1a00236e:	4613      	mov	r3, r2
1a002370:	b16a      	cbz	r2, 1a00238e <EP0_patch+0x22>
1a002372:	2a02      	cmp	r2, #2
1a002374:	d908      	bls.n	1a002388 <EP0_patch+0x1c>
1a002376:	2a04      	cmp	r2, #4
1a002378:	d109      	bne.n	1a00238e <EP0_patch+0x22>
   case USB_EVT_OUT_NAK:
      if (g_ep0RxBusy) {
1a00237a:	4a08      	ldr	r2, [pc, #32]	; (1a00239c <EP0_patch+0x30>)
1a00237c:	6812      	ldr	r2, [r2, #0]
1a00237e:	b95a      	cbnz	r2, 1a002398 <EP0_patch+0x2c>
         /* we already queued the buffer so ignore this NAK event. */
         return LPC_OK;
      }
      else {
         /* Mark EP0_RX buffer as busy and allow base handler to queue the buffer. */
         g_ep0RxBusy = 1;
1a002380:	4a06      	ldr	r2, [pc, #24]	; (1a00239c <EP0_patch+0x30>)
1a002382:	2401      	movs	r4, #1
1a002384:	6014      	str	r4, [r2, #0]
      }
      break;
1a002386:	e002      	b.n	1a00238e <EP0_patch+0x22>

   case USB_EVT_SETUP:  /* reset the flag when new setup sequence starts */
   case USB_EVT_OUT:
      /* we received the packet so clear the flag. */
      g_ep0RxBusy = 0;
1a002388:	4a04      	ldr	r2, [pc, #16]	; (1a00239c <EP0_patch+0x30>)
1a00238a:	2400      	movs	r4, #0
1a00238c:	6014      	str	r4, [r2, #0]
      break;
1a00238e:	461a      	mov	r2, r3
   }
   return g_Ep0BaseHdlr(hUsb, data, event);
1a002390:	4b03      	ldr	r3, [pc, #12]	; (1a0023a0 <EP0_patch+0x34>)
1a002392:	681b      	ldr	r3, [r3, #0]
1a002394:	4798      	blx	r3
}
1a002396:	bd10      	pop	{r4, pc}
         return LPC_OK;
1a002398:	2000      	movs	r0, #0
1a00239a:	e7fc      	b.n	1a002396 <EP0_patch+0x2a>
1a00239c:	10000170 	.word	0x10000170
1a0023a0:	1000016c 	.word	0x1000016c

1a0023a4 <usbDeviceLpcInterruptPrioritySet>:
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a0023a4:	0140      	lsls	r0, r0, #5
1a0023a6:	b2c0      	uxtb	r0, r0
1a0023a8:	4b01      	ldr	r3, [pc, #4]	; (1a0023b0 <usbDeviceLpcInterruptPrioritySet+0xc>)
1a0023aa:	f883 0308 	strb.w	r0, [r3, #776]	; 0x308
   return ret;
}

static void usbDeviceLpcInterruptPrioritySet( uint32_t priority ){
   NVIC_SetPriority( LPC_USB_IRQ, priority );
}
1a0023ae:	4770      	bx	lr
1a0023b0:	e000e100 	.word	0xe000e100

1a0023b4 <usbDeviceLpcInterruptInit>:

static void usbDeviceLpcInterruptInit( void ){
1a0023b4:	b508      	push	{r3, lr}
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a0023b6:	4b06      	ldr	r3, [pc, #24]	; (1a0023d0 <usbDeviceLpcInterruptInit+0x1c>)
1a0023b8:	f44f 7280 	mov.w	r2, #256	; 0x100
1a0023bc:	601a      	str	r2, [r3, #0]
    /*  enable USB interrupts */
   NVIC_EnableIRQ( LPC_USB_IRQ );
   /* now connect */
   USBD_API->hw->Connect( g_hUsb, 1 );
1a0023be:	4b05      	ldr	r3, [pc, #20]	; (1a0023d4 <usbDeviceLpcInterruptInit+0x20>)
1a0023c0:	681b      	ldr	r3, [r3, #0]
1a0023c2:	681b      	ldr	r3, [r3, #0]
1a0023c4:	689b      	ldr	r3, [r3, #8]
1a0023c6:	2101      	movs	r1, #1
1a0023c8:	4a03      	ldr	r2, [pc, #12]	; (1a0023d8 <usbDeviceLpcInterruptInit+0x24>)
1a0023ca:	6810      	ldr	r0, [r2, #0]
1a0023cc:	4798      	blx	r3
}
1a0023ce:	bd08      	pop	{r3, pc}
1a0023d0:	e000e100 	.word	0xe000e100
1a0023d4:	10000190 	.word	0x10000190
1a0023d8:	10000174 	.word	0x10000174

1a0023dc <usbDeviceLpcInit>:
                                    USBD_API_INIT_PARAM_T* usb_param){
1a0023dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a0023de:	4604      	mov	r4, r0
1a0023e0:	460d      	mov	r5, r1
   USB_init_pin_clk();
1a0023e2:	f7fe ff29 	bl	1a001238 <Chip_USB0_Init>
   g_pUsbApi = (const USBD_API_T *) LPC_ROM_API->usbdApiBase;
1a0023e6:	4b18      	ldr	r3, [pc, #96]	; (1a002448 <usbDeviceLpcInit+0x6c>)
1a0023e8:	69db      	ldr	r3, [r3, #28]
1a0023ea:	4e18      	ldr	r6, [pc, #96]	; (1a00244c <usbDeviceLpcInit+0x70>)
1a0023ec:	6033      	str	r3, [r6, #0]
   uint8_t max_num_ep = usb_param->max_num_ep;
1a0023ee:	4628      	mov	r0, r5
1a0023f0:	f810 7f0c 	ldrb.w	r7, [r0, #12]!
   memset((void *) usb_param, 0, sizeof(USBD_API_INIT_PARAM_T));   
1a0023f4:	2238      	movs	r2, #56	; 0x38
1a0023f6:	2100      	movs	r1, #0
1a0023f8:	f000 fe3d 	bl	1a003076 <memset>
   usb_param->usb_reg_base = LPC_USB_BASE;
1a0023fc:	4b14      	ldr	r3, [pc, #80]	; (1a002450 <usbDeviceLpcInit+0x74>)
1a0023fe:	602b      	str	r3, [r5, #0]
   usb_param->mem_base = USB_STACK_MEM_BASE;
1a002400:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
1a002404:	606b      	str	r3, [r5, #4]
   usb_param->mem_size = USB_STACK_MEM_SIZE;   
1a002406:	f44f 5300 	mov.w	r3, #8192	; 0x2000
1a00240a:	60ab      	str	r3, [r5, #8]
   usb_param->max_num_ep = max_num_ep;
1a00240c:	732f      	strb	r7, [r5, #12]
   desc->device_desc = (uint8_t *) USB_DeviceDescriptor;
1a00240e:	4b11      	ldr	r3, [pc, #68]	; (1a002454 <usbDeviceLpcInit+0x78>)
1a002410:	6023      	str	r3, [r4, #0]
   desc->string_desc = (uint8_t *) USB_StringDescriptor;
1a002412:	4b11      	ldr	r3, [pc, #68]	; (1a002458 <usbDeviceLpcInit+0x7c>)
1a002414:	6063      	str	r3, [r4, #4]
      desc->high_speed_desc = USB_HsConfigDescriptor;
1a002416:	4b11      	ldr	r3, [pc, #68]	; (1a00245c <usbDeviceLpcInit+0x80>)
1a002418:	60e3      	str	r3, [r4, #12]
      desc->full_speed_desc = USB_FsConfigDescriptor;
1a00241a:	4b11      	ldr	r3, [pc, #68]	; (1a002460 <usbDeviceLpcInit+0x84>)
1a00241c:	60a3      	str	r3, [r4, #8]
      desc->device_qualifier = (uint8_t *) USB_DeviceQualifier;
1a00241e:	4b11      	ldr	r3, [pc, #68]	; (1a002464 <usbDeviceLpcInit+0x88>)
1a002420:	6123      	str	r3, [r4, #16]
   ret = USBD_API->hw->Init(&g_hUsb, desc, usb_param);
1a002422:	6833      	ldr	r3, [r6, #0]
1a002424:	681b      	ldr	r3, [r3, #0]
1a002426:	685b      	ldr	r3, [r3, #4]
1a002428:	462a      	mov	r2, r5
1a00242a:	4621      	mov	r1, r4
1a00242c:	480e      	ldr	r0, [pc, #56]	; (1a002468 <usbDeviceLpcInit+0x8c>)
1a00242e:	4798      	blx	r3
   if (ret == LPC_OK) {      
1a002430:	4603      	mov	r3, r0
1a002432:	b930      	cbnz	r0, 1a002442 <usbDeviceLpcInit+0x66>
      pCtrl = (USB_CORE_CTRL_T *) g_hUsb; /* convert the handle to control structure */
1a002434:	4a0c      	ldr	r2, [pc, #48]	; (1a002468 <usbDeviceLpcInit+0x8c>)
1a002436:	6812      	ldr	r2, [r2, #0]
      g_Ep0BaseHdlr = pCtrl->ep_event_hdlr[0];/* retrieve the default EP0_OUT handler */
1a002438:	6d90      	ldr	r0, [r2, #88]	; 0x58
1a00243a:	490c      	ldr	r1, [pc, #48]	; (1a00246c <usbDeviceLpcInit+0x90>)
1a00243c:	6008      	str	r0, [r1, #0]
      pCtrl->ep_event_hdlr[0] = EP0_patch;/* set our patch routine as EP0_OUT handler */
1a00243e:	490c      	ldr	r1, [pc, #48]	; (1a002470 <usbDeviceLpcInit+0x94>)
1a002440:	6591      	str	r1, [r2, #88]	; 0x58
}
1a002442:	4618      	mov	r0, r3
1a002444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a002446:	bf00      	nop
1a002448:	10400100 	.word	0x10400100
1a00244c:	10000190 	.word	0x10000190
1a002450:	40006000 	.word	0x40006000
1a002454:	1a0035fc 	.word	0x1a0035fc
1a002458:	1a00361c 	.word	0x1a00361c
1a00245c:	10000024 	.word	0x10000024
1a002460:	10000000 	.word	0x10000000
1a002464:	1a003610 	.word	0x1a003610
1a002468:	10000174 	.word	0x10000174
1a00246c:	1000016c 	.word	0x1000016c
1a002470:	1a00236d 	.word	0x1a00236d

1a002474 <USB0_IRQHandler>:
void USB_IRQHandler(void){
1a002474:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a002476:	4b04      	ldr	r3, [pc, #16]	; (1a002488 <USB0_IRQHandler+0x14>)
1a002478:	681b      	ldr	r3, [r3, #0]
1a00247a:	681b      	ldr	r3, [r3, #0]
1a00247c:	68db      	ldr	r3, [r3, #12]
1a00247e:	4a03      	ldr	r2, [pc, #12]	; (1a00248c <USB0_IRQHandler+0x18>)
1a002480:	6810      	ldr	r0, [r2, #0]
1a002482:	4798      	blx	r3
}
1a002484:	bd08      	pop	{r3, pc}
1a002486:	bf00      	nop
1a002488:	10000190 	.word	0x10000190
1a00248c:	10000174 	.word	0x10000174

1a002490 <find_IntfDesc>:
   while (pD->bLength) {
1a002490:	e000      	b.n	1a002494 <find_IntfDesc+0x4>
      next_desc_adr = (uint32_t) pD + pD->bLength;
1a002492:	4418      	add	r0, r3
   while (pD->bLength) {
1a002494:	7803      	ldrb	r3, [r0, #0]
1a002496:	b133      	cbz	r3, 1a0024a6 <find_IntfDesc+0x16>
      if (pD->bDescriptorType == USB_INTERFACE_DESCRIPTOR_TYPE) {
1a002498:	7842      	ldrb	r2, [r0, #1]
1a00249a:	2a04      	cmp	r2, #4
1a00249c:	d1f9      	bne.n	1a002492 <find_IntfDesc+0x2>
         if (pIntfDesc->bInterfaceClass == intfClass) {
1a00249e:	7942      	ldrb	r2, [r0, #5]
1a0024a0:	428a      	cmp	r2, r1
1a0024a2:	d1f6      	bne.n	1a002492 <find_IntfDesc+0x2>
1a0024a4:	e000      	b.n	1a0024a8 <find_IntfDesc+0x18>
1a0024a6:	2000      	movs	r0, #0
}
1a0024a8:	4770      	bx	lr
1a0024aa:	Address 0x1a0024aa is out of bounds.


1a0024ac <usbDeviceInit>:
bool_t usbDeviceInit( UsbSubClass_t subclass ){
1a0024ac:	b500      	push	{lr}
1a0024ae:	b097      	sub	sp, #92	; 0x5c
   switch(subclass){
1a0024b0:	2805      	cmp	r0, #5
1a0024b2:	d85c      	bhi.n	1a00256e <usbDeviceInit+0xc2>
1a0024b4:	e8df f000 	tbb	[pc, r0]
1a0024b8:	37220a03 	.word	0x37220a03
1a0024bc:	563c      	.short	0x563c
         printf("USB_HID_MOUSE\r\n");
1a0024be:	482e      	ldr	r0, [pc, #184]	; (1a002578 <usbDeviceInit+0xcc>)
1a0024c0:	f000 fef8 	bl	1a0032b4 <puts>
   return FALSE;
1a0024c4:	2000      	movs	r0, #0
}
1a0024c6:	b017      	add	sp, #92	; 0x5c
1a0024c8:	f85d fb04 	ldr.w	pc, [sp], #4
         printf("USB_HID_KEYBOARD\r\n");
1a0024cc:	482b      	ldr	r0, [pc, #172]	; (1a00257c <usbDeviceInit+0xd0>)
1a0024ce:	f000 fef1 	bl	1a0032b4 <puts>
         usb_param.max_num_ep = 2; // Keyboard has 2 endpoints
1a0024d2:	2302      	movs	r3, #2
1a0024d4:	f88d 3020 	strb.w	r3, [sp, #32]
         ret = usbDeviceLpcInit(&desc, &usb_param);
1a0024d8:	a905      	add	r1, sp, #20
1a0024da:	4668      	mov	r0, sp
1a0024dc:	f7ff ff7e 	bl	1a0023dc <usbDeviceLpcInit>
         ret = usbDeviceKeyboardInit(
1a0024e0:	ab07      	add	r3, sp, #28
1a0024e2:	aa06      	add	r2, sp, #24
1a0024e4:	4926      	ldr	r1, [pc, #152]	; (1a002580 <usbDeviceInit+0xd4>)
1a0024e6:	4827      	ldr	r0, [pc, #156]	; (1a002584 <usbDeviceInit+0xd8>)
1a0024e8:	6800      	ldr	r0, [r0, #0]
1a0024ea:	f7ff fef1 	bl	1a0022d0 <usbDeviceKeyboardInit>
         if (ret == LPC_OK) {
1a0024ee:	b108      	cbz	r0, 1a0024f4 <usbDeviceInit+0x48>
   return FALSE;
1a0024f0:	2000      	movs	r0, #0
1a0024f2:	e7e8      	b.n	1a0024c6 <usbDeviceInit+0x1a>
            usbDeviceLpcInterruptInit();
1a0024f4:	f7ff ff5e 	bl	1a0023b4 <usbDeviceLpcInterruptInit>
            return TRUE;
1a0024f8:	2001      	movs	r0, #1
1a0024fa:	e7e4      	b.n	1a0024c6 <usbDeviceInit+0x1a>
         usb_param.max_num_ep = 2; // Keyboard has 2 endpoints
1a0024fc:	2302      	movs	r3, #2
1a0024fe:	f88d 3020 	strb.w	r3, [sp, #32]
         ret = usbDeviceLpcInit(&desc, &usb_param);
1a002502:	a905      	add	r1, sp, #20
1a002504:	4668      	mov	r0, sp
1a002506:	f7ff ff69 	bl	1a0023dc <usbDeviceLpcInit>
         ret = usbDeviceGamepadInit(
1a00250a:	ab07      	add	r3, sp, #28
1a00250c:	aa06      	add	r2, sp, #24
1a00250e:	491c      	ldr	r1, [pc, #112]	; (1a002580 <usbDeviceInit+0xd4>)
1a002510:	481c      	ldr	r0, [pc, #112]	; (1a002584 <usbDeviceInit+0xd8>)
1a002512:	6800      	ldr	r0, [r0, #0]
1a002514:	f7fd ff30 	bl	1a000378 <usbDeviceGamepadInit>
         if (ret == LPC_OK) {
1a002518:	b108      	cbz	r0, 1a00251e <usbDeviceInit+0x72>
   return FALSE;
1a00251a:	2000      	movs	r0, #0
1a00251c:	e7d3      	b.n	1a0024c6 <usbDeviceInit+0x1a>
            usbDeviceLpcInterruptInit();
1a00251e:	f7ff ff49 	bl	1a0023b4 <usbDeviceLpcInterruptInit>
            return TRUE;
1a002522:	2001      	movs	r0, #1
1a002524:	e7cf      	b.n	1a0024c6 <usbDeviceInit+0x1a>
         printf("USB_HID_GENERIC\r\n");
1a002526:	4818      	ldr	r0, [pc, #96]	; (1a002588 <usbDeviceInit+0xdc>)
1a002528:	f000 fec4 	bl	1a0032b4 <puts>
   return FALSE;
1a00252c:	2000      	movs	r0, #0
      break;
1a00252e:	e7ca      	b.n	1a0024c6 <usbDeviceInit+0x1a>
         printf("USB_CDC_UART\r\n");
1a002530:	4816      	ldr	r0, [pc, #88]	; (1a00258c <usbDeviceInit+0xe0>)
1a002532:	f000 febf 	bl	1a0032b4 <puts>
         usb_param.max_num_ep = 4; // CDC Uart has 4 endpoints
1a002536:	2304      	movs	r3, #4
1a002538:	f88d 3020 	strb.w	r3, [sp, #32]
         ret = usbDeviceLpcInit(&desc, &usb_param);
1a00253c:	a905      	add	r1, sp, #20
1a00253e:	4668      	mov	r0, sp
1a002540:	f7ff ff4c 	bl	1a0023dc <usbDeviceLpcInit>
         ret = cdcUartLpcInit(g_hUsb, &desc, &usb_param);
1a002544:	aa05      	add	r2, sp, #20
1a002546:	4669      	mov	r1, sp
1a002548:	4b0e      	ldr	r3, [pc, #56]	; (1a002584 <usbDeviceInit+0xd8>)
1a00254a:	6818      	ldr	r0, [r3, #0]
1a00254c:	f7ff fdf4 	bl	1a002138 <cdcUartLpcInit>
         if (ret == LPC_OK) {
1a002550:	b108      	cbz	r0, 1a002556 <usbDeviceInit+0xaa>
   return FALSE;
1a002552:	2000      	movs	r0, #0
1a002554:	e7b7      	b.n	1a0024c6 <usbDeviceInit+0x1a>
            usbDeviceLpcInterruptPrioritySet(5); // FreeRTOS Requiere prioridad>=5
1a002556:	2005      	movs	r0, #5
1a002558:	f7ff ff24 	bl	1a0023a4 <usbDeviceLpcInterruptPrioritySet>
            usbDeviceLpcInterruptInit();      
1a00255c:	f7ff ff2a 	bl	1a0023b4 <usbDeviceLpcInterruptInit>
            return TRUE;   
1a002560:	2001      	movs	r0, #1
1a002562:	e7b0      	b.n	1a0024c6 <usbDeviceInit+0x1a>
         printf("USB_MSC_DRIVE\r\n");
1a002564:	480a      	ldr	r0, [pc, #40]	; (1a002590 <usbDeviceInit+0xe4>)
1a002566:	f000 fea5 	bl	1a0032b4 <puts>
         return TRUE;
1a00256a:	2001      	movs	r0, #1
1a00256c:	e7ab      	b.n	1a0024c6 <usbDeviceInit+0x1a>
         printf("Error, you must use a valid USB device class\r\n");
1a00256e:	4809      	ldr	r0, [pc, #36]	; (1a002594 <usbDeviceInit+0xe8>)
1a002570:	f000 fea0 	bl	1a0032b4 <puts>
         return TRUE;
1a002574:	2001      	movs	r0, #1
1a002576:	e7a6      	b.n	1a0024c6 <usbDeviceInit+0x1a>
1a002578:	1a0039c4 	.word	0x1a0039c4
1a00257c:	1a0039d4 	.word	0x1a0039d4
1a002580:	10000009 	.word	0x10000009
1a002584:	10000174 	.word	0x10000174
1a002588:	1a0039e8 	.word	0x1a0039e8
1a00258c:	1a0039fc 	.word	0x1a0039fc
1a002590:	1a003a0c 	.word	0x1a003a0c
1a002594:	1a003a1c 	.word	0x1a003a1c

1a002598 <boardInit>:
1a002598:	b508      	push	{r3, lr}
1a00259a:	f7fe fe67 	bl	1a00126c <SystemCoreClockUpdate>
1a00259e:	4b1a      	ldr	r3, [pc, #104]	; (1a002608 <boardInit+0x70>)
1a0025a0:	6818      	ldr	r0, [r3, #0]
1a0025a2:	f7ff fa89 	bl	1a001ab8 <cyclesCounterInit>
1a0025a6:	2001      	movs	r0, #1
1a0025a8:	2100      	movs	r1, #0
1a0025aa:	f7ff fc87 	bl	1a001ebc <tickInit>
1a0025ae:	2105      	movs	r1, #5
1a0025b0:	2000      	movs	r0, #0
1a0025b2:	f7ff faa9 	bl	1a001b08 <gpioInit>
1a0025b6:	2100      	movs	r1, #0
1a0025b8:	2024      	movs	r0, #36	; 0x24
1a0025ba:	f7ff faa5 	bl	1a001b08 <gpioInit>
1a0025be:	2100      	movs	r1, #0
1a0025c0:	2025      	movs	r0, #37	; 0x25
1a0025c2:	f7ff faa1 	bl	1a001b08 <gpioInit>
1a0025c6:	2100      	movs	r1, #0
1a0025c8:	2026      	movs	r0, #38	; 0x26
1a0025ca:	f7ff fa9d 	bl	1a001b08 <gpioInit>
1a0025ce:	2100      	movs	r1, #0
1a0025d0:	2027      	movs	r0, #39	; 0x27
1a0025d2:	f7ff fa99 	bl	1a001b08 <gpioInit>
1a0025d6:	2101      	movs	r1, #1
1a0025d8:	2028      	movs	r0, #40	; 0x28
1a0025da:	f7ff fa95 	bl	1a001b08 <gpioInit>
1a0025de:	2101      	movs	r1, #1
1a0025e0:	2029      	movs	r0, #41	; 0x29
1a0025e2:	f7ff fa91 	bl	1a001b08 <gpioInit>
1a0025e6:	2101      	movs	r1, #1
1a0025e8:	202a      	movs	r0, #42	; 0x2a
1a0025ea:	f7ff fa8d 	bl	1a001b08 <gpioInit>
1a0025ee:	2101      	movs	r1, #1
1a0025f0:	202b      	movs	r0, #43	; 0x2b
1a0025f2:	f7ff fa89 	bl	1a001b08 <gpioInit>
1a0025f6:	2101      	movs	r1, #1
1a0025f8:	202c      	movs	r0, #44	; 0x2c
1a0025fa:	f7ff fa85 	bl	1a001b08 <gpioInit>
1a0025fe:	2101      	movs	r1, #1
1a002600:	202d      	movs	r0, #45	; 0x2d
1a002602:	f7ff fa81 	bl	1a001b08 <gpioInit>
1a002606:	bd08      	pop	{r3, pc}
1a002608:	1000018c 	.word	0x1000018c

1a00260c <delayInaccurateMs>:
1a00260c:	b4f0      	push	{r4, r5, r6, r7}
1a00260e:	b084      	sub	sp, #16
1a002610:	ea4f 0c81 	mov.w	ip, r1, lsl #2
1a002614:	0083      	lsls	r3, r0, #2
1a002616:	ea4c 7290 	orr.w	r2, ip, r0, lsr #30
1a00261a:	181b      	adds	r3, r3, r0
1a00261c:	eb41 0202 	adc.w	r2, r1, r2
1a002620:	0211      	lsls	r1, r2, #8
1a002622:	ea41 6113 	orr.w	r1, r1, r3, lsr #24
1a002626:	0218      	lsls	r0, r3, #8
1a002628:	1ac6      	subs	r6, r0, r3
1a00262a:	eb61 0702 	sbc.w	r7, r1, r2
1a00262e:	013b      	lsls	r3, r7, #4
1a002630:	ea43 7316 	orr.w	r3, r3, r6, lsr #28
1a002634:	0132      	lsls	r2, r6, #4
1a002636:	4616      	mov	r6, r2
1a002638:	461f      	mov	r7, r3
1a00263a:	e9cd 6700 	strd	r6, r7, [sp]
1a00263e:	e9dd 2300 	ldrd	r2, r3, [sp]
1a002642:	e9cd 2302 	strd	r2, r3, [sp, #8]
1a002646:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a00264a:	4313      	orrs	r3, r2
1a00264c:	d008      	beq.n	1a002660 <delayInaccurateMs+0x54>
1a00264e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a002652:	f112 34ff 	adds.w	r4, r2, #4294967295
1a002656:	f143 35ff 	adc.w	r5, r3, #4294967295
1a00265a:	e9cd 4502 	strd	r4, r5, [sp, #8]
1a00265e:	e7f2      	b.n	1a002646 <delayInaccurateMs+0x3a>
1a002660:	b004      	add	sp, #16
1a002662:	bcf0      	pop	{r4, r5, r6, r7}
1a002664:	4770      	bx	lr

1a002666 <delayInaccurateUs>:
1a002666:	b530      	push	{r4, r5, lr}
1a002668:	b085      	sub	sp, #20
1a00266a:	1803      	adds	r3, r0, r0
1a00266c:	eb41 0201 	adc.w	r2, r1, r1
1a002670:	1818      	adds	r0, r3, r0
1a002672:	eb42 0101 	adc.w	r1, r2, r1
1a002676:	010b      	lsls	r3, r1, #4
1a002678:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
1a00267c:	0102      	lsls	r2, r0, #4
1a00267e:	1880      	adds	r0, r0, r2
1a002680:	eb43 0101 	adc.w	r1, r3, r1
1a002684:	008b      	lsls	r3, r1, #2
1a002686:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
1a00268a:	0082      	lsls	r2, r0, #2
1a00268c:	4610      	mov	r0, r2
1a00268e:	4619      	mov	r1, r3
1a002690:	220a      	movs	r2, #10
1a002692:	2300      	movs	r3, #0
1a002694:	f000 f990 	bl	1a0029b8 <__aeabi_uldivmod>
1a002698:	e9cd 0100 	strd	r0, r1, [sp]
1a00269c:	e9dd 2300 	ldrd	r2, r3, [sp]
1a0026a0:	e9cd 2302 	strd	r2, r3, [sp, #8]
1a0026a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a0026a8:	4313      	orrs	r3, r2
1a0026aa:	d008      	beq.n	1a0026be <delayInaccurateUs+0x58>
1a0026ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a0026b0:	f112 34ff 	adds.w	r4, r2, #4294967295
1a0026b4:	f143 35ff 	adc.w	r5, r3, #4294967295
1a0026b8:	e9cd 4502 	strd	r4, r5, [sp, #8]
1a0026bc:	e7f2      	b.n	1a0026a4 <delayInaccurateUs+0x3e>
1a0026be:	b005      	add	sp, #20
1a0026c0:	bd30      	pop	{r4, r5, pc}
1a0026c2:	Address 0x1a0026c2 is out of bounds.


1a0026c4 <delay>:
1a0026c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a0026c8:	4680      	mov	r8, r0
1a0026ca:	4689      	mov	r9, r1
1a0026cc:	f7ff fbe4 	bl	1a001e98 <tickRead>
1a0026d0:	4606      	mov	r6, r0
1a0026d2:	460f      	mov	r7, r1
1a0026d4:	f7ff fbe0 	bl	1a001e98 <tickRead>
1a0026d8:	1b84      	subs	r4, r0, r6
1a0026da:	eb61 0507 	sbc.w	r5, r1, r7
1a0026de:	4b06      	ldr	r3, [pc, #24]	; (1a0026f8 <delay+0x34>)
1a0026e0:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0026e4:	4640      	mov	r0, r8
1a0026e6:	4649      	mov	r1, r9
1a0026e8:	f000 f966 	bl	1a0029b8 <__aeabi_uldivmod>
1a0026ec:	428d      	cmp	r5, r1
1a0026ee:	bf08      	it	eq
1a0026f0:	4284      	cmpeq	r4, r0
1a0026f2:	d3ef      	bcc.n	1a0026d4 <delay+0x10>
1a0026f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a0026f8:	10000088 	.word	0x10000088

1a0026fc <lcdPinSet>:
}



static void lcdPinSet( uint8_t pin, bool_t status )
{
1a0026fc:	b508      	push	{r3, lr}
#ifdef LCD_HD44780_I2C_PCF8574T
   pcf8574TGpioWrite( pin, status );
#else
   gpioWrite( pin, status );
1a0026fe:	b240      	sxtb	r0, r0
1a002700:	f7ff fad8 	bl	1a001cb4 <gpioWrite>
#endif
}
1a002704:	bd08      	pop	{r3, pc}

1a002706 <lcdSendNibble>:
   lcdPinSet( LCD_HD44780_EN, OFF );      // EN = 0 for H-to-L pulse
   //lcdDelay_us(50); // commands need > 37us to settle
}

static void lcdSendNibble( uint8_t nibble )
{
1a002706:	b510      	push	{r4, lr}
1a002708:	4604      	mov	r4, r0
   lcdPinSet( LCD_HD44780_D7, ( nibble & 0x80 ) );
1a00270a:	f000 0180 	and.w	r1, r0, #128	; 0x80
1a00270e:	2010      	movs	r0, #16
1a002710:	f7ff fff4 	bl	1a0026fc <lcdPinSet>
   lcdPinSet( LCD_HD44780_D6, ( nibble & 0x40 ) );
1a002714:	f004 0140 	and.w	r1, r4, #64	; 0x40
1a002718:	2011      	movs	r0, #17
1a00271a:	f7ff ffef 	bl	1a0026fc <lcdPinSet>
   lcdPinSet( LCD_HD44780_D5, ( nibble & 0x20 ) );
1a00271e:	f004 0120 	and.w	r1, r4, #32
1a002722:	2012      	movs	r0, #18
1a002724:	f7ff ffea 	bl	1a0026fc <lcdPinSet>
   lcdPinSet( LCD_HD44780_D4, ( nibble & 0x10 ) );
1a002728:	f004 0110 	and.w	r1, r4, #16
1a00272c:	2014      	movs	r0, #20
1a00272e:	f7ff ffe5 	bl	1a0026fc <lcdPinSet>
}
1a002732:	bd10      	pop	{r4, pc}

1a002734 <lcdEnablePulse>:
{
1a002734:	b508      	push	{r3, lr}
   lcdPinSet( LCD_HD44780_EN, ON );       // EN = 1 for H-to-L pulse
1a002736:	2101      	movs	r1, #1
1a002738:	2021      	movs	r0, #33	; 0x21
1a00273a:	f7ff ffdf 	bl	1a0026fc <lcdPinSet>
   lcdDelay_us( LCD_EN_PULSE_WAIT_US );   // Wait to make EN wider //lcdDelay_us(1);
1a00273e:	2019      	movs	r0, #25
1a002740:	2100      	movs	r1, #0
1a002742:	f7ff ff90 	bl	1a002666 <delayInaccurateUs>
   lcdPinSet( LCD_HD44780_EN, OFF );      // EN = 0 for H-to-L pulse
1a002746:	2100      	movs	r1, #0
1a002748:	2021      	movs	r0, #33	; 0x21
1a00274a:	f7ff ffd7 	bl	1a0026fc <lcdPinSet>
}
1a00274e:	bd08      	pop	{r3, pc}

1a002750 <lcdCommand>:

/*==================[definiciones de funciones externas]=====================*/

void lcdCommand( uint8_t cmd )
{
1a002750:	b510      	push	{r4, lr}
1a002752:	4604      	mov	r4, r0
   lcdSendNibble( cmd & 0xF0 );          // Send high nibble to D7-D4
1a002754:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
1a002758:	f7ff ffd5 	bl	1a002706 <lcdSendNibble>

   lcdPinSet( LCD_HD44780_RS, OFF );   // RS = 0 for command
1a00275c:	2100      	movs	r1, #0
1a00275e:	2013      	movs	r0, #19
1a002760:	f7ff ffcc 	bl	1a0026fc <lcdPinSet>
   lcdPinSet( LCD_HD44780_RW, OFF );   // RW = 0 for write
1a002764:	2100      	movs	r1, #0
1a002766:	20ff      	movs	r0, #255	; 0xff
1a002768:	f7ff ffc8 	bl	1a0026fc <lcdPinSet>

   lcdEnablePulse();
1a00276c:	f7ff ffe2 	bl	1a002734 <lcdEnablePulse>
   lcdDelay_us( LCD_LOW_WAIT_US );       // Wait
1a002770:	2019      	movs	r0, #25
1a002772:	2100      	movs	r1, #0
1a002774:	f7ff ff77 	bl	1a002666 <delayInaccurateUs>

   lcdSendNibble( cmd << 4 );            // Send low nibble to D7-D4
1a002778:	0120      	lsls	r0, r4, #4
1a00277a:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
1a00277e:	f7ff ffc2 	bl	1a002706 <lcdSendNibble>
   lcdEnablePulse();
1a002782:	f7ff ffd7 	bl	1a002734 <lcdEnablePulse>
}
1a002786:	bd10      	pop	{r4, pc}

1a002788 <lcdData>:

void lcdData( uint8_t data )
{
1a002788:	b510      	push	{r4, lr}
1a00278a:	4604      	mov	r4, r0
   lcdSendNibble( data & 0xF0 );         // Send high nibble to D7-D4
1a00278c:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
1a002790:	f7ff ffb9 	bl	1a002706 <lcdSendNibble>

   lcdPinSet( LCD_HD44780_RS, ON );    // RS = 1 for data
1a002794:	2101      	movs	r1, #1
1a002796:	2013      	movs	r0, #19
1a002798:	f7ff ffb0 	bl	1a0026fc <lcdPinSet>
   lcdPinSet( LCD_HD44780_RW, OFF );   // RW = 0 for write
1a00279c:	2100      	movs	r1, #0
1a00279e:	20ff      	movs	r0, #255	; 0xff
1a0027a0:	f7ff ffac 	bl	1a0026fc <lcdPinSet>

   lcdEnablePulse();
1a0027a4:	f7ff ffc6 	bl	1a002734 <lcdEnablePulse>

   lcdSendNibble( data << 4 );           // Send low nibble to D7-D4
1a0027a8:	0120      	lsls	r0, r4, #4
1a0027aa:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
1a0027ae:	f7ff ffaa 	bl	1a002706 <lcdSendNibble>
   lcdEnablePulse();
1a0027b2:	f7ff ffbf 	bl	1a002734 <lcdEnablePulse>
}
1a0027b6:	bd10      	pop	{r4, pc}

1a0027b8 <lcdGoToXY>:
   lcdClearAndHome();
}

void lcdGoToXY( uint8_t x, uint8_t y )
{
   if( x >= lcd.lineWidth || y >= lcd.amountOfLines ) {
1a0027b8:	b282      	uxth	r2, r0
1a0027ba:	4b11      	ldr	r3, [pc, #68]	; (1a002800 <lcdGoToXY+0x48>)
1a0027bc:	881b      	ldrh	r3, [r3, #0]
1a0027be:	429a      	cmp	r2, r3
1a0027c0:	d204      	bcs.n	1a0027cc <lcdGoToXY+0x14>
1a0027c2:	b28b      	uxth	r3, r1
1a0027c4:	4a0e      	ldr	r2, [pc, #56]	; (1a002800 <lcdGoToXY+0x48>)
1a0027c6:	8852      	ldrh	r2, [r2, #2]
1a0027c8:	4293      	cmp	r3, r2
1a0027ca:	d300      	bcc.n	1a0027ce <lcdGoToXY+0x16>
1a0027cc:	4770      	bx	lr
{
1a0027ce:	b530      	push	{r4, r5, lr}
1a0027d0:	b083      	sub	sp, #12
1a0027d2:	460d      	mov	r5, r1
1a0027d4:	4604      	mov	r4, r0
      return;
   }
   uint8_t firstCharAdress[] = { 0x80, 0xC0, 0x94, 0xD4 };   // See table 12-5
1a0027d6:	4b0b      	ldr	r3, [pc, #44]	; (1a002804 <lcdGoToXY+0x4c>)
1a0027d8:	681b      	ldr	r3, [r3, #0]
1a0027da:	9301      	str	r3, [sp, #4]
   //lcdCommand( firstCharAdress[ y - 1 ] + x - 1 ); // Start in {x,y} = {1,1}
   lcdCommand( firstCharAdress[y] + x );             // Start in {x,y} = {0,0}
1a0027dc:	ab02      	add	r3, sp, #8
1a0027de:	440b      	add	r3, r1
1a0027e0:	f813 0c04 	ldrb.w	r0, [r3, #-4]
1a0027e4:	4420      	add	r0, r4
1a0027e6:	b2c0      	uxtb	r0, r0
1a0027e8:	f7ff ffb2 	bl	1a002750 <lcdCommand>
   lcdDelay_us( LCD_HIGH_WAIT_US );      // Wait
1a0027ec:	2064      	movs	r0, #100	; 0x64
1a0027ee:	2100      	movs	r1, #0
1a0027f0:	f7ff ff39 	bl	1a002666 <delayInaccurateUs>
   lcd.x = x;
1a0027f4:	4b02      	ldr	r3, [pc, #8]	; (1a002800 <lcdGoToXY+0x48>)
1a0027f6:	721c      	strb	r4, [r3, #8]
   lcd.y = y;
1a0027f8:	725d      	strb	r5, [r3, #9]
}
1a0027fa:	b003      	add	sp, #12
1a0027fc:	bd30      	pop	{r4, r5, pc}
1a0027fe:	bf00      	nop
1a002800:	10000178 	.word	0x10000178
1a002804:	1a003a4c 	.word	0x1a003a4c

1a002808 <lcdClear>:

void lcdClear( void )
{
1a002808:	b508      	push	{r3, lr}
   lcdCommand( 0x01 );                   // Command 0x01 for clear LCD
1a00280a:	2001      	movs	r0, #1
1a00280c:	f7ff ffa0 	bl	1a002750 <lcdCommand>
   lcdDelay_ms(LCD_CLR_DISP_WAIT_MS);    // Wait
1a002810:	2003      	movs	r0, #3
1a002812:	2100      	movs	r1, #0
1a002814:	f7ff fefa 	bl	1a00260c <delayInaccurateMs>
}
1a002818:	bd08      	pop	{r3, pc}

1a00281a <lcdCursorSet>:

void lcdCursorSet( lcdCursorModes_t mode )
{
1a00281a:	b508      	push	{r3, lr}
   lcdCommand( 0b00001100 | mode );
1a00281c:	f040 000c 	orr.w	r0, r0, #12
1a002820:	f7ff ff96 	bl	1a002750 <lcdCommand>
   lcdDelay_ms(LCD_CLR_DISP_WAIT_MS); // Wait
1a002824:	2003      	movs	r0, #3
1a002826:	2100      	movs	r1, #0
1a002828:	f7ff fef0 	bl	1a00260c <delayInaccurateMs>
}
1a00282c:	bd08      	pop	{r3, pc}
1a00282e:	Address 0x1a00282e is out of bounds.


1a002830 <lcdCreateChar>:
      i++;
   }
}

void lcdCreateChar( uint8_t charnum, const char* chardata )
{
1a002830:	b538      	push	{r3, r4, r5, lr}
1a002832:	460d      	mov	r5, r1
   uint8_t i;
   charnum &= 0x07;
1a002834:	f000 0007 	and.w	r0, r0, #7
   lcdCommand( E_SET_CGRAM_ADDR | (charnum << 3) );
1a002838:	00c0      	lsls	r0, r0, #3
1a00283a:	f040 0040 	orr.w	r0, r0, #64	; 0x40
1a00283e:	f7ff ff87 	bl	1a002750 <lcdCommand>
   for (i = 0; i < 8; i++) {
1a002842:	2400      	movs	r4, #0
1a002844:	e004      	b.n	1a002850 <lcdCreateChar+0x20>
      lcdData( chardata[i] );
1a002846:	5d28      	ldrb	r0, [r5, r4]
1a002848:	f7ff ff9e 	bl	1a002788 <lcdData>
   for (i = 0; i < 8; i++) {
1a00284c:	3401      	adds	r4, #1
1a00284e:	b2e4      	uxtb	r4, r4
1a002850:	2c07      	cmp	r4, #7
1a002852:	d9f8      	bls.n	1a002846 <lcdCreateChar+0x16>
   }
   delay(1);
1a002854:	2001      	movs	r0, #1
1a002856:	2100      	movs	r1, #0
1a002858:	f7ff ff34 	bl	1a0026c4 <delay>
   lcdGoToXY( lcd.x, lcd.y );
1a00285c:	4b02      	ldr	r3, [pc, #8]	; (1a002868 <lcdCreateChar+0x38>)
1a00285e:	7a59      	ldrb	r1, [r3, #9]
1a002860:	7a18      	ldrb	r0, [r3, #8]
1a002862:	f7ff ffa9 	bl	1a0027b8 <lcdGoToXY>
}
1a002866:	bd38      	pop	{r3, r4, r5, pc}
1a002868:	10000178 	.word	0x10000178

1a00286c <lcdClearAndHome>:
   lcdSendCustomCharByIndex( customChar->address );
}


void lcdClearAndHome( void )
{
1a00286c:	b508      	push	{r3, lr}
   lcdClear();
1a00286e:	f7ff ffcb 	bl	1a002808 <lcdClear>
   lcdGoToXY( 0, 0 ); // Poner cursor en 0, 0
1a002872:	2100      	movs	r1, #0
1a002874:	4608      	mov	r0, r1
1a002876:	f7ff ff9f 	bl	1a0027b8 <lcdGoToXY>
   //delay(100);
}
1a00287a:	bd08      	pop	{r3, pc}

1a00287c <lcdInit>:
{
1a00287c:	b538      	push	{r3, r4, r5, lr}
   lcd.lineWidth = lineWidth;
1a00287e:	4d30      	ldr	r5, [pc, #192]	; (1a002940 <lcdInit+0xc4>)
1a002880:	8028      	strh	r0, [r5, #0]
   lcd.amountOfLines = amountOfLines;
1a002882:	8069      	strh	r1, [r5, #2]
   lcd.charWidth = charWidth;
1a002884:	80aa      	strh	r2, [r5, #4]
   lcd.charHeight = charHeight;
1a002886:	80eb      	strh	r3, [r5, #6]
   lcd.x = 0;
1a002888:	2400      	movs	r4, #0
1a00288a:	722c      	strb	r4, [r5, #8]
   lcd.y = 0;
1a00288c:	726c      	strb	r4, [r5, #9]
   lcdInitPinAsOutput( LCD_HD44780_RS );
1a00288e:	2101      	movs	r1, #1
1a002890:	2013      	movs	r0, #19
1a002892:	f7ff f939 	bl	1a001b08 <gpioInit>
   lcdInitPinAsOutput( LCD_HD44780_RW );
1a002896:	2101      	movs	r1, #1
1a002898:	f04f 30ff 	mov.w	r0, #4294967295
1a00289c:	f7ff f934 	bl	1a001b08 <gpioInit>
   lcdInitPinAsOutput( LCD_HD44780_EN );
1a0028a0:	2101      	movs	r1, #1
1a0028a2:	2021      	movs	r0, #33	; 0x21
1a0028a4:	f7ff f930 	bl	1a001b08 <gpioInit>
   lcdInitPinAsOutput( LCD_HD44780_D4 );
1a0028a8:	2101      	movs	r1, #1
1a0028aa:	2014      	movs	r0, #20
1a0028ac:	f7ff f92c 	bl	1a001b08 <gpioInit>
   lcdInitPinAsOutput( LCD_HD44780_D5 );
1a0028b0:	2101      	movs	r1, #1
1a0028b2:	2012      	movs	r0, #18
1a0028b4:	f7ff f928 	bl	1a001b08 <gpioInit>
   lcdInitPinAsOutput( LCD_HD44780_D6 );
1a0028b8:	2101      	movs	r1, #1
1a0028ba:	2011      	movs	r0, #17
1a0028bc:	f7ff f924 	bl	1a001b08 <gpioInit>
   lcdInitPinAsOutput( LCD_HD44780_D7 );
1a0028c0:	2101      	movs	r1, #1
1a0028c2:	2010      	movs	r0, #16
1a0028c4:	f7ff f920 	bl	1a001b08 <gpioInit>
   lcdPinSet( LCD_HD44780_RW, OFF );     // RW = 0
1a0028c8:	4621      	mov	r1, r4
1a0028ca:	20ff      	movs	r0, #255	; 0xff
1a0028cc:	f7ff ff16 	bl	1a0026fc <lcdPinSet>
   lcdPinSet( LCD_HD44780_RS, OFF );     // RS = 0
1a0028d0:	4621      	mov	r1, r4
1a0028d2:	2013      	movs	r0, #19
1a0028d4:	f7ff ff12 	bl	1a0026fc <lcdPinSet>
   lcdPinSet( LCD_HD44780_EN, OFF );     // EN = 0
1a0028d8:	4621      	mov	r1, r4
1a0028da:	2021      	movs	r0, #33	; 0x21
1a0028dc:	f7ff ff0e 	bl	1a0026fc <lcdPinSet>
   lcdCommand( 0x33 );                   // Command 0x33 for 4-bit mode
1a0028e0:	2033      	movs	r0, #51	; 0x33
1a0028e2:	f7ff ff35 	bl	1a002750 <lcdCommand>
   lcdCommandDelay();                    // Wait
1a0028e6:	202d      	movs	r0, #45	; 0x2d
1a0028e8:	2100      	movs	r1, #0
1a0028ea:	f7ff febc 	bl	1a002666 <delayInaccurateUs>
   lcdCommand( 0x32 );                   // Command 0x32 for 4-bit mode
1a0028ee:	2032      	movs	r0, #50	; 0x32
1a0028f0:	f7ff ff2e 	bl	1a002750 <lcdCommand>
   lcdCommandDelay();                    // Wait
1a0028f4:	202d      	movs	r0, #45	; 0x2d
1a0028f6:	2100      	movs	r1, #0
1a0028f8:	f7ff feb5 	bl	1a002666 <delayInaccurateUs>
   lcdCommand( 0x28 );                   // Command 0x28 for 4-bit mode
1a0028fc:	2028      	movs	r0, #40	; 0x28
1a0028fe:	f7ff ff27 	bl	1a002750 <lcdCommand>
   lcdCommandDelay();                    // Wait
1a002902:	202d      	movs	r0, #45	; 0x2d
1a002904:	2100      	movs	r1, #0
1a002906:	f7ff feae 	bl	1a002666 <delayInaccurateUs>
   lcdCommand( 0x0E );                   // Command 0x0E for display on, cursor on
1a00290a:	200e      	movs	r0, #14
1a00290c:	f7ff ff20 	bl	1a002750 <lcdCommand>
   lcdCommandDelay();                    // Wait
1a002910:	202d      	movs	r0, #45	; 0x2d
1a002912:	2100      	movs	r1, #0
1a002914:	f7ff fea7 	bl	1a002666 <delayInaccurateUs>
   lcdClear();                           // Command for clear LCD
1a002918:	f7ff ff76 	bl	1a002808 <lcdClear>
   lcdCommand( 0x06 );                   // Command 0x06 for Shift cursor right
1a00291c:	2006      	movs	r0, #6
1a00291e:	f7ff ff17 	bl	1a002750 <lcdCommand>
   lcdCommandDelay();                    // Wait
1a002922:	202d      	movs	r0, #45	; 0x2d
1a002924:	2100      	movs	r1, #0
1a002926:	f7ff fe9e 	bl	1a002666 <delayInaccurateUs>
   lcdDelay_ms( 1 );                     // Wait
1a00292a:	2001      	movs	r0, #1
1a00292c:	2100      	movs	r1, #0
1a00292e:	f7ff fe6d 	bl	1a00260c <delayInaccurateMs>
   lcdCursorSet( LCD_CURSOR_OFF );
1a002932:	4620      	mov	r0, r4
1a002934:	f7ff ff71 	bl	1a00281a <lcdCursorSet>
   lcdClearAndHome();
1a002938:	f7ff ff98 	bl	1a00286c <lcdClearAndHome>
}
1a00293c:	bd38      	pop	{r3, r4, r5, pc}
1a00293e:	bf00      	nop
1a002940:	10000178 	.word	0x10000178

1a002944 <lcdSendEnter>:
   lcdData( charIndex );
   lcd.x++;
}

void lcdSendEnter( void )
{
1a002944:	b508      	push	{r3, lr}
   // Si llego abajo no hace nada
   if( lcd.y >= lcd.amountOfLines ) {
1a002946:	4b08      	ldr	r3, [pc, #32]	; (1a002968 <lcdSendEnter+0x24>)
1a002948:	7a59      	ldrb	r1, [r3, #9]
1a00294a:	b28a      	uxth	r2, r1
1a00294c:	885b      	ldrh	r3, [r3, #2]
1a00294e:	429a      	cmp	r2, r3
1a002950:	d300      	bcc.n	1a002954 <lcdSendEnter+0x10>
   } else {
      lcd.x = 0;
      lcd.y++;
      lcdGoToXY( lcd.x, lcd.y );
   }
}
1a002952:	bd08      	pop	{r3, pc}
      lcd.x = 0;
1a002954:	4b04      	ldr	r3, [pc, #16]	; (1a002968 <lcdSendEnter+0x24>)
1a002956:	2000      	movs	r0, #0
1a002958:	7218      	strb	r0, [r3, #8]
      lcd.y++;
1a00295a:	3101      	adds	r1, #1
1a00295c:	b2c9      	uxtb	r1, r1
1a00295e:	7259      	strb	r1, [r3, #9]
      lcdGoToXY( lcd.x, lcd.y );
1a002960:	f7ff ff2a 	bl	1a0027b8 <lcdGoToXY>
1a002964:	e7f5      	b.n	1a002952 <lcdSendEnter+0xe>
1a002966:	bf00      	nop
1a002968:	10000178 	.word	0x10000178

1a00296c <lcdSendChar>:
   if( character == '\r' ) {        // Ignore '\r'
1a00296c:	280d      	cmp	r0, #13
1a00296e:	d016      	beq.n	1a00299e <lcdSendChar+0x32>
{
1a002970:	b510      	push	{r4, lr}
1a002972:	4604      	mov	r4, r0
   } else if( character == '\n' ) { // Mando enter
1a002974:	280a      	cmp	r0, #10
1a002976:	d00c      	beq.n	1a002992 <lcdSendChar+0x26>
      if( lcd.x >= lcd.lineWidth ) {
1a002978:	4b09      	ldr	r3, [pc, #36]	; (1a0029a0 <lcdSendChar+0x34>)
1a00297a:	7a1a      	ldrb	r2, [r3, #8]
1a00297c:	881b      	ldrh	r3, [r3, #0]
1a00297e:	429a      	cmp	r2, r3
1a002980:	d20a      	bcs.n	1a002998 <lcdSendChar+0x2c>
      lcdData( character );
1a002982:	4620      	mov	r0, r4
1a002984:	f7ff ff00 	bl	1a002788 <lcdData>
      lcd.x++;
1a002988:	4a05      	ldr	r2, [pc, #20]	; (1a0029a0 <lcdSendChar+0x34>)
1a00298a:	7a13      	ldrb	r3, [r2, #8]
1a00298c:	3301      	adds	r3, #1
1a00298e:	7213      	strb	r3, [r2, #8]
}
1a002990:	bd10      	pop	{r4, pc}
      lcdSendEnter();
1a002992:	f7ff ffd7 	bl	1a002944 <lcdSendEnter>
1a002996:	e7fb      	b.n	1a002990 <lcdSendChar+0x24>
         lcdSendEnter();
1a002998:	f7ff ffd4 	bl	1a002944 <lcdSendEnter>
1a00299c:	e7f1      	b.n	1a002982 <lcdSendChar+0x16>
1a00299e:	4770      	bx	lr
1a0029a0:	10000178 	.word	0x10000178

1a0029a4 <lcdSendString>:
   lcdSendString( str );
   lcdClearLineFrom( lcd.y, lcd.x );
}

void lcdSendString( char* str )
{
1a0029a4:	b538      	push	{r3, r4, r5, lr}
1a0029a6:	4605      	mov	r5, r0
   uint32_t i = 0;
1a0029a8:	2400      	movs	r4, #0
   while( str[i] != 0 ) {
1a0029aa:	5d28      	ldrb	r0, [r5, r4]
1a0029ac:	b118      	cbz	r0, 1a0029b6 <lcdSendString+0x12>
      lcdSendChar( str[i] );
1a0029ae:	f7ff ffdd 	bl	1a00296c <lcdSendChar>
      i++;
1a0029b2:	3401      	adds	r4, #1
1a0029b4:	e7f9      	b.n	1a0029aa <lcdSendString+0x6>
   }
}
1a0029b6:	bd38      	pop	{r3, r4, r5, pc}

1a0029b8 <__aeabi_uldivmod>:
1a0029b8:	b953      	cbnz	r3, 1a0029d0 <__aeabi_uldivmod+0x18>
1a0029ba:	b94a      	cbnz	r2, 1a0029d0 <__aeabi_uldivmod+0x18>
1a0029bc:	2900      	cmp	r1, #0
1a0029be:	bf08      	it	eq
1a0029c0:	2800      	cmpeq	r0, #0
1a0029c2:	bf1c      	itt	ne
1a0029c4:	f04f 31ff 	movne.w	r1, #4294967295
1a0029c8:	f04f 30ff 	movne.w	r0, #4294967295
1a0029cc:	f000 b974 	b.w	1a002cb8 <__aeabi_idiv0>
1a0029d0:	f1ad 0c08 	sub.w	ip, sp, #8
1a0029d4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a0029d8:	f000 f806 	bl	1a0029e8 <__udivmoddi4>
1a0029dc:	f8dd e004 	ldr.w	lr, [sp, #4]
1a0029e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a0029e4:	b004      	add	sp, #16
1a0029e6:	4770      	bx	lr

1a0029e8 <__udivmoddi4>:
1a0029e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0029ec:	9e08      	ldr	r6, [sp, #32]
1a0029ee:	4604      	mov	r4, r0
1a0029f0:	4688      	mov	r8, r1
1a0029f2:	2b00      	cmp	r3, #0
1a0029f4:	f040 8085 	bne.w	1a002b02 <__udivmoddi4+0x11a>
1a0029f8:	428a      	cmp	r2, r1
1a0029fa:	4615      	mov	r5, r2
1a0029fc:	d948      	bls.n	1a002a90 <__udivmoddi4+0xa8>
1a0029fe:	fab2 f282 	clz	r2, r2
1a002a02:	b14a      	cbz	r2, 1a002a18 <__udivmoddi4+0x30>
1a002a04:	f1c2 0720 	rsb	r7, r2, #32
1a002a08:	fa01 f302 	lsl.w	r3, r1, r2
1a002a0c:	fa20 f707 	lsr.w	r7, r0, r7
1a002a10:	4095      	lsls	r5, r2
1a002a12:	ea47 0803 	orr.w	r8, r7, r3
1a002a16:	4094      	lsls	r4, r2
1a002a18:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a002a1c:	0c23      	lsrs	r3, r4, #16
1a002a1e:	fbb8 f7fe 	udiv	r7, r8, lr
1a002a22:	fa1f fc85 	uxth.w	ip, r5
1a002a26:	fb0e 8817 	mls	r8, lr, r7, r8
1a002a2a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a002a2e:	fb07 f10c 	mul.w	r1, r7, ip
1a002a32:	4299      	cmp	r1, r3
1a002a34:	d909      	bls.n	1a002a4a <__udivmoddi4+0x62>
1a002a36:	18eb      	adds	r3, r5, r3
1a002a38:	f107 30ff 	add.w	r0, r7, #4294967295
1a002a3c:	f080 80e3 	bcs.w	1a002c06 <__udivmoddi4+0x21e>
1a002a40:	4299      	cmp	r1, r3
1a002a42:	f240 80e0 	bls.w	1a002c06 <__udivmoddi4+0x21e>
1a002a46:	3f02      	subs	r7, #2
1a002a48:	442b      	add	r3, r5
1a002a4a:	1a5b      	subs	r3, r3, r1
1a002a4c:	b2a4      	uxth	r4, r4
1a002a4e:	fbb3 f0fe 	udiv	r0, r3, lr
1a002a52:	fb0e 3310 	mls	r3, lr, r0, r3
1a002a56:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a002a5a:	fb00 fc0c 	mul.w	ip, r0, ip
1a002a5e:	45a4      	cmp	ip, r4
1a002a60:	d909      	bls.n	1a002a76 <__udivmoddi4+0x8e>
1a002a62:	192c      	adds	r4, r5, r4
1a002a64:	f100 33ff 	add.w	r3, r0, #4294967295
1a002a68:	f080 80cb 	bcs.w	1a002c02 <__udivmoddi4+0x21a>
1a002a6c:	45a4      	cmp	ip, r4
1a002a6e:	f240 80c8 	bls.w	1a002c02 <__udivmoddi4+0x21a>
1a002a72:	3802      	subs	r0, #2
1a002a74:	442c      	add	r4, r5
1a002a76:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a002a7a:	eba4 040c 	sub.w	r4, r4, ip
1a002a7e:	2700      	movs	r7, #0
1a002a80:	b11e      	cbz	r6, 1a002a8a <__udivmoddi4+0xa2>
1a002a82:	40d4      	lsrs	r4, r2
1a002a84:	2300      	movs	r3, #0
1a002a86:	e9c6 4300 	strd	r4, r3, [r6]
1a002a8a:	4639      	mov	r1, r7
1a002a8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a002a90:	2a00      	cmp	r2, #0
1a002a92:	d053      	beq.n	1a002b3c <__udivmoddi4+0x154>
1a002a94:	fab2 f282 	clz	r2, r2
1a002a98:	2a00      	cmp	r2, #0
1a002a9a:	f040 80b6 	bne.w	1a002c0a <__udivmoddi4+0x222>
1a002a9e:	1b49      	subs	r1, r1, r5
1a002aa0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a002aa4:	fa1f f885 	uxth.w	r8, r5
1a002aa8:	2701      	movs	r7, #1
1a002aaa:	fbb1 fcfe 	udiv	ip, r1, lr
1a002aae:	0c23      	lsrs	r3, r4, #16
1a002ab0:	fb0e 111c 	mls	r1, lr, ip, r1
1a002ab4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a002ab8:	fb08 f10c 	mul.w	r1, r8, ip
1a002abc:	4299      	cmp	r1, r3
1a002abe:	d907      	bls.n	1a002ad0 <__udivmoddi4+0xe8>
1a002ac0:	18eb      	adds	r3, r5, r3
1a002ac2:	f10c 30ff 	add.w	r0, ip, #4294967295
1a002ac6:	d202      	bcs.n	1a002ace <__udivmoddi4+0xe6>
1a002ac8:	4299      	cmp	r1, r3
1a002aca:	f200 80ec 	bhi.w	1a002ca6 <__udivmoddi4+0x2be>
1a002ace:	4684      	mov	ip, r0
1a002ad0:	1a59      	subs	r1, r3, r1
1a002ad2:	b2a3      	uxth	r3, r4
1a002ad4:	fbb1 f0fe 	udiv	r0, r1, lr
1a002ad8:	fb0e 1410 	mls	r4, lr, r0, r1
1a002adc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a002ae0:	fb08 f800 	mul.w	r8, r8, r0
1a002ae4:	45a0      	cmp	r8, r4
1a002ae6:	d907      	bls.n	1a002af8 <__udivmoddi4+0x110>
1a002ae8:	192c      	adds	r4, r5, r4
1a002aea:	f100 33ff 	add.w	r3, r0, #4294967295
1a002aee:	d202      	bcs.n	1a002af6 <__udivmoddi4+0x10e>
1a002af0:	45a0      	cmp	r8, r4
1a002af2:	f200 80dc 	bhi.w	1a002cae <__udivmoddi4+0x2c6>
1a002af6:	4618      	mov	r0, r3
1a002af8:	eba4 0408 	sub.w	r4, r4, r8
1a002afc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a002b00:	e7be      	b.n	1a002a80 <__udivmoddi4+0x98>
1a002b02:	428b      	cmp	r3, r1
1a002b04:	d908      	bls.n	1a002b18 <__udivmoddi4+0x130>
1a002b06:	2e00      	cmp	r6, #0
1a002b08:	d078      	beq.n	1a002bfc <__udivmoddi4+0x214>
1a002b0a:	2700      	movs	r7, #0
1a002b0c:	e9c6 0100 	strd	r0, r1, [r6]
1a002b10:	4638      	mov	r0, r7
1a002b12:	4639      	mov	r1, r7
1a002b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a002b18:	fab3 f783 	clz	r7, r3
1a002b1c:	b97f      	cbnz	r7, 1a002b3e <__udivmoddi4+0x156>
1a002b1e:	428b      	cmp	r3, r1
1a002b20:	d302      	bcc.n	1a002b28 <__udivmoddi4+0x140>
1a002b22:	4282      	cmp	r2, r0
1a002b24:	f200 80bd 	bhi.w	1a002ca2 <__udivmoddi4+0x2ba>
1a002b28:	1a84      	subs	r4, r0, r2
1a002b2a:	eb61 0303 	sbc.w	r3, r1, r3
1a002b2e:	2001      	movs	r0, #1
1a002b30:	4698      	mov	r8, r3
1a002b32:	2e00      	cmp	r6, #0
1a002b34:	d0a9      	beq.n	1a002a8a <__udivmoddi4+0xa2>
1a002b36:	e9c6 4800 	strd	r4, r8, [r6]
1a002b3a:	e7a6      	b.n	1a002a8a <__udivmoddi4+0xa2>
1a002b3c:	deff      	udf	#255	; 0xff
1a002b3e:	f1c7 0520 	rsb	r5, r7, #32
1a002b42:	40bb      	lsls	r3, r7
1a002b44:	fa22 fc05 	lsr.w	ip, r2, r5
1a002b48:	ea4c 0c03 	orr.w	ip, ip, r3
1a002b4c:	fa01 f407 	lsl.w	r4, r1, r7
1a002b50:	fa20 f805 	lsr.w	r8, r0, r5
1a002b54:	fa21 f305 	lsr.w	r3, r1, r5
1a002b58:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
1a002b5c:	ea48 0404 	orr.w	r4, r8, r4
1a002b60:	fbb3 f9fe 	udiv	r9, r3, lr
1a002b64:	0c21      	lsrs	r1, r4, #16
1a002b66:	fb0e 3319 	mls	r3, lr, r9, r3
1a002b6a:	fa1f f88c 	uxth.w	r8, ip
1a002b6e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
1a002b72:	fb09 fa08 	mul.w	sl, r9, r8
1a002b76:	459a      	cmp	sl, r3
1a002b78:	fa02 f207 	lsl.w	r2, r2, r7
1a002b7c:	fa00 f107 	lsl.w	r1, r0, r7
1a002b80:	d90b      	bls.n	1a002b9a <__udivmoddi4+0x1b2>
1a002b82:	eb1c 0303 	adds.w	r3, ip, r3
1a002b86:	f109 30ff 	add.w	r0, r9, #4294967295
1a002b8a:	f080 8088 	bcs.w	1a002c9e <__udivmoddi4+0x2b6>
1a002b8e:	459a      	cmp	sl, r3
1a002b90:	f240 8085 	bls.w	1a002c9e <__udivmoddi4+0x2b6>
1a002b94:	f1a9 0902 	sub.w	r9, r9, #2
1a002b98:	4463      	add	r3, ip
1a002b9a:	eba3 030a 	sub.w	r3, r3, sl
1a002b9e:	b2a4      	uxth	r4, r4
1a002ba0:	fbb3 f0fe 	udiv	r0, r3, lr
1a002ba4:	fb0e 3310 	mls	r3, lr, r0, r3
1a002ba8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a002bac:	fb00 f808 	mul.w	r8, r0, r8
1a002bb0:	45a0      	cmp	r8, r4
1a002bb2:	d908      	bls.n	1a002bc6 <__udivmoddi4+0x1de>
1a002bb4:	eb1c 0404 	adds.w	r4, ip, r4
1a002bb8:	f100 33ff 	add.w	r3, r0, #4294967295
1a002bbc:	d26b      	bcs.n	1a002c96 <__udivmoddi4+0x2ae>
1a002bbe:	45a0      	cmp	r8, r4
1a002bc0:	d969      	bls.n	1a002c96 <__udivmoddi4+0x2ae>
1a002bc2:	3802      	subs	r0, #2
1a002bc4:	4464      	add	r4, ip
1a002bc6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a002bca:	eba4 0408 	sub.w	r4, r4, r8
1a002bce:	fba0 8902 	umull	r8, r9, r0, r2
1a002bd2:	454c      	cmp	r4, r9
1a002bd4:	46c6      	mov	lr, r8
1a002bd6:	464b      	mov	r3, r9
1a002bd8:	d354      	bcc.n	1a002c84 <__udivmoddi4+0x29c>
1a002bda:	d051      	beq.n	1a002c80 <__udivmoddi4+0x298>
1a002bdc:	2e00      	cmp	r6, #0
1a002bde:	d069      	beq.n	1a002cb4 <__udivmoddi4+0x2cc>
1a002be0:	ebb1 020e 	subs.w	r2, r1, lr
1a002be4:	eb64 0403 	sbc.w	r4, r4, r3
1a002be8:	fa04 f505 	lsl.w	r5, r4, r5
1a002bec:	fa22 f307 	lsr.w	r3, r2, r7
1a002bf0:	40fc      	lsrs	r4, r7
1a002bf2:	431d      	orrs	r5, r3
1a002bf4:	e9c6 5400 	strd	r5, r4, [r6]
1a002bf8:	2700      	movs	r7, #0
1a002bfa:	e746      	b.n	1a002a8a <__udivmoddi4+0xa2>
1a002bfc:	4637      	mov	r7, r6
1a002bfe:	4630      	mov	r0, r6
1a002c00:	e743      	b.n	1a002a8a <__udivmoddi4+0xa2>
1a002c02:	4618      	mov	r0, r3
1a002c04:	e737      	b.n	1a002a76 <__udivmoddi4+0x8e>
1a002c06:	4607      	mov	r7, r0
1a002c08:	e71f      	b.n	1a002a4a <__udivmoddi4+0x62>
1a002c0a:	f1c2 0320 	rsb	r3, r2, #32
1a002c0e:	fa20 f703 	lsr.w	r7, r0, r3
1a002c12:	4095      	lsls	r5, r2
1a002c14:	fa01 f002 	lsl.w	r0, r1, r2
1a002c18:	fa21 f303 	lsr.w	r3, r1, r3
1a002c1c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a002c20:	4338      	orrs	r0, r7
1a002c22:	0c01      	lsrs	r1, r0, #16
1a002c24:	fbb3 f7fe 	udiv	r7, r3, lr
1a002c28:	fa1f f885 	uxth.w	r8, r5
1a002c2c:	fb0e 3317 	mls	r3, lr, r7, r3
1a002c30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a002c34:	fb07 f308 	mul.w	r3, r7, r8
1a002c38:	428b      	cmp	r3, r1
1a002c3a:	fa04 f402 	lsl.w	r4, r4, r2
1a002c3e:	d907      	bls.n	1a002c50 <__udivmoddi4+0x268>
1a002c40:	1869      	adds	r1, r5, r1
1a002c42:	f107 3cff 	add.w	ip, r7, #4294967295
1a002c46:	d228      	bcs.n	1a002c9a <__udivmoddi4+0x2b2>
1a002c48:	428b      	cmp	r3, r1
1a002c4a:	d926      	bls.n	1a002c9a <__udivmoddi4+0x2b2>
1a002c4c:	3f02      	subs	r7, #2
1a002c4e:	4429      	add	r1, r5
1a002c50:	1acb      	subs	r3, r1, r3
1a002c52:	b281      	uxth	r1, r0
1a002c54:	fbb3 f0fe 	udiv	r0, r3, lr
1a002c58:	fb0e 3310 	mls	r3, lr, r0, r3
1a002c5c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a002c60:	fb00 f308 	mul.w	r3, r0, r8
1a002c64:	428b      	cmp	r3, r1
1a002c66:	d907      	bls.n	1a002c78 <__udivmoddi4+0x290>
1a002c68:	1869      	adds	r1, r5, r1
1a002c6a:	f100 3cff 	add.w	ip, r0, #4294967295
1a002c6e:	d210      	bcs.n	1a002c92 <__udivmoddi4+0x2aa>
1a002c70:	428b      	cmp	r3, r1
1a002c72:	d90e      	bls.n	1a002c92 <__udivmoddi4+0x2aa>
1a002c74:	3802      	subs	r0, #2
1a002c76:	4429      	add	r1, r5
1a002c78:	1ac9      	subs	r1, r1, r3
1a002c7a:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a002c7e:	e714      	b.n	1a002aaa <__udivmoddi4+0xc2>
1a002c80:	4541      	cmp	r1, r8
1a002c82:	d2ab      	bcs.n	1a002bdc <__udivmoddi4+0x1f4>
1a002c84:	ebb8 0e02 	subs.w	lr, r8, r2
1a002c88:	eb69 020c 	sbc.w	r2, r9, ip
1a002c8c:	3801      	subs	r0, #1
1a002c8e:	4613      	mov	r3, r2
1a002c90:	e7a4      	b.n	1a002bdc <__udivmoddi4+0x1f4>
1a002c92:	4660      	mov	r0, ip
1a002c94:	e7f0      	b.n	1a002c78 <__udivmoddi4+0x290>
1a002c96:	4618      	mov	r0, r3
1a002c98:	e795      	b.n	1a002bc6 <__udivmoddi4+0x1de>
1a002c9a:	4667      	mov	r7, ip
1a002c9c:	e7d8      	b.n	1a002c50 <__udivmoddi4+0x268>
1a002c9e:	4681      	mov	r9, r0
1a002ca0:	e77b      	b.n	1a002b9a <__udivmoddi4+0x1b2>
1a002ca2:	4638      	mov	r0, r7
1a002ca4:	e745      	b.n	1a002b32 <__udivmoddi4+0x14a>
1a002ca6:	f1ac 0c02 	sub.w	ip, ip, #2
1a002caa:	442b      	add	r3, r5
1a002cac:	e710      	b.n	1a002ad0 <__udivmoddi4+0xe8>
1a002cae:	3802      	subs	r0, #2
1a002cb0:	442c      	add	r4, r5
1a002cb2:	e721      	b.n	1a002af8 <__udivmoddi4+0x110>
1a002cb4:	4637      	mov	r7, r6
1a002cb6:	e6e8      	b.n	1a002a8a <__udivmoddi4+0xa2>

1a002cb8 <__aeabi_idiv0>:
1a002cb8:	4770      	bx	lr
1a002cba:	bf00      	nop

1a002cbc <__sflush_r>:
1a002cbc:	898a      	ldrh	r2, [r1, #12]
1a002cbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a002cc2:	4605      	mov	r5, r0
1a002cc4:	0710      	lsls	r0, r2, #28
1a002cc6:	460c      	mov	r4, r1
1a002cc8:	d458      	bmi.n	1a002d7c <__sflush_r+0xc0>
1a002cca:	684b      	ldr	r3, [r1, #4]
1a002ccc:	2b00      	cmp	r3, #0
1a002cce:	dc05      	bgt.n	1a002cdc <__sflush_r+0x20>
1a002cd0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
1a002cd2:	2b00      	cmp	r3, #0
1a002cd4:	dc02      	bgt.n	1a002cdc <__sflush_r+0x20>
1a002cd6:	2000      	movs	r0, #0
1a002cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a002cdc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a002cde:	2e00      	cmp	r6, #0
1a002ce0:	d0f9      	beq.n	1a002cd6 <__sflush_r+0x1a>
1a002ce2:	2300      	movs	r3, #0
1a002ce4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
1a002ce8:	682f      	ldr	r7, [r5, #0]
1a002cea:	602b      	str	r3, [r5, #0]
1a002cec:	d032      	beq.n	1a002d54 <__sflush_r+0x98>
1a002cee:	6d60      	ldr	r0, [r4, #84]	; 0x54
1a002cf0:	89a3      	ldrh	r3, [r4, #12]
1a002cf2:	075a      	lsls	r2, r3, #29
1a002cf4:	d505      	bpl.n	1a002d02 <__sflush_r+0x46>
1a002cf6:	6863      	ldr	r3, [r4, #4]
1a002cf8:	1ac0      	subs	r0, r0, r3
1a002cfa:	6b63      	ldr	r3, [r4, #52]	; 0x34
1a002cfc:	b10b      	cbz	r3, 1a002d02 <__sflush_r+0x46>
1a002cfe:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a002d00:	1ac0      	subs	r0, r0, r3
1a002d02:	2300      	movs	r3, #0
1a002d04:	4602      	mov	r2, r0
1a002d06:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a002d08:	6a21      	ldr	r1, [r4, #32]
1a002d0a:	4628      	mov	r0, r5
1a002d0c:	47b0      	blx	r6
1a002d0e:	1c43      	adds	r3, r0, #1
1a002d10:	89a3      	ldrh	r3, [r4, #12]
1a002d12:	d106      	bne.n	1a002d22 <__sflush_r+0x66>
1a002d14:	6829      	ldr	r1, [r5, #0]
1a002d16:	291d      	cmp	r1, #29
1a002d18:	d849      	bhi.n	1a002dae <__sflush_r+0xf2>
1a002d1a:	4a2a      	ldr	r2, [pc, #168]	; (1a002dc4 <__sflush_r+0x108>)
1a002d1c:	40ca      	lsrs	r2, r1
1a002d1e:	07d6      	lsls	r6, r2, #31
1a002d20:	d545      	bpl.n	1a002dae <__sflush_r+0xf2>
1a002d22:	2200      	movs	r2, #0
1a002d24:	6062      	str	r2, [r4, #4]
1a002d26:	04d9      	lsls	r1, r3, #19
1a002d28:	6922      	ldr	r2, [r4, #16]
1a002d2a:	6022      	str	r2, [r4, #0]
1a002d2c:	d504      	bpl.n	1a002d38 <__sflush_r+0x7c>
1a002d2e:	1c42      	adds	r2, r0, #1
1a002d30:	d101      	bne.n	1a002d36 <__sflush_r+0x7a>
1a002d32:	682b      	ldr	r3, [r5, #0]
1a002d34:	b903      	cbnz	r3, 1a002d38 <__sflush_r+0x7c>
1a002d36:	6560      	str	r0, [r4, #84]	; 0x54
1a002d38:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a002d3a:	602f      	str	r7, [r5, #0]
1a002d3c:	2900      	cmp	r1, #0
1a002d3e:	d0ca      	beq.n	1a002cd6 <__sflush_r+0x1a>
1a002d40:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a002d44:	4299      	cmp	r1, r3
1a002d46:	d002      	beq.n	1a002d4e <__sflush_r+0x92>
1a002d48:	4628      	mov	r0, r5
1a002d4a:	f000 f99d 	bl	1a003088 <_free_r>
1a002d4e:	2000      	movs	r0, #0
1a002d50:	6360      	str	r0, [r4, #52]	; 0x34
1a002d52:	e7c1      	b.n	1a002cd8 <__sflush_r+0x1c>
1a002d54:	6a21      	ldr	r1, [r4, #32]
1a002d56:	2301      	movs	r3, #1
1a002d58:	4628      	mov	r0, r5
1a002d5a:	47b0      	blx	r6
1a002d5c:	1c41      	adds	r1, r0, #1
1a002d5e:	d1c7      	bne.n	1a002cf0 <__sflush_r+0x34>
1a002d60:	682b      	ldr	r3, [r5, #0]
1a002d62:	2b00      	cmp	r3, #0
1a002d64:	d0c4      	beq.n	1a002cf0 <__sflush_r+0x34>
1a002d66:	2b1d      	cmp	r3, #29
1a002d68:	d001      	beq.n	1a002d6e <__sflush_r+0xb2>
1a002d6a:	2b16      	cmp	r3, #22
1a002d6c:	d101      	bne.n	1a002d72 <__sflush_r+0xb6>
1a002d6e:	602f      	str	r7, [r5, #0]
1a002d70:	e7b1      	b.n	1a002cd6 <__sflush_r+0x1a>
1a002d72:	89a3      	ldrh	r3, [r4, #12]
1a002d74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a002d78:	81a3      	strh	r3, [r4, #12]
1a002d7a:	e7ad      	b.n	1a002cd8 <__sflush_r+0x1c>
1a002d7c:	690f      	ldr	r7, [r1, #16]
1a002d7e:	2f00      	cmp	r7, #0
1a002d80:	d0a9      	beq.n	1a002cd6 <__sflush_r+0x1a>
1a002d82:	0793      	lsls	r3, r2, #30
1a002d84:	680e      	ldr	r6, [r1, #0]
1a002d86:	bf08      	it	eq
1a002d88:	694b      	ldreq	r3, [r1, #20]
1a002d8a:	600f      	str	r7, [r1, #0]
1a002d8c:	bf18      	it	ne
1a002d8e:	2300      	movne	r3, #0
1a002d90:	eba6 0807 	sub.w	r8, r6, r7
1a002d94:	608b      	str	r3, [r1, #8]
1a002d96:	f1b8 0f00 	cmp.w	r8, #0
1a002d9a:	dd9c      	ble.n	1a002cd6 <__sflush_r+0x1a>
1a002d9c:	4643      	mov	r3, r8
1a002d9e:	463a      	mov	r2, r7
1a002da0:	6a21      	ldr	r1, [r4, #32]
1a002da2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
1a002da4:	4628      	mov	r0, r5
1a002da6:	47b0      	blx	r6
1a002da8:	2800      	cmp	r0, #0
1a002daa:	dc06      	bgt.n	1a002dba <__sflush_r+0xfe>
1a002dac:	89a3      	ldrh	r3, [r4, #12]
1a002dae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a002db2:	81a3      	strh	r3, [r4, #12]
1a002db4:	f04f 30ff 	mov.w	r0, #4294967295
1a002db8:	e78e      	b.n	1a002cd8 <__sflush_r+0x1c>
1a002dba:	4407      	add	r7, r0
1a002dbc:	eba8 0800 	sub.w	r8, r8, r0
1a002dc0:	e7e9      	b.n	1a002d96 <__sflush_r+0xda>
1a002dc2:	bf00      	nop
1a002dc4:	20400001 	.word	0x20400001

1a002dc8 <_fflush_r>:
1a002dc8:	b538      	push	{r3, r4, r5, lr}
1a002dca:	690b      	ldr	r3, [r1, #16]
1a002dcc:	4605      	mov	r5, r0
1a002dce:	460c      	mov	r4, r1
1a002dd0:	b913      	cbnz	r3, 1a002dd8 <_fflush_r+0x10>
1a002dd2:	2500      	movs	r5, #0
1a002dd4:	4628      	mov	r0, r5
1a002dd6:	bd38      	pop	{r3, r4, r5, pc}
1a002dd8:	b118      	cbz	r0, 1a002de2 <_fflush_r+0x1a>
1a002dda:	6983      	ldr	r3, [r0, #24]
1a002ddc:	b90b      	cbnz	r3, 1a002de2 <_fflush_r+0x1a>
1a002dde:	f000 f887 	bl	1a002ef0 <__sinit>
1a002de2:	4b14      	ldr	r3, [pc, #80]	; (1a002e34 <_fflush_r+0x6c>)
1a002de4:	429c      	cmp	r4, r3
1a002de6:	d11b      	bne.n	1a002e20 <_fflush_r+0x58>
1a002de8:	686c      	ldr	r4, [r5, #4]
1a002dea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a002dee:	2b00      	cmp	r3, #0
1a002df0:	d0ef      	beq.n	1a002dd2 <_fflush_r+0xa>
1a002df2:	6e62      	ldr	r2, [r4, #100]	; 0x64
1a002df4:	07d0      	lsls	r0, r2, #31
1a002df6:	d404      	bmi.n	1a002e02 <_fflush_r+0x3a>
1a002df8:	0599      	lsls	r1, r3, #22
1a002dfa:	d402      	bmi.n	1a002e02 <_fflush_r+0x3a>
1a002dfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a002dfe:	f000 f938 	bl	1a003072 <__retarget_lock_acquire_recursive>
1a002e02:	4628      	mov	r0, r5
1a002e04:	4621      	mov	r1, r4
1a002e06:	f7ff ff59 	bl	1a002cbc <__sflush_r>
1a002e0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a002e0c:	07da      	lsls	r2, r3, #31
1a002e0e:	4605      	mov	r5, r0
1a002e10:	d4e0      	bmi.n	1a002dd4 <_fflush_r+0xc>
1a002e12:	89a3      	ldrh	r3, [r4, #12]
1a002e14:	059b      	lsls	r3, r3, #22
1a002e16:	d4dd      	bmi.n	1a002dd4 <_fflush_r+0xc>
1a002e18:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a002e1a:	f000 f92b 	bl	1a003074 <__retarget_lock_release_recursive>
1a002e1e:	e7d9      	b.n	1a002dd4 <_fflush_r+0xc>
1a002e20:	4b05      	ldr	r3, [pc, #20]	; (1a002e38 <_fflush_r+0x70>)
1a002e22:	429c      	cmp	r4, r3
1a002e24:	d101      	bne.n	1a002e2a <_fflush_r+0x62>
1a002e26:	68ac      	ldr	r4, [r5, #8]
1a002e28:	e7df      	b.n	1a002dea <_fflush_r+0x22>
1a002e2a:	4b04      	ldr	r3, [pc, #16]	; (1a002e3c <_fflush_r+0x74>)
1a002e2c:	429c      	cmp	r4, r3
1a002e2e:	bf08      	it	eq
1a002e30:	68ec      	ldreq	r4, [r5, #12]
1a002e32:	e7da      	b.n	1a002dea <_fflush_r+0x22>
1a002e34:	1a003a70 	.word	0x1a003a70
1a002e38:	1a003a90 	.word	0x1a003a90
1a002e3c:	1a003a50 	.word	0x1a003a50

1a002e40 <std>:
1a002e40:	2300      	movs	r3, #0
1a002e42:	b510      	push	{r4, lr}
1a002e44:	4604      	mov	r4, r0
1a002e46:	e9c0 3300 	strd	r3, r3, [r0]
1a002e4a:	6083      	str	r3, [r0, #8]
1a002e4c:	8181      	strh	r1, [r0, #12]
1a002e4e:	6643      	str	r3, [r0, #100]	; 0x64
1a002e50:	81c2      	strh	r2, [r0, #14]
1a002e52:	e9c0 3304 	strd	r3, r3, [r0, #16]
1a002e56:	6183      	str	r3, [r0, #24]
1a002e58:	4619      	mov	r1, r3
1a002e5a:	2208      	movs	r2, #8
1a002e5c:	305c      	adds	r0, #92	; 0x5c
1a002e5e:	f000 f90a 	bl	1a003076 <memset>
1a002e62:	4b05      	ldr	r3, [pc, #20]	; (1a002e78 <std+0x38>)
1a002e64:	6263      	str	r3, [r4, #36]	; 0x24
1a002e66:	4b05      	ldr	r3, [pc, #20]	; (1a002e7c <std+0x3c>)
1a002e68:	62a3      	str	r3, [r4, #40]	; 0x28
1a002e6a:	4b05      	ldr	r3, [pc, #20]	; (1a002e80 <std+0x40>)
1a002e6c:	62e3      	str	r3, [r4, #44]	; 0x2c
1a002e6e:	4b05      	ldr	r3, [pc, #20]	; (1a002e84 <std+0x44>)
1a002e70:	6224      	str	r4, [r4, #32]
1a002e72:	6323      	str	r3, [r4, #48]	; 0x30
1a002e74:	bd10      	pop	{r4, pc}
1a002e76:	bf00      	nop
1a002e78:	1a0032c5 	.word	0x1a0032c5
1a002e7c:	1a0032e7 	.word	0x1a0032e7
1a002e80:	1a00331f 	.word	0x1a00331f
1a002e84:	1a003343 	.word	0x1a003343

1a002e88 <_cleanup_r>:
1a002e88:	4901      	ldr	r1, [pc, #4]	; (1a002e90 <_cleanup_r+0x8>)
1a002e8a:	f000 b8af 	b.w	1a002fec <_fwalk_reent>
1a002e8e:	bf00      	nop
1a002e90:	1a002dc9 	.word	0x1a002dc9

1a002e94 <__sfmoreglue>:
1a002e94:	b570      	push	{r4, r5, r6, lr}
1a002e96:	1e4a      	subs	r2, r1, #1
1a002e98:	2568      	movs	r5, #104	; 0x68
1a002e9a:	4355      	muls	r5, r2
1a002e9c:	460e      	mov	r6, r1
1a002e9e:	f105 0174 	add.w	r1, r5, #116	; 0x74
1a002ea2:	f000 f93f 	bl	1a003124 <_malloc_r>
1a002ea6:	4604      	mov	r4, r0
1a002ea8:	b140      	cbz	r0, 1a002ebc <__sfmoreglue+0x28>
1a002eaa:	2100      	movs	r1, #0
1a002eac:	e9c0 1600 	strd	r1, r6, [r0]
1a002eb0:	300c      	adds	r0, #12
1a002eb2:	60a0      	str	r0, [r4, #8]
1a002eb4:	f105 0268 	add.w	r2, r5, #104	; 0x68
1a002eb8:	f000 f8dd 	bl	1a003076 <memset>
1a002ebc:	4620      	mov	r0, r4
1a002ebe:	bd70      	pop	{r4, r5, r6, pc}

1a002ec0 <__sfp_lock_acquire>:
1a002ec0:	4801      	ldr	r0, [pc, #4]	; (1a002ec8 <__sfp_lock_acquire+0x8>)
1a002ec2:	f000 b8d6 	b.w	1a003072 <__retarget_lock_acquire_recursive>
1a002ec6:	bf00      	nop
1a002ec8:	1000019c 	.word	0x1000019c

1a002ecc <__sfp_lock_release>:
1a002ecc:	4801      	ldr	r0, [pc, #4]	; (1a002ed4 <__sfp_lock_release+0x8>)
1a002ece:	f000 b8d1 	b.w	1a003074 <__retarget_lock_release_recursive>
1a002ed2:	bf00      	nop
1a002ed4:	1000019c 	.word	0x1000019c

1a002ed8 <__sinit_lock_acquire>:
1a002ed8:	4801      	ldr	r0, [pc, #4]	; (1a002ee0 <__sinit_lock_acquire+0x8>)
1a002eda:	f000 b8ca 	b.w	1a003072 <__retarget_lock_acquire_recursive>
1a002ede:	bf00      	nop
1a002ee0:	10000197 	.word	0x10000197

1a002ee4 <__sinit_lock_release>:
1a002ee4:	4801      	ldr	r0, [pc, #4]	; (1a002eec <__sinit_lock_release+0x8>)
1a002ee6:	f000 b8c5 	b.w	1a003074 <__retarget_lock_release_recursive>
1a002eea:	bf00      	nop
1a002eec:	10000197 	.word	0x10000197

1a002ef0 <__sinit>:
1a002ef0:	b510      	push	{r4, lr}
1a002ef2:	4604      	mov	r4, r0
1a002ef4:	f7ff fff0 	bl	1a002ed8 <__sinit_lock_acquire>
1a002ef8:	69a3      	ldr	r3, [r4, #24]
1a002efa:	b11b      	cbz	r3, 1a002f04 <__sinit+0x14>
1a002efc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a002f00:	f7ff bff0 	b.w	1a002ee4 <__sinit_lock_release>
1a002f04:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
1a002f08:	6523      	str	r3, [r4, #80]	; 0x50
1a002f0a:	4b13      	ldr	r3, [pc, #76]	; (1a002f58 <__sinit+0x68>)
1a002f0c:	4a13      	ldr	r2, [pc, #76]	; (1a002f5c <__sinit+0x6c>)
1a002f0e:	681b      	ldr	r3, [r3, #0]
1a002f10:	62a2      	str	r2, [r4, #40]	; 0x28
1a002f12:	42a3      	cmp	r3, r4
1a002f14:	bf04      	itt	eq
1a002f16:	2301      	moveq	r3, #1
1a002f18:	61a3      	streq	r3, [r4, #24]
1a002f1a:	4620      	mov	r0, r4
1a002f1c:	f000 f820 	bl	1a002f60 <__sfp>
1a002f20:	6060      	str	r0, [r4, #4]
1a002f22:	4620      	mov	r0, r4
1a002f24:	f000 f81c 	bl	1a002f60 <__sfp>
1a002f28:	60a0      	str	r0, [r4, #8]
1a002f2a:	4620      	mov	r0, r4
1a002f2c:	f000 f818 	bl	1a002f60 <__sfp>
1a002f30:	2200      	movs	r2, #0
1a002f32:	60e0      	str	r0, [r4, #12]
1a002f34:	2104      	movs	r1, #4
1a002f36:	6860      	ldr	r0, [r4, #4]
1a002f38:	f7ff ff82 	bl	1a002e40 <std>
1a002f3c:	2201      	movs	r2, #1
1a002f3e:	2109      	movs	r1, #9
1a002f40:	68a0      	ldr	r0, [r4, #8]
1a002f42:	f7ff ff7d 	bl	1a002e40 <std>
1a002f46:	2202      	movs	r2, #2
1a002f48:	2112      	movs	r1, #18
1a002f4a:	68e0      	ldr	r0, [r4, #12]
1a002f4c:	f7ff ff78 	bl	1a002e40 <std>
1a002f50:	2301      	movs	r3, #1
1a002f52:	61a3      	str	r3, [r4, #24]
1a002f54:	e7d2      	b.n	1a002efc <__sinit+0xc>
1a002f56:	bf00      	nop
1a002f58:	1a003ab0 	.word	0x1a003ab0
1a002f5c:	1a002e89 	.word	0x1a002e89

1a002f60 <__sfp>:
1a002f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a002f62:	4607      	mov	r7, r0
1a002f64:	f7ff ffac 	bl	1a002ec0 <__sfp_lock_acquire>
1a002f68:	4b1e      	ldr	r3, [pc, #120]	; (1a002fe4 <__sfp+0x84>)
1a002f6a:	681e      	ldr	r6, [r3, #0]
1a002f6c:	69b3      	ldr	r3, [r6, #24]
1a002f6e:	b913      	cbnz	r3, 1a002f76 <__sfp+0x16>
1a002f70:	4630      	mov	r0, r6
1a002f72:	f7ff ffbd 	bl	1a002ef0 <__sinit>
1a002f76:	3648      	adds	r6, #72	; 0x48
1a002f78:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
1a002f7c:	3b01      	subs	r3, #1
1a002f7e:	d503      	bpl.n	1a002f88 <__sfp+0x28>
1a002f80:	6833      	ldr	r3, [r6, #0]
1a002f82:	b30b      	cbz	r3, 1a002fc8 <__sfp+0x68>
1a002f84:	6836      	ldr	r6, [r6, #0]
1a002f86:	e7f7      	b.n	1a002f78 <__sfp+0x18>
1a002f88:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
1a002f8c:	b9d5      	cbnz	r5, 1a002fc4 <__sfp+0x64>
1a002f8e:	4b16      	ldr	r3, [pc, #88]	; (1a002fe8 <__sfp+0x88>)
1a002f90:	60e3      	str	r3, [r4, #12]
1a002f92:	f104 0058 	add.w	r0, r4, #88	; 0x58
1a002f96:	6665      	str	r5, [r4, #100]	; 0x64
1a002f98:	f000 f86a 	bl	1a003070 <__retarget_lock_init_recursive>
1a002f9c:	f7ff ff96 	bl	1a002ecc <__sfp_lock_release>
1a002fa0:	6025      	str	r5, [r4, #0]
1a002fa2:	e9c4 5501 	strd	r5, r5, [r4, #4]
1a002fa6:	e9c4 5504 	strd	r5, r5, [r4, #16]
1a002faa:	61a5      	str	r5, [r4, #24]
1a002fac:	2208      	movs	r2, #8
1a002fae:	4629      	mov	r1, r5
1a002fb0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
1a002fb4:	f000 f85f 	bl	1a003076 <memset>
1a002fb8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
1a002fbc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
1a002fc0:	4620      	mov	r0, r4
1a002fc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a002fc4:	3468      	adds	r4, #104	; 0x68
1a002fc6:	e7d9      	b.n	1a002f7c <__sfp+0x1c>
1a002fc8:	2104      	movs	r1, #4
1a002fca:	4638      	mov	r0, r7
1a002fcc:	f7ff ff62 	bl	1a002e94 <__sfmoreglue>
1a002fd0:	4604      	mov	r4, r0
1a002fd2:	6030      	str	r0, [r6, #0]
1a002fd4:	2800      	cmp	r0, #0
1a002fd6:	d1d5      	bne.n	1a002f84 <__sfp+0x24>
1a002fd8:	f7ff ff78 	bl	1a002ecc <__sfp_lock_release>
1a002fdc:	230c      	movs	r3, #12
1a002fde:	603b      	str	r3, [r7, #0]
1a002fe0:	e7ee      	b.n	1a002fc0 <__sfp+0x60>
1a002fe2:	bf00      	nop
1a002fe4:	1a003ab0 	.word	0x1a003ab0
1a002fe8:	ffff0001 	.word	0xffff0001

1a002fec <_fwalk_reent>:
1a002fec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a002ff0:	4680      	mov	r8, r0
1a002ff2:	4689      	mov	r9, r1
1a002ff4:	f100 0448 	add.w	r4, r0, #72	; 0x48
1a002ff8:	2600      	movs	r6, #0
1a002ffa:	b914      	cbnz	r4, 1a003002 <_fwalk_reent+0x16>
1a002ffc:	4630      	mov	r0, r6
1a002ffe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a003002:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
1a003006:	3f01      	subs	r7, #1
1a003008:	d501      	bpl.n	1a00300e <_fwalk_reent+0x22>
1a00300a:	6824      	ldr	r4, [r4, #0]
1a00300c:	e7f5      	b.n	1a002ffa <_fwalk_reent+0xe>
1a00300e:	89ab      	ldrh	r3, [r5, #12]
1a003010:	2b01      	cmp	r3, #1
1a003012:	d907      	bls.n	1a003024 <_fwalk_reent+0x38>
1a003014:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
1a003018:	3301      	adds	r3, #1
1a00301a:	d003      	beq.n	1a003024 <_fwalk_reent+0x38>
1a00301c:	4629      	mov	r1, r5
1a00301e:	4640      	mov	r0, r8
1a003020:	47c8      	blx	r9
1a003022:	4306      	orrs	r6, r0
1a003024:	3568      	adds	r5, #104	; 0x68
1a003026:	e7ee      	b.n	1a003006 <_fwalk_reent+0x1a>

1a003028 <__libc_init_array>:
1a003028:	b570      	push	{r4, r5, r6, lr}
1a00302a:	4d0d      	ldr	r5, [pc, #52]	; (1a003060 <__libc_init_array+0x38>)
1a00302c:	4c0d      	ldr	r4, [pc, #52]	; (1a003064 <__libc_init_array+0x3c>)
1a00302e:	1b64      	subs	r4, r4, r5
1a003030:	10a4      	asrs	r4, r4, #2
1a003032:	2600      	movs	r6, #0
1a003034:	42a6      	cmp	r6, r4
1a003036:	d109      	bne.n	1a00304c <__libc_init_array+0x24>
1a003038:	4d0b      	ldr	r5, [pc, #44]	; (1a003068 <__libc_init_array+0x40>)
1a00303a:	4c0c      	ldr	r4, [pc, #48]	; (1a00306c <__libc_init_array+0x44>)
1a00303c:	f7fd fd01 	bl	1a000a42 <_init>
1a003040:	1b64      	subs	r4, r4, r5
1a003042:	10a4      	asrs	r4, r4, #2
1a003044:	2600      	movs	r6, #0
1a003046:	42a6      	cmp	r6, r4
1a003048:	d105      	bne.n	1a003056 <__libc_init_array+0x2e>
1a00304a:	bd70      	pop	{r4, r5, r6, pc}
1a00304c:	f855 3b04 	ldr.w	r3, [r5], #4
1a003050:	4798      	blx	r3
1a003052:	3601      	adds	r6, #1
1a003054:	e7ee      	b.n	1a003034 <__libc_init_array+0xc>
1a003056:	f855 3b04 	ldr.w	r3, [r5], #4
1a00305a:	4798      	blx	r3
1a00305c:	3601      	adds	r6, #1
1a00305e:	e7f2      	b.n	1a003046 <__libc_init_array+0x1e>
1a003060:	1a003ab4 	.word	0x1a003ab4
1a003064:	1a003ab4 	.word	0x1a003ab4
1a003068:	1a003ab4 	.word	0x1a003ab4
1a00306c:	1a003ab8 	.word	0x1a003ab8

1a003070 <__retarget_lock_init_recursive>:
1a003070:	4770      	bx	lr

1a003072 <__retarget_lock_acquire_recursive>:
1a003072:	4770      	bx	lr

1a003074 <__retarget_lock_release_recursive>:
1a003074:	4770      	bx	lr

1a003076 <memset>:
1a003076:	4402      	add	r2, r0
1a003078:	4603      	mov	r3, r0
1a00307a:	4293      	cmp	r3, r2
1a00307c:	d100      	bne.n	1a003080 <memset+0xa>
1a00307e:	4770      	bx	lr
1a003080:	f803 1b01 	strb.w	r1, [r3], #1
1a003084:	e7f9      	b.n	1a00307a <memset+0x4>
1a003086:	Address 0x1a003086 is out of bounds.


1a003088 <_free_r>:
1a003088:	b538      	push	{r3, r4, r5, lr}
1a00308a:	4605      	mov	r5, r0
1a00308c:	2900      	cmp	r1, #0
1a00308e:	d045      	beq.n	1a00311c <_free_r+0x94>
1a003090:	f851 3c04 	ldr.w	r3, [r1, #-4]
1a003094:	1f0c      	subs	r4, r1, #4
1a003096:	2b00      	cmp	r3, #0
1a003098:	bfb8      	it	lt
1a00309a:	18e4      	addlt	r4, r4, r3
1a00309c:	f000 fa7a 	bl	1a003594 <__malloc_lock>
1a0030a0:	4a1f      	ldr	r2, [pc, #124]	; (1a003120 <_free_r+0x98>)
1a0030a2:	6813      	ldr	r3, [r2, #0]
1a0030a4:	4610      	mov	r0, r2
1a0030a6:	b933      	cbnz	r3, 1a0030b6 <_free_r+0x2e>
1a0030a8:	6063      	str	r3, [r4, #4]
1a0030aa:	6014      	str	r4, [r2, #0]
1a0030ac:	4628      	mov	r0, r5
1a0030ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a0030b2:	f000 ba75 	b.w	1a0035a0 <__malloc_unlock>
1a0030b6:	42a3      	cmp	r3, r4
1a0030b8:	d90c      	bls.n	1a0030d4 <_free_r+0x4c>
1a0030ba:	6821      	ldr	r1, [r4, #0]
1a0030bc:	1862      	adds	r2, r4, r1
1a0030be:	4293      	cmp	r3, r2
1a0030c0:	bf04      	itt	eq
1a0030c2:	681a      	ldreq	r2, [r3, #0]
1a0030c4:	685b      	ldreq	r3, [r3, #4]
1a0030c6:	6063      	str	r3, [r4, #4]
1a0030c8:	bf04      	itt	eq
1a0030ca:	1852      	addeq	r2, r2, r1
1a0030cc:	6022      	streq	r2, [r4, #0]
1a0030ce:	6004      	str	r4, [r0, #0]
1a0030d0:	e7ec      	b.n	1a0030ac <_free_r+0x24>
1a0030d2:	4613      	mov	r3, r2
1a0030d4:	685a      	ldr	r2, [r3, #4]
1a0030d6:	b10a      	cbz	r2, 1a0030dc <_free_r+0x54>
1a0030d8:	42a2      	cmp	r2, r4
1a0030da:	d9fa      	bls.n	1a0030d2 <_free_r+0x4a>
1a0030dc:	6819      	ldr	r1, [r3, #0]
1a0030de:	1858      	adds	r0, r3, r1
1a0030e0:	42a0      	cmp	r0, r4
1a0030e2:	d10b      	bne.n	1a0030fc <_free_r+0x74>
1a0030e4:	6820      	ldr	r0, [r4, #0]
1a0030e6:	4401      	add	r1, r0
1a0030e8:	1858      	adds	r0, r3, r1
1a0030ea:	4282      	cmp	r2, r0
1a0030ec:	6019      	str	r1, [r3, #0]
1a0030ee:	d1dd      	bne.n	1a0030ac <_free_r+0x24>
1a0030f0:	6810      	ldr	r0, [r2, #0]
1a0030f2:	6852      	ldr	r2, [r2, #4]
1a0030f4:	605a      	str	r2, [r3, #4]
1a0030f6:	4401      	add	r1, r0
1a0030f8:	6019      	str	r1, [r3, #0]
1a0030fa:	e7d7      	b.n	1a0030ac <_free_r+0x24>
1a0030fc:	d902      	bls.n	1a003104 <_free_r+0x7c>
1a0030fe:	230c      	movs	r3, #12
1a003100:	602b      	str	r3, [r5, #0]
1a003102:	e7d3      	b.n	1a0030ac <_free_r+0x24>
1a003104:	6820      	ldr	r0, [r4, #0]
1a003106:	1821      	adds	r1, r4, r0
1a003108:	428a      	cmp	r2, r1
1a00310a:	bf04      	itt	eq
1a00310c:	6811      	ldreq	r1, [r2, #0]
1a00310e:	6852      	ldreq	r2, [r2, #4]
1a003110:	6062      	str	r2, [r4, #4]
1a003112:	bf04      	itt	eq
1a003114:	1809      	addeq	r1, r1, r0
1a003116:	6021      	streq	r1, [r4, #0]
1a003118:	605c      	str	r4, [r3, #4]
1a00311a:	e7c7      	b.n	1a0030ac <_free_r+0x24>
1a00311c:	bd38      	pop	{r3, r4, r5, pc}
1a00311e:	bf00      	nop
1a003120:	10000184 	.word	0x10000184

1a003124 <_malloc_r>:
1a003124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a003126:	1ccd      	adds	r5, r1, #3
1a003128:	f025 0503 	bic.w	r5, r5, #3
1a00312c:	3508      	adds	r5, #8
1a00312e:	2d0c      	cmp	r5, #12
1a003130:	bf38      	it	cc
1a003132:	250c      	movcc	r5, #12
1a003134:	2d00      	cmp	r5, #0
1a003136:	4606      	mov	r6, r0
1a003138:	db01      	blt.n	1a00313e <_malloc_r+0x1a>
1a00313a:	42a9      	cmp	r1, r5
1a00313c:	d903      	bls.n	1a003146 <_malloc_r+0x22>
1a00313e:	230c      	movs	r3, #12
1a003140:	6033      	str	r3, [r6, #0]
1a003142:	2000      	movs	r0, #0
1a003144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a003146:	f000 fa25 	bl	1a003594 <__malloc_lock>
1a00314a:	4921      	ldr	r1, [pc, #132]	; (1a0031d0 <_malloc_r+0xac>)
1a00314c:	680a      	ldr	r2, [r1, #0]
1a00314e:	4614      	mov	r4, r2
1a003150:	b99c      	cbnz	r4, 1a00317a <_malloc_r+0x56>
1a003152:	4f20      	ldr	r7, [pc, #128]	; (1a0031d4 <_malloc_r+0xb0>)
1a003154:	683b      	ldr	r3, [r7, #0]
1a003156:	b923      	cbnz	r3, 1a003162 <_malloc_r+0x3e>
1a003158:	4621      	mov	r1, r4
1a00315a:	4630      	mov	r0, r6
1a00315c:	f7fd fcc6 	bl	1a000aec <_sbrk_r>
1a003160:	6038      	str	r0, [r7, #0]
1a003162:	4629      	mov	r1, r5
1a003164:	4630      	mov	r0, r6
1a003166:	f7fd fcc1 	bl	1a000aec <_sbrk_r>
1a00316a:	1c43      	adds	r3, r0, #1
1a00316c:	d123      	bne.n	1a0031b6 <_malloc_r+0x92>
1a00316e:	230c      	movs	r3, #12
1a003170:	6033      	str	r3, [r6, #0]
1a003172:	4630      	mov	r0, r6
1a003174:	f000 fa14 	bl	1a0035a0 <__malloc_unlock>
1a003178:	e7e3      	b.n	1a003142 <_malloc_r+0x1e>
1a00317a:	6823      	ldr	r3, [r4, #0]
1a00317c:	1b5b      	subs	r3, r3, r5
1a00317e:	d417      	bmi.n	1a0031b0 <_malloc_r+0x8c>
1a003180:	2b0b      	cmp	r3, #11
1a003182:	d903      	bls.n	1a00318c <_malloc_r+0x68>
1a003184:	6023      	str	r3, [r4, #0]
1a003186:	441c      	add	r4, r3
1a003188:	6025      	str	r5, [r4, #0]
1a00318a:	e004      	b.n	1a003196 <_malloc_r+0x72>
1a00318c:	6863      	ldr	r3, [r4, #4]
1a00318e:	42a2      	cmp	r2, r4
1a003190:	bf0c      	ite	eq
1a003192:	600b      	streq	r3, [r1, #0]
1a003194:	6053      	strne	r3, [r2, #4]
1a003196:	4630      	mov	r0, r6
1a003198:	f000 fa02 	bl	1a0035a0 <__malloc_unlock>
1a00319c:	f104 000b 	add.w	r0, r4, #11
1a0031a0:	1d23      	adds	r3, r4, #4
1a0031a2:	f020 0007 	bic.w	r0, r0, #7
1a0031a6:	1ac2      	subs	r2, r0, r3
1a0031a8:	d0cc      	beq.n	1a003144 <_malloc_r+0x20>
1a0031aa:	1a1b      	subs	r3, r3, r0
1a0031ac:	50a3      	str	r3, [r4, r2]
1a0031ae:	e7c9      	b.n	1a003144 <_malloc_r+0x20>
1a0031b0:	4622      	mov	r2, r4
1a0031b2:	6864      	ldr	r4, [r4, #4]
1a0031b4:	e7cc      	b.n	1a003150 <_malloc_r+0x2c>
1a0031b6:	1cc4      	adds	r4, r0, #3
1a0031b8:	f024 0403 	bic.w	r4, r4, #3
1a0031bc:	42a0      	cmp	r0, r4
1a0031be:	d0e3      	beq.n	1a003188 <_malloc_r+0x64>
1a0031c0:	1a21      	subs	r1, r4, r0
1a0031c2:	4630      	mov	r0, r6
1a0031c4:	f7fd fc92 	bl	1a000aec <_sbrk_r>
1a0031c8:	3001      	adds	r0, #1
1a0031ca:	d1dd      	bne.n	1a003188 <_malloc_r+0x64>
1a0031cc:	e7cf      	b.n	1a00316e <_malloc_r+0x4a>
1a0031ce:	bf00      	nop
1a0031d0:	10000184 	.word	0x10000184
1a0031d4:	10000188 	.word	0x10000188

1a0031d8 <_puts_r>:
1a0031d8:	b570      	push	{r4, r5, r6, lr}
1a0031da:	460e      	mov	r6, r1
1a0031dc:	4605      	mov	r5, r0
1a0031de:	b118      	cbz	r0, 1a0031e8 <_puts_r+0x10>
1a0031e0:	6983      	ldr	r3, [r0, #24]
1a0031e2:	b90b      	cbnz	r3, 1a0031e8 <_puts_r+0x10>
1a0031e4:	f7ff fe84 	bl	1a002ef0 <__sinit>
1a0031e8:	69ab      	ldr	r3, [r5, #24]
1a0031ea:	68ac      	ldr	r4, [r5, #8]
1a0031ec:	b913      	cbnz	r3, 1a0031f4 <_puts_r+0x1c>
1a0031ee:	4628      	mov	r0, r5
1a0031f0:	f7ff fe7e 	bl	1a002ef0 <__sinit>
1a0031f4:	4b2c      	ldr	r3, [pc, #176]	; (1a0032a8 <_puts_r+0xd0>)
1a0031f6:	429c      	cmp	r4, r3
1a0031f8:	d120      	bne.n	1a00323c <_puts_r+0x64>
1a0031fa:	686c      	ldr	r4, [r5, #4]
1a0031fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a0031fe:	07db      	lsls	r3, r3, #31
1a003200:	d405      	bmi.n	1a00320e <_puts_r+0x36>
1a003202:	89a3      	ldrh	r3, [r4, #12]
1a003204:	0598      	lsls	r0, r3, #22
1a003206:	d402      	bmi.n	1a00320e <_puts_r+0x36>
1a003208:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a00320a:	f7ff ff32 	bl	1a003072 <__retarget_lock_acquire_recursive>
1a00320e:	89a3      	ldrh	r3, [r4, #12]
1a003210:	0719      	lsls	r1, r3, #28
1a003212:	d51d      	bpl.n	1a003250 <_puts_r+0x78>
1a003214:	6923      	ldr	r3, [r4, #16]
1a003216:	b1db      	cbz	r3, 1a003250 <_puts_r+0x78>
1a003218:	3e01      	subs	r6, #1
1a00321a:	68a3      	ldr	r3, [r4, #8]
1a00321c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
1a003220:	3b01      	subs	r3, #1
1a003222:	60a3      	str	r3, [r4, #8]
1a003224:	bb39      	cbnz	r1, 1a003276 <_puts_r+0x9e>
1a003226:	2b00      	cmp	r3, #0
1a003228:	da38      	bge.n	1a00329c <_puts_r+0xc4>
1a00322a:	4622      	mov	r2, r4
1a00322c:	210a      	movs	r1, #10
1a00322e:	4628      	mov	r0, r5
1a003230:	f000 f88c 	bl	1a00334c <__swbuf_r>
1a003234:	3001      	adds	r0, #1
1a003236:	d011      	beq.n	1a00325c <_puts_r+0x84>
1a003238:	250a      	movs	r5, #10
1a00323a:	e011      	b.n	1a003260 <_puts_r+0x88>
1a00323c:	4b1b      	ldr	r3, [pc, #108]	; (1a0032ac <_puts_r+0xd4>)
1a00323e:	429c      	cmp	r4, r3
1a003240:	d101      	bne.n	1a003246 <_puts_r+0x6e>
1a003242:	68ac      	ldr	r4, [r5, #8]
1a003244:	e7da      	b.n	1a0031fc <_puts_r+0x24>
1a003246:	4b1a      	ldr	r3, [pc, #104]	; (1a0032b0 <_puts_r+0xd8>)
1a003248:	429c      	cmp	r4, r3
1a00324a:	bf08      	it	eq
1a00324c:	68ec      	ldreq	r4, [r5, #12]
1a00324e:	e7d5      	b.n	1a0031fc <_puts_r+0x24>
1a003250:	4621      	mov	r1, r4
1a003252:	4628      	mov	r0, r5
1a003254:	f000 f8cc 	bl	1a0033f0 <__swsetup_r>
1a003258:	2800      	cmp	r0, #0
1a00325a:	d0dd      	beq.n	1a003218 <_puts_r+0x40>
1a00325c:	f04f 35ff 	mov.w	r5, #4294967295
1a003260:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a003262:	07da      	lsls	r2, r3, #31
1a003264:	d405      	bmi.n	1a003272 <_puts_r+0x9a>
1a003266:	89a3      	ldrh	r3, [r4, #12]
1a003268:	059b      	lsls	r3, r3, #22
1a00326a:	d402      	bmi.n	1a003272 <_puts_r+0x9a>
1a00326c:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a00326e:	f7ff ff01 	bl	1a003074 <__retarget_lock_release_recursive>
1a003272:	4628      	mov	r0, r5
1a003274:	bd70      	pop	{r4, r5, r6, pc}
1a003276:	2b00      	cmp	r3, #0
1a003278:	da04      	bge.n	1a003284 <_puts_r+0xac>
1a00327a:	69a2      	ldr	r2, [r4, #24]
1a00327c:	429a      	cmp	r2, r3
1a00327e:	dc06      	bgt.n	1a00328e <_puts_r+0xb6>
1a003280:	290a      	cmp	r1, #10
1a003282:	d004      	beq.n	1a00328e <_puts_r+0xb6>
1a003284:	6823      	ldr	r3, [r4, #0]
1a003286:	1c5a      	adds	r2, r3, #1
1a003288:	6022      	str	r2, [r4, #0]
1a00328a:	7019      	strb	r1, [r3, #0]
1a00328c:	e7c5      	b.n	1a00321a <_puts_r+0x42>
1a00328e:	4622      	mov	r2, r4
1a003290:	4628      	mov	r0, r5
1a003292:	f000 f85b 	bl	1a00334c <__swbuf_r>
1a003296:	3001      	adds	r0, #1
1a003298:	d1bf      	bne.n	1a00321a <_puts_r+0x42>
1a00329a:	e7df      	b.n	1a00325c <_puts_r+0x84>
1a00329c:	6823      	ldr	r3, [r4, #0]
1a00329e:	250a      	movs	r5, #10
1a0032a0:	1c5a      	adds	r2, r3, #1
1a0032a2:	6022      	str	r2, [r4, #0]
1a0032a4:	701d      	strb	r5, [r3, #0]
1a0032a6:	e7db      	b.n	1a003260 <_puts_r+0x88>
1a0032a8:	1a003a70 	.word	0x1a003a70
1a0032ac:	1a003a90 	.word	0x1a003a90
1a0032b0:	1a003a50 	.word	0x1a003a50

1a0032b4 <puts>:
1a0032b4:	4b02      	ldr	r3, [pc, #8]	; (1a0032c0 <puts+0xc>)
1a0032b6:	4601      	mov	r1, r0
1a0032b8:	6818      	ldr	r0, [r3, #0]
1a0032ba:	f7ff bf8d 	b.w	1a0031d8 <_puts_r>
1a0032be:	bf00      	nop
1a0032c0:	10000090 	.word	0x10000090

1a0032c4 <__sread>:
1a0032c4:	b510      	push	{r4, lr}
1a0032c6:	460c      	mov	r4, r1
1a0032c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0032cc:	f7fd fbd2 	bl	1a000a74 <_read_r>
1a0032d0:	2800      	cmp	r0, #0
1a0032d2:	bfab      	itete	ge
1a0032d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
1a0032d6:	89a3      	ldrhlt	r3, [r4, #12]
1a0032d8:	181b      	addge	r3, r3, r0
1a0032da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
1a0032de:	bfac      	ite	ge
1a0032e0:	6563      	strge	r3, [r4, #84]	; 0x54
1a0032e2:	81a3      	strhlt	r3, [r4, #12]
1a0032e4:	bd10      	pop	{r4, pc}

1a0032e6 <__swrite>:
1a0032e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0032ea:	461f      	mov	r7, r3
1a0032ec:	898b      	ldrh	r3, [r1, #12]
1a0032ee:	05db      	lsls	r3, r3, #23
1a0032f0:	4605      	mov	r5, r0
1a0032f2:	460c      	mov	r4, r1
1a0032f4:	4616      	mov	r6, r2
1a0032f6:	d505      	bpl.n	1a003304 <__swrite+0x1e>
1a0032f8:	2302      	movs	r3, #2
1a0032fa:	2200      	movs	r2, #0
1a0032fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a003300:	f7fd fbb3 	bl	1a000a6a <_lseek_r>
1a003304:	89a3      	ldrh	r3, [r4, #12]
1a003306:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a00330a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
1a00330e:	81a3      	strh	r3, [r4, #12]
1a003310:	4632      	mov	r2, r6
1a003312:	463b      	mov	r3, r7
1a003314:	4628      	mov	r0, r5
1a003316:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a00331a:	f7fd bbd2 	b.w	1a000ac2 <_write_r>

1a00331e <__sseek>:
1a00331e:	b510      	push	{r4, lr}
1a003320:	460c      	mov	r4, r1
1a003322:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a003326:	f7fd fba0 	bl	1a000a6a <_lseek_r>
1a00332a:	1c43      	adds	r3, r0, #1
1a00332c:	89a3      	ldrh	r3, [r4, #12]
1a00332e:	bf15      	itete	ne
1a003330:	6560      	strne	r0, [r4, #84]	; 0x54
1a003332:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
1a003336:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
1a00333a:	81a3      	strheq	r3, [r4, #12]
1a00333c:	bf18      	it	ne
1a00333e:	81a3      	strhne	r3, [r4, #12]
1a003340:	bd10      	pop	{r4, pc}

1a003342 <__sclose>:
1a003342:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a003346:	f7fd bb7d 	b.w	1a000a44 <_close_r>
1a00334a:	Address 0x1a00334a is out of bounds.


1a00334c <__swbuf_r>:
1a00334c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a00334e:	460e      	mov	r6, r1
1a003350:	4614      	mov	r4, r2
1a003352:	4605      	mov	r5, r0
1a003354:	b118      	cbz	r0, 1a00335e <__swbuf_r+0x12>
1a003356:	6983      	ldr	r3, [r0, #24]
1a003358:	b90b      	cbnz	r3, 1a00335e <__swbuf_r+0x12>
1a00335a:	f7ff fdc9 	bl	1a002ef0 <__sinit>
1a00335e:	4b21      	ldr	r3, [pc, #132]	; (1a0033e4 <__swbuf_r+0x98>)
1a003360:	429c      	cmp	r4, r3
1a003362:	d12b      	bne.n	1a0033bc <__swbuf_r+0x70>
1a003364:	686c      	ldr	r4, [r5, #4]
1a003366:	69a3      	ldr	r3, [r4, #24]
1a003368:	60a3      	str	r3, [r4, #8]
1a00336a:	89a3      	ldrh	r3, [r4, #12]
1a00336c:	071a      	lsls	r2, r3, #28
1a00336e:	d52f      	bpl.n	1a0033d0 <__swbuf_r+0x84>
1a003370:	6923      	ldr	r3, [r4, #16]
1a003372:	b36b      	cbz	r3, 1a0033d0 <__swbuf_r+0x84>
1a003374:	6923      	ldr	r3, [r4, #16]
1a003376:	6820      	ldr	r0, [r4, #0]
1a003378:	1ac0      	subs	r0, r0, r3
1a00337a:	6963      	ldr	r3, [r4, #20]
1a00337c:	b2f6      	uxtb	r6, r6
1a00337e:	4283      	cmp	r3, r0
1a003380:	4637      	mov	r7, r6
1a003382:	dc04      	bgt.n	1a00338e <__swbuf_r+0x42>
1a003384:	4621      	mov	r1, r4
1a003386:	4628      	mov	r0, r5
1a003388:	f7ff fd1e 	bl	1a002dc8 <_fflush_r>
1a00338c:	bb30      	cbnz	r0, 1a0033dc <__swbuf_r+0x90>
1a00338e:	68a3      	ldr	r3, [r4, #8]
1a003390:	3b01      	subs	r3, #1
1a003392:	60a3      	str	r3, [r4, #8]
1a003394:	6823      	ldr	r3, [r4, #0]
1a003396:	1c5a      	adds	r2, r3, #1
1a003398:	6022      	str	r2, [r4, #0]
1a00339a:	701e      	strb	r6, [r3, #0]
1a00339c:	6963      	ldr	r3, [r4, #20]
1a00339e:	3001      	adds	r0, #1
1a0033a0:	4283      	cmp	r3, r0
1a0033a2:	d004      	beq.n	1a0033ae <__swbuf_r+0x62>
1a0033a4:	89a3      	ldrh	r3, [r4, #12]
1a0033a6:	07db      	lsls	r3, r3, #31
1a0033a8:	d506      	bpl.n	1a0033b8 <__swbuf_r+0x6c>
1a0033aa:	2e0a      	cmp	r6, #10
1a0033ac:	d104      	bne.n	1a0033b8 <__swbuf_r+0x6c>
1a0033ae:	4621      	mov	r1, r4
1a0033b0:	4628      	mov	r0, r5
1a0033b2:	f7ff fd09 	bl	1a002dc8 <_fflush_r>
1a0033b6:	b988      	cbnz	r0, 1a0033dc <__swbuf_r+0x90>
1a0033b8:	4638      	mov	r0, r7
1a0033ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0033bc:	4b0a      	ldr	r3, [pc, #40]	; (1a0033e8 <__swbuf_r+0x9c>)
1a0033be:	429c      	cmp	r4, r3
1a0033c0:	d101      	bne.n	1a0033c6 <__swbuf_r+0x7a>
1a0033c2:	68ac      	ldr	r4, [r5, #8]
1a0033c4:	e7cf      	b.n	1a003366 <__swbuf_r+0x1a>
1a0033c6:	4b09      	ldr	r3, [pc, #36]	; (1a0033ec <__swbuf_r+0xa0>)
1a0033c8:	429c      	cmp	r4, r3
1a0033ca:	bf08      	it	eq
1a0033cc:	68ec      	ldreq	r4, [r5, #12]
1a0033ce:	e7ca      	b.n	1a003366 <__swbuf_r+0x1a>
1a0033d0:	4621      	mov	r1, r4
1a0033d2:	4628      	mov	r0, r5
1a0033d4:	f000 f80c 	bl	1a0033f0 <__swsetup_r>
1a0033d8:	2800      	cmp	r0, #0
1a0033da:	d0cb      	beq.n	1a003374 <__swbuf_r+0x28>
1a0033dc:	f04f 37ff 	mov.w	r7, #4294967295
1a0033e0:	e7ea      	b.n	1a0033b8 <__swbuf_r+0x6c>
1a0033e2:	bf00      	nop
1a0033e4:	1a003a70 	.word	0x1a003a70
1a0033e8:	1a003a90 	.word	0x1a003a90
1a0033ec:	1a003a50 	.word	0x1a003a50

1a0033f0 <__swsetup_r>:
1a0033f0:	4b32      	ldr	r3, [pc, #200]	; (1a0034bc <__swsetup_r+0xcc>)
1a0033f2:	b570      	push	{r4, r5, r6, lr}
1a0033f4:	681d      	ldr	r5, [r3, #0]
1a0033f6:	4606      	mov	r6, r0
1a0033f8:	460c      	mov	r4, r1
1a0033fa:	b125      	cbz	r5, 1a003406 <__swsetup_r+0x16>
1a0033fc:	69ab      	ldr	r3, [r5, #24]
1a0033fe:	b913      	cbnz	r3, 1a003406 <__swsetup_r+0x16>
1a003400:	4628      	mov	r0, r5
1a003402:	f7ff fd75 	bl	1a002ef0 <__sinit>
1a003406:	4b2e      	ldr	r3, [pc, #184]	; (1a0034c0 <__swsetup_r+0xd0>)
1a003408:	429c      	cmp	r4, r3
1a00340a:	d10f      	bne.n	1a00342c <__swsetup_r+0x3c>
1a00340c:	686c      	ldr	r4, [r5, #4]
1a00340e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a003412:	b29a      	uxth	r2, r3
1a003414:	0715      	lsls	r5, r2, #28
1a003416:	d42c      	bmi.n	1a003472 <__swsetup_r+0x82>
1a003418:	06d0      	lsls	r0, r2, #27
1a00341a:	d411      	bmi.n	1a003440 <__swsetup_r+0x50>
1a00341c:	2209      	movs	r2, #9
1a00341e:	6032      	str	r2, [r6, #0]
1a003420:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a003424:	81a3      	strh	r3, [r4, #12]
1a003426:	f04f 30ff 	mov.w	r0, #4294967295
1a00342a:	e03e      	b.n	1a0034aa <__swsetup_r+0xba>
1a00342c:	4b25      	ldr	r3, [pc, #148]	; (1a0034c4 <__swsetup_r+0xd4>)
1a00342e:	429c      	cmp	r4, r3
1a003430:	d101      	bne.n	1a003436 <__swsetup_r+0x46>
1a003432:	68ac      	ldr	r4, [r5, #8]
1a003434:	e7eb      	b.n	1a00340e <__swsetup_r+0x1e>
1a003436:	4b24      	ldr	r3, [pc, #144]	; (1a0034c8 <__swsetup_r+0xd8>)
1a003438:	429c      	cmp	r4, r3
1a00343a:	bf08      	it	eq
1a00343c:	68ec      	ldreq	r4, [r5, #12]
1a00343e:	e7e6      	b.n	1a00340e <__swsetup_r+0x1e>
1a003440:	0751      	lsls	r1, r2, #29
1a003442:	d512      	bpl.n	1a00346a <__swsetup_r+0x7a>
1a003444:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a003446:	b141      	cbz	r1, 1a00345a <__swsetup_r+0x6a>
1a003448:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a00344c:	4299      	cmp	r1, r3
1a00344e:	d002      	beq.n	1a003456 <__swsetup_r+0x66>
1a003450:	4630      	mov	r0, r6
1a003452:	f7ff fe19 	bl	1a003088 <_free_r>
1a003456:	2300      	movs	r3, #0
1a003458:	6363      	str	r3, [r4, #52]	; 0x34
1a00345a:	89a3      	ldrh	r3, [r4, #12]
1a00345c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
1a003460:	81a3      	strh	r3, [r4, #12]
1a003462:	2300      	movs	r3, #0
1a003464:	6063      	str	r3, [r4, #4]
1a003466:	6923      	ldr	r3, [r4, #16]
1a003468:	6023      	str	r3, [r4, #0]
1a00346a:	89a3      	ldrh	r3, [r4, #12]
1a00346c:	f043 0308 	orr.w	r3, r3, #8
1a003470:	81a3      	strh	r3, [r4, #12]
1a003472:	6923      	ldr	r3, [r4, #16]
1a003474:	b94b      	cbnz	r3, 1a00348a <__swsetup_r+0x9a>
1a003476:	89a3      	ldrh	r3, [r4, #12]
1a003478:	f403 7320 	and.w	r3, r3, #640	; 0x280
1a00347c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a003480:	d003      	beq.n	1a00348a <__swsetup_r+0x9a>
1a003482:	4621      	mov	r1, r4
1a003484:	4630      	mov	r0, r6
1a003486:	f000 f845 	bl	1a003514 <__smakebuf_r>
1a00348a:	89a2      	ldrh	r2, [r4, #12]
1a00348c:	f012 0301 	ands.w	r3, r2, #1
1a003490:	d00c      	beq.n	1a0034ac <__swsetup_r+0xbc>
1a003492:	2300      	movs	r3, #0
1a003494:	60a3      	str	r3, [r4, #8]
1a003496:	6963      	ldr	r3, [r4, #20]
1a003498:	425b      	negs	r3, r3
1a00349a:	61a3      	str	r3, [r4, #24]
1a00349c:	6923      	ldr	r3, [r4, #16]
1a00349e:	b953      	cbnz	r3, 1a0034b6 <__swsetup_r+0xc6>
1a0034a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0034a4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
1a0034a8:	d1ba      	bne.n	1a003420 <__swsetup_r+0x30>
1a0034aa:	bd70      	pop	{r4, r5, r6, pc}
1a0034ac:	0792      	lsls	r2, r2, #30
1a0034ae:	bf58      	it	pl
1a0034b0:	6963      	ldrpl	r3, [r4, #20]
1a0034b2:	60a3      	str	r3, [r4, #8]
1a0034b4:	e7f2      	b.n	1a00349c <__swsetup_r+0xac>
1a0034b6:	2000      	movs	r0, #0
1a0034b8:	e7f7      	b.n	1a0034aa <__swsetup_r+0xba>
1a0034ba:	bf00      	nop
1a0034bc:	10000090 	.word	0x10000090
1a0034c0:	1a003a70 	.word	0x1a003a70
1a0034c4:	1a003a90 	.word	0x1a003a90
1a0034c8:	1a003a50 	.word	0x1a003a50

1a0034cc <__swhatbuf_r>:
1a0034cc:	b570      	push	{r4, r5, r6, lr}
1a0034ce:	460e      	mov	r6, r1
1a0034d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0034d4:	2900      	cmp	r1, #0
1a0034d6:	b096      	sub	sp, #88	; 0x58
1a0034d8:	4614      	mov	r4, r2
1a0034da:	461d      	mov	r5, r3
1a0034dc:	da07      	bge.n	1a0034ee <__swhatbuf_r+0x22>
1a0034de:	2300      	movs	r3, #0
1a0034e0:	602b      	str	r3, [r5, #0]
1a0034e2:	89b3      	ldrh	r3, [r6, #12]
1a0034e4:	061a      	lsls	r2, r3, #24
1a0034e6:	d410      	bmi.n	1a00350a <__swhatbuf_r+0x3e>
1a0034e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a0034ec:	e00e      	b.n	1a00350c <__swhatbuf_r+0x40>
1a0034ee:	466a      	mov	r2, sp
1a0034f0:	f7fd faad 	bl	1a000a4e <_fstat_r>
1a0034f4:	2800      	cmp	r0, #0
1a0034f6:	dbf2      	blt.n	1a0034de <__swhatbuf_r+0x12>
1a0034f8:	9a01      	ldr	r2, [sp, #4]
1a0034fa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
1a0034fe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
1a003502:	425a      	negs	r2, r3
1a003504:	415a      	adcs	r2, r3
1a003506:	602a      	str	r2, [r5, #0]
1a003508:	e7ee      	b.n	1a0034e8 <__swhatbuf_r+0x1c>
1a00350a:	2340      	movs	r3, #64	; 0x40
1a00350c:	2000      	movs	r0, #0
1a00350e:	6023      	str	r3, [r4, #0]
1a003510:	b016      	add	sp, #88	; 0x58
1a003512:	bd70      	pop	{r4, r5, r6, pc}

1a003514 <__smakebuf_r>:
1a003514:	898b      	ldrh	r3, [r1, #12]
1a003516:	b573      	push	{r0, r1, r4, r5, r6, lr}
1a003518:	079d      	lsls	r5, r3, #30
1a00351a:	4606      	mov	r6, r0
1a00351c:	460c      	mov	r4, r1
1a00351e:	d507      	bpl.n	1a003530 <__smakebuf_r+0x1c>
1a003520:	f104 0347 	add.w	r3, r4, #71	; 0x47
1a003524:	6023      	str	r3, [r4, #0]
1a003526:	6123      	str	r3, [r4, #16]
1a003528:	2301      	movs	r3, #1
1a00352a:	6163      	str	r3, [r4, #20]
1a00352c:	b002      	add	sp, #8
1a00352e:	bd70      	pop	{r4, r5, r6, pc}
1a003530:	ab01      	add	r3, sp, #4
1a003532:	466a      	mov	r2, sp
1a003534:	f7ff ffca 	bl	1a0034cc <__swhatbuf_r>
1a003538:	9900      	ldr	r1, [sp, #0]
1a00353a:	4605      	mov	r5, r0
1a00353c:	4630      	mov	r0, r6
1a00353e:	f7ff fdf1 	bl	1a003124 <_malloc_r>
1a003542:	b948      	cbnz	r0, 1a003558 <__smakebuf_r+0x44>
1a003544:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a003548:	059a      	lsls	r2, r3, #22
1a00354a:	d4ef      	bmi.n	1a00352c <__smakebuf_r+0x18>
1a00354c:	f023 0303 	bic.w	r3, r3, #3
1a003550:	f043 0302 	orr.w	r3, r3, #2
1a003554:	81a3      	strh	r3, [r4, #12]
1a003556:	e7e3      	b.n	1a003520 <__smakebuf_r+0xc>
1a003558:	4b0d      	ldr	r3, [pc, #52]	; (1a003590 <__smakebuf_r+0x7c>)
1a00355a:	62b3      	str	r3, [r6, #40]	; 0x28
1a00355c:	89a3      	ldrh	r3, [r4, #12]
1a00355e:	6020      	str	r0, [r4, #0]
1a003560:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a003564:	81a3      	strh	r3, [r4, #12]
1a003566:	9b00      	ldr	r3, [sp, #0]
1a003568:	6163      	str	r3, [r4, #20]
1a00356a:	9b01      	ldr	r3, [sp, #4]
1a00356c:	6120      	str	r0, [r4, #16]
1a00356e:	b15b      	cbz	r3, 1a003588 <__smakebuf_r+0x74>
1a003570:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a003574:	4630      	mov	r0, r6
1a003576:	f7fd fa6f 	bl	1a000a58 <_isatty_r>
1a00357a:	b128      	cbz	r0, 1a003588 <__smakebuf_r+0x74>
1a00357c:	89a3      	ldrh	r3, [r4, #12]
1a00357e:	f023 0303 	bic.w	r3, r3, #3
1a003582:	f043 0301 	orr.w	r3, r3, #1
1a003586:	81a3      	strh	r3, [r4, #12]
1a003588:	89a3      	ldrh	r3, [r4, #12]
1a00358a:	431d      	orrs	r5, r3
1a00358c:	81a5      	strh	r5, [r4, #12]
1a00358e:	e7cd      	b.n	1a00352c <__smakebuf_r+0x18>
1a003590:	1a002e89 	.word	0x1a002e89

1a003594 <__malloc_lock>:
1a003594:	4801      	ldr	r0, [pc, #4]	; (1a00359c <__malloc_lock+0x8>)
1a003596:	f7ff bd6c 	b.w	1a003072 <__retarget_lock_acquire_recursive>
1a00359a:	bf00      	nop
1a00359c:	10000198 	.word	0x10000198

1a0035a0 <__malloc_unlock>:
1a0035a0:	4801      	ldr	r0, [pc, #4]	; (1a0035a8 <__malloc_unlock+0x8>)
1a0035a2:	f7ff bd67 	b.w	1a003074 <__retarget_lock_release_recursive>
1a0035a6:	bf00      	nop
1a0035a8:	10000198 	.word	0x10000198

1a0035ac <Gamepad_ReportDescSize>:
1a0035ac:	ffff004c                                L...

1a0035b0 <Gamepad_ReportDescriptor>:
1a0035b0:	05090105 010501a1 31093009 7f258115     .........0.1..%.
1a0035c0:	08750295 02950281 01810875 39090105     ..u.....u......9
1a0035d0:	08250115 3b460035 75019501 95028108     ..%.5.F;...u....
1a0035e0:	81087502 19090501 15062901 95012500     .u.......)...%..
1a0035f0:	81017506 75029502 c0018101              .u.....u....

1a0035fc <USB_DeviceDescriptor>:
1a0035fc:	02000112 40000000 00861fc9 02010100     .......@........
1a00360c:	ffff0103                                ....

1a003610 <USB_DeviceQualifier>:
1a003610:	0200060a 40000000 ffff0001              .......@....

1a00361c <USB_StringDescriptor>:
1a00361c:	04090304 00470326 00750072 006f0070     ....&.G.r.u.p.o.
1a00362c:	004e0020 006f0072 0020002e 00200032      .N.r.o... .2. .
1a00363c:	0020002d 00440054 03220050 0050004c     -. .T.D.P.".L.P.
1a00364c:	00310043 00780038 00200078 00410047     C.1.8.x.x. .G.A.
1a00365c:	0045004d 00410050 00200044 0041031c     M.E.P.A.D. ...A.
1a00366c:	00430042 00310044 00330032 00350034     B.C.D.1.2.3.4.5.
1a00367c:	00370036 00390038 0041031a 00430052     6.7.8.9...A.R.C.
1a00368c:	00440041 00200045 00540053 00430049     A.D.E. .S.T.I.C.
1a00369c:	                                         K.

1a00369e <Keyboard_ReportDescSize>:
1a00369e:	                                         ?.

1a0036a0 <Keyboard_ReportDescriptor>:
1a0036a0:	06090105 070501a1 e729e019 01250015     ..........)...%.
1a0036b0:	08950175 01950281 01810875 01750595     u.......u.....u.
1a0036c0:	01190805 02910529 03750195 06950191     ....).....u.....
1a0036d0:	00150875 07056525 65290019 ffc00081     u...%e....)e....
1a0036e0:	150e0400 00040404 04040400 00040e15     ................
1a0036f0:	08040000 0004081f 02040000 0004021f     ................
1a003700:	ffff0020 656e6f43 6e617463 2e2e6f64      ...Conectando..
1a003710:	ffff002e 20425355 6f636e69 63657272     ....USB incorrec
1a003720:	ff006f74                                to..

1a003724 <MEF_Functions>:
1a003724:	1a000791 1a00076d 1a000735 1a0006d1     ....m...5.......
1a003734:	7473694c 6170206f 6a206172 72616775     Listo para jugar
1a003744:	ffffff00                                ....

1a003748 <InitClkStates>:
1a003748:	01010f01                                ....

1a00374c <pinmuxing>:
1a00374c:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a00375c:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a00376c:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a00377c:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a00378c:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a00379c:	00d50301 00d50401 00160107 00560207     ..............V.
1a0037ac:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a0037bc:	00570206                                ..W.

1a0037c0 <ExtRateIn>:
1a0037c0:	00000000                                ....

1a0037c4 <GpioButtons>:
1a0037c4:	08000400 09010900                       ........

1a0037cc <GpioLeds>:
1a0037cc:	01050005 0e000205 0c010b01              ............

1a0037d8 <GpioPorts>:
1a0037d8:	03030003 0f050403 05031005 07030603     ................
1a0037e8:	ffff0802                                ....

1a0037ec <OscRateIn>:
1a0037ec:	00b71b00                                ....

1a0037f0 <InitClkStates>:
1a0037f0:	00010100 00010909 0001090a 01010701     ................
1a003800:	00010902 00010906 0101090c 0001090d     ................
1a003810:	0001090e 0001090f 00010910 00010911     ................
1a003820:	00010912 00010913 00011114 00011119     ................
1a003830:	0001111a 0001111b                       ........

1a003838 <usbPLLSetup>:
1a003838:	0000601d 06167ffa 00000000 00000000     .`..............
1a003848:	1c9c3800 08040201 0f0f0f03 ffff00ff     .8..............

1a003858 <periph_to_base>:
1a003858:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a003868:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a003878:	000100e0 01000100 01200003 00060120     .......... . ...
1a003888:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a003898:	01820013 00120182 01a201a2 01c20011     ................
1a0038a8:	001001c2 01e201e2 0202000f 000e0202     ................
1a0038b8:	02220222 0223000d 001c0223              "."...#.#...

1a0038c4 <UART_BClock>:
1a0038c4:	01a201c2 01620182                       ......b.

1a0038cc <UART_PClock>:
1a0038cc:	00820081 00a200a1                       ........

1a0038d4 <gpioPinsInit>:
1a0038d4:	02000104 00050701 05010d03 04080100     ................
1a0038e4:	02020002 02000304 00000403 04070002     ................
1a0038f4:	030c0300 09050402 05040103 04030208     ................
1a003904:	04020305 06040504 0802000c 03000b06     ................
1a003914:	00090607 07060503 060f0504 03030004     ................
1a003924:	02000404 00050404 06040502 04060200     ................
1a003934:	0c050408 05040a04 0003010e 14010a00     ................
1a003944:	010f0000 0d000012 00001101 0010010c     ................
1a003954:	07070300 000f0300 01000001 00000000     ................
1a003964:	000a0600 08060603 06100504 04030005     ................
1a003974:	03000106 04090400 04010d05 010b0000     ................
1a003984:	0200000f 00000001 00010104 02010800     ................
1a003994:	01090000 09010006 05040002 04010200     ................
1a0039a4:	02020105 02020504 0e00000a 01000b02     ................
1a0039b4:	000c020b ffff0c01 00061a80 0000000a     ................
1a0039c4:	5f425355 5f444948 53554f4d 00000d45     USB_HID_MOUSE...
1a0039d4:	5f425355 5f444948 4259454b 4452414f     USB_HID_KEYBOARD
1a0039e4:	0000000d 5f425355 5f444948 454e4547     ....USB_HID_GENE
1a0039f4:	0d434952 00000000 5f425355 5f434443     RIC.....USB_CDC_
1a003a04:	54524155 0000000d 5f425355 5f43534d     UART....USB_MSC_
1a003a14:	56495244 00000d45 6f727245 79202c72     DRIVE...Error, y
1a003a24:	6d20756f 20747375 20657375 61762061     ou must use a va
1a003a34:	2064696c 20425355 69766564 63206563     lid USB device c
1a003a44:	7373616c 0000000d d494c080              lass........

1a003a50 <__sf_fake_stderr>:
	...

1a003a70 <__sf_fake_stdin>:
	...

1a003a90 <__sf_fake_stdout>:
	...

1a003ab0 <_global_impure_ptr>:
1a003ab0:	10000094                                ....
